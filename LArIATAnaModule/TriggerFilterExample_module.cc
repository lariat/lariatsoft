////////////////////////////////////////////////////////////////////////
// Class:       TriggerFilterExample
// Module Type: analyzer
// File:        TriggerFilterExample_module.cc
//
// This module provides a working example of how to use the trigger-
// filtering algorithm.
//
// Generated at Fri Jul  8 15:18:40 2016 by William Foreman using artmod
// from cetpkgsupport v1_10_01.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDAnalyzer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "canvas/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"

// LArIATSoft includes
#include "LArIATRecoAlg/TriggerFilterAlg.h"

class TriggerFilterExample;

// ===========================================================================
class TriggerFilterExample : public art::EDAnalyzer {
public:
  explicit TriggerFilterExample(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  TriggerFilterExample(TriggerFilterExample const &) = delete;
  TriggerFilterExample(TriggerFilterExample &&) = delete;
  TriggerFilterExample & operator = (TriggerFilterExample const &) = delete;
  TriggerFilterExample & operator = (TriggerFilterExample &&) = delete;

  // Required functions.
  void analyze(art::Event const & e) override;

  // Selected optional functions.
  void beginJob() override;
  void beginRun(art::Run const & r) override;
  void beginSubRun(art::SubRun const & sr) override;
  void endJob() override;
  void endRun(art::Run const & r) override;
  void endSubRun(art::SubRun const & sr) override;
  void reconfigure(fhicl::ParameterSet const & p) override;

private:

  // Create instance of the trigger filter class
  TriggerFilterAlg    fTriggerFilterAlg;

  // Other parameters passed by fhicl (though usually
  // the default is fine).
  std::string         fTriggerUtility;
  std::string         fDAQModule;
  std::string         fInstanceName;


};


// ===========================================================================
TriggerFilterExample::TriggerFilterExample(fhicl::ParameterSet const & p)
  :
  EDAnalyzer(p),
  fTriggerFilterAlg(p.get<fhicl::ParameterSet>("TriggerFilterAlg"))
{
  this->reconfigure(p);  
}


// ===========================================================================
void TriggerFilterExample::analyze(art::Event const & e)
{
  // First make an art::Handle to store the trigger objects,
  // and then grab all the triggers from this event.
  art::Handle< std::vector< raw::Trigger >> triggerHandle;
  e.getByLabel(fDAQModule,fInstanceName,triggerHandle);

  if( triggerHandle->size() != 0 ){
    std::cout<<"Trigger handle not empty! Size = "<<triggerHandle->size()<<"\n";
    
    // There should always be just one trigger object per event,
    // so create a raw::Trigger object from the first element
    raw::Trigger thisTrigger  = triggerHandle->at(0);

    // Loop through the bits
    for(int i=0; i<32; i++ ) std::cout<<"  bit "<<i<<":   "<<thisTrigger.Triggered(i)<<"\n";

    // Now let's use some filters.  Elements in patterns are AND'ed with 
    // all the others in that pattern, and each pattern must be enclosed 
    // by "< >".  If multiple patterns are given, they will be OR'ed.  
    // "+" and "-" indicate whether a bit is required to be ON or OFF.
    //
    // For example,
    // "<+A><+B-C>" = (A) or (B and NOT C)
    //
    // The function doesTriggerPassFilter will return a TRUE or a FALSE 
    // after parsing the input string and matching against the trigger bits.
    
    std::string filter;
    bool        didItPass;
    
    // To test if this event happened during BEAMON,
    filter    = "<+BEAMON>";
    didItPass = fTriggerFilterAlg.doesTriggerPassFilter(thisTrigger,filter);
    std::cout<<"Was it a beam event? "<< didItPass <<"\n";

    // Now if we want to find pedestal events in Run 2, we can require the 
    // event was neither a BEAMON or COSMICON trigger (the PEDESTALON gate 
    // is not yet accessible in data as of 2016-07-10).
    filter    = "<-BEAMON-COSMICON>";
    didItPass = fTriggerFilterAlg.doesTriggerPassFilter(thisTrigger,filter);
    std::cout<<"Was it a pedestal event? "<< didItPass <<"\n";

    // Check for through-going cosmics
    filter    = "<+COSMICON+COSMIC>";
    didItPass = fTriggerFilterAlg.doesTriggerPassFilter(thisTrigger,filter);
    std::cout<<"Was it a cosmic paddle event? "<< didItPass <<"\n";

    // All cosmics (ie, cosmic OR michel)
    filter    = "<+COSMICON+COSMIC><+COSMICON+MICHEL>";
    didItPass = fTriggerFilterAlg.doesTriggerPassFilter(thisTrigger,filter);
    std::cout<<"Was it any kind of cosmic event? "<< didItPass <<"\n";
  
    // MURS events
    filter    ="<+MURS>";
    didItPass = fTriggerFilterAlg.doesTriggerPassFilter(thisTrigger,filter);
    std::cout<<"Was the muon range-stack hit? "<< didItPass <<"\n\n";

  }
 

}

// ===========================================================================
void TriggerFilterExample::beginJob()
{
}

// ===========================================================================
void TriggerFilterExample::beginRun(art::Run const & r)
{
  // Must access database in beginRun() method
  fTriggerFilterAlg.loadXMLDatabaseTable( r.run() );
}

// ===========================================================================
void TriggerFilterExample::beginSubRun(art::SubRun const & sr)
{
}

// ===========================================================================
void TriggerFilterExample::endJob()
{
}

// ===========================================================================
void TriggerFilterExample::endRun(art::Run const & r)
{
}

// ===========================================================================
void TriggerFilterExample::endSubRun(art::SubRun const & sr)
{
}

// ===========================================================================
void TriggerFilterExample::reconfigure(fhicl::ParameterSet const & p)
{
  fTriggerUtility         = p.get< std::string >  ("TriggerUtility","FragmentToDigit");
  fDAQModule              = p.get< std::string >  ("DAQModule","daq");
  fInstanceName           = p.get< std::string >  ("InstanceName","");
}

DEFINE_ART_MODULE(TriggerFilterExample)
