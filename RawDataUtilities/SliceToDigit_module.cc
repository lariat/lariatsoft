////////////////////////////////////////////////////////////////////////
// Class:       SliceToDigit
// Module Type: producer
// File:        SliceToDigit_module.cc
//
// based on FragmentToDigit_module.cc , Generated at Mon Dec  1 11:28:13 2014 by Will Flanagan using artmod
// from cetpkgsupport v1_07_01.
////////////////////////////////////////////////////////////////////////



#include "art/Framework/Core/EDProducer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "art/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"
#include "art/Framework/Services/Registry/ServiceHandle.h"
#include "art/Framework/Services/Optional/TFileService.h"
#include "art/Framework/Services/Optional/TFileDirectory.h"

#include "artdaq-core/Data/Fragment.hh"

#include "LArIATFragments/LariatFragment.h"
#include "LArIATFragments/WUTFragment.h"
#include "LArIATFragments/CAENFragment.h"
#include "LArIATFragments/TDCFragment.h"
#include "LArIATFragments/V1495Fragment.h"

#include "SimpleTypesAndConstants/RawTypes.h"
#include "RawData/RawDigit.h"
#include "RawData/AuxDetDigit.h"
#include "RawData/OpDetPulse.h"
#include "RawData/TriggerData.h"
#include "SummaryData/RunData.h"
#include "Geometry/Geometry.h"
#include "Utilities/AssociationUtil.h"

#include "RawDataUtilities/FragmentUtility.h"

//#include "TTree.h"
#include "TGraph.h"
#include "TF1.h"
#include "TH2.h"
#include "TH1.h"

#include <memory>
#include <functional>
#include <vector>
#include <string>
#include <algorithm>
#include <initializer_list>
#include <bitset>

enum {
  V1740_N_CHANNELS = 64,
  V1751_N_CHANNELS = 8,
  WUT_N_TDC_CHANNELS = 16,
  WUT_MAX_HITS = 128,
};

// ugly nested maps for matching data blocks
//typedef std::map< std::string, std::map< std::string, std::vector< std::map< unsigned int, std::vector<unsigned int> > > > > match_maps;
//typedef std::map< std::string, std::map< std::string, std::vector< std::pair<double, double> > > > fit_params_maps;
typedef std::map< int, std::map< int, std::vector< std::map< unsigned int, std::vector<unsigned int> > > > > match_maps;
typedef std::map< int, std::map< int, std::vector< std::pair<double, double> > > > fit_params_maps;
typedef std::vector<TDCFragment::TdcEventData> TDCDataBlock; 

class SliceToDigit;

class SliceToDigit : public art::EDProducer {
public:
  explicit SliceToDigit(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  SliceToDigit(SliceToDigit const &) = delete;
  SliceToDigit(SliceToDigit &&) = delete;
  SliceToDigit & operator = (SliceToDigit const &) = delete;
  SliceToDigit & operator = (SliceToDigit &&) = delete;

  // Required functions.
  void produce(art::Event & evt) override;

  // Selected optional functions.
  void beginJob() override;
  void endJob() override;
  void reconfigure(fhicl::ParameterSet const & p) override;
  void beginRun(art::Run &run);
  uint32_t triggerBits               (std::vector<CAENFragment>     const& caenFrags);   				  
  void     makeTPCRawDigits          (std::vector<CAENFragment>     const& caenFrags,    	
			     	      std::vector<raw::RawDigit>         & tpcDigits);   	
  float    findPedestal              (const std::vector<short>           & adcVec);	     
  void     makeOpDetPulses           (std::vector<CAENFragment>     const& caenFrags,    	       
       	   			      std::vector<raw::OpDetPulse>       & opDetPulse);  	       
  void 	   makeMuonRangeDigits	     (std::vector<CAENFragment>     const& caenFrags,    	       
				      std::vector<raw::AuxDetDigit>      & mrAuxDigits); 	       
  void 	   makeTOFDigits             (std::vector<CAENFragment>     const& caenFrags,    	       
				      std::vector<raw::AuxDetDigit>      & tofAuxDigits);	       
  void 	   makeAeroGelDigits         (std::vector<CAENFragment>     const& caenFrags,    	       
				      std::vector<raw::AuxDetDigit>      & agAuxDigits); 	       
  void 	   makeHaloDigits            (std::vector<CAENFragment>     const& caenFrags,    	       
				      std::vector<raw::AuxDetDigit>      & hAuxDigits); 	       
  void 	   makeTriggerDigits         (std::vector<CAENFragment>     const& caenFrags,    	       
				      std::vector<raw::AuxDetDigit>      & trAuxDigits); 	       
  void 	   caenFragmentToAuxDetDigits(std::vector<CAENFragment>     const& caenFrags,	       
				      std::vector<raw::AuxDetDigit>      & auxDetDigits,	       
				      uint32_t                      const& boardId,		       
				      std::set<uint32_t>            const& boardChans,	       
				      uint32_t                      const& chanOffset,	       
				      std::string                   const& detName);	       
  void 	   makeMWPCDigits            (std::vector<TDCFragment::TdcEventData> const& tdcFrags,      
				      std::vector<raw::AuxDetDigit>               & mwpcAuxDigits);

  void     LinFitUnweighted(const std::vector<double>& x,
			    const std::vector<double>& y,
			    double& m, double& c);

  void     InitializeMWPCContainers();
  void     CleanUpMWPCContainers();
  

private:

  art::ServiceHandle<art::TFileService>      tfs;                      ///< handle to the TFileService
  std::string                                fRawFragmentLabel;        ///< label for module producing artdaq fragments
  std::string                                fRawFragmentInstance;     ///< instance label for artdaq fragments        
  size_t                                     fMaxNumberFitIterations;  ///< number of fit iterations before stopping
  std::map<uint32_t, std::set<uint32_t> >    fOpticalDetChannels;      ///< key is the board ID, set are channels on that board
  std::map< int, std::vector<CAENFragment> > fTriggerToCAENDataBlocks; ///< map trigger ID to vector of CAEN blocks
  std::map< int, std::vector<TDCDataBlock> > fTriggerToTDCDataBlocks;  ///< map trigger ID to vector of TDC blocks
  std::map<size_t, size_t>                   fTDCToStartWire;          ///< map TDCs to first wire attached to TDC
  std::map<size_t, size_t>                   fTDCToChamber;            ///< map TDCs to the chamber they are attached
  std::vector<std::string>                   fMWPCNames;               ///< vector to hold detector names of the MWPCs
  int                                        fRunNumber;               ///< current run number
  size_t                                     fTriggerDecisionTick;     ///< tick at which to expect the trigger decision
  float                                      fTrigger1740Pedestal;     ///< pedestal value for the 1740 readout of the triggers
  float                                      fTrigger1740Threshold;    ///< 1740 readout must go below the pedestal this much to trigger
  TH1F*                                      fRawDigitPedestals;       ///< computed pedestal values               
  TH1F*                                      fRawDigitADC;             ///< pedestal subtracted values               
  TH2F*                                      FragCountsSameTrigger_1751vsTDC_NoTPC;	  
  TH2F*                                      FragCountsSameTrigger_1751vsTDC_WithTPC; 
  TH2F*                                      FragCountsSameTrigger_1751vsTDC_ExtraTPC;

};

//------------------------------------------------------------------------------
SliceToDigit::SliceToDigit(fhicl::ParameterSet const & p)
  : fRunNumber(0)
{
  this->reconfigure(p);

  ///\todo At some point we want to store the POT for each run in the file

  produces< sumdata::RunData, art::InRun >();

  produces< std::vector<raw::RawDigit>    >();
  produces< std::vector<raw::Trigger>     >();
  produces< std::vector<raw::AuxDetDigit> >();
  produces< std::vector<raw::OpDetPulse>  >();
  produces< art::Assns<raw::Trigger, raw::RawDigit>    >();
  produces< art::Assns<raw::Trigger, raw::AuxDetDigit> >();
  produces< art::Assns<raw::Trigger, raw::OpDetPulse>  >();
  //produces< std::vector<V1495Fragment> >();


}

//------------------------------------------------------------------------------
void SliceToDigit::reconfigure(fhicl::ParameterSet const & p)
{
  fRawFragmentLabel       = p.get< std::string >("RawFragmentLabel",       "daq"  );
  fRawFragmentInstance    = p.get< std::string >("RawFragmentInstance",    "SPILL");
  fMaxNumberFitIterations = p.get< int         >("MaxNumberFitIterations", 5      );
  fTriggerDecisionTick    = p.get< unsigned int>("TriggerDecisionTick",    100    ); 
  fTrigger1740Pedestal    = p.get< float       >("Trigger1740Pedestal",    2000.  );
  fTrigger1740Threshold   = p.get< float       >("Trigger1740Threshold",   0.     );

  std::vector<std::vector<unsigned int> > opChans = p.get< std::vector<std::vector<unsigned int>> >("pmt_channel_ids");

  for(size_t i = 0; i < opChans.size(); ++i){
    if(opChans[i].size() < 1) continue;
    for(size_t j = 1; j < opChans[i].size(); ++j){
      fOpticalDetChannels[opChans[i][0]].insert(opChans[i][j]);
      LOG_VERBATIM("SliceToDigit") << "board " << opChans[i][0] 
				      << " has optical detector on channel " 
				      << opChans[i][j];
    }
  }


  return;
}

//------------------------------------------------------------------------------
void SliceToDigit::beginJob()
{
  FragCountsSameTrigger_1751vsTDC_NoTPC   = tfs->make<TH2F>("FragCountsSameTrigger_1751vsTDC_NoTPC"   
							    ,"FragCountsSameTrigger_1751vsTDC_NoTPC; Number TDC Data Blocks; Number v1751 Data Blocks"   
							    ,6,-0.5,5.5,6,-0.5,5.5);
  FragCountsSameTrigger_1751vsTDC_WithTPC = tfs->make<TH2F>("FragCountsSameTrigger_1751vsTDC_WithTPC" 
							    ,"FragCountsSameTrigger_1751vsTDC_WithTPC; Number TDC Data Blocks; Number v1751 Data Blocks" 
							    ,6,-0.5,5.5,6,-0.5,5.5);
  FragCountsSameTrigger_1751vsTDC_ExtraTPC= tfs->make<TH2F>("FragCountsSameTrigger_1751vsTDC_ExtraTPC"
							    ,"FragCountsSameTrigger_1751vsTDC_ExtraTPC; Number TDC Data Blocks; Number v1751 Data Blocks"
							    ,6,-0.5,5.5,6,-0.5,5.5);

  fRawDigitPedestals = tfs->make<TH1F>("rawDigitPedestals", ";Pedestal (ADC);Digits", 1000, 0., 10000.);
  fRawDigitADC       = tfs->make<TH1F>("rawDigitADC",       ";Signal (ADC);Digits"  , 1000, 0., 10000.);   

  return;
}

//------------------------------------------------------------------------------
void SliceToDigit::endJob()
{
  this->CleanUpMWPCContainers();

  return;
}

//____________________________________________________________________________
void SliceToDigit::beginRun(art::Run& run)
{
  fRunNumber = run.run();

  this->InitializeMWPCContainers();

  // grab the geometry object to see what geometry we are using
  art::ServiceHandle<geo::Geometry> geo;

  std::unique_ptr<sumdata::RunData> runcol(new sumdata::RunData(geo->DetectorName()));

  run.put(std::move(runcol));

  return;
}

//------------------------------------------------------------------------------
void SliceToDigit::produce(art::Event & evt)
{
  std::unique_ptr< std::vector<raw::RawDigit>    > rawDigitVec(new std::vector<raw::RawDigit   >);
  std::unique_ptr< std::vector<raw::Trigger>     > triggerVec (new std::vector<raw::Trigger    >);
  std::unique_ptr< std::vector<raw::AuxDetDigit> > auxDetVec  (new std::vector<raw::AuxDetDigit>);
  std::unique_ptr< std::vector<raw::OpDetPulse>  > opDetVec   (new std::vector<raw::OpDetPulse >);


  // make the utility to access the fragments from the event record
  rdu::FragmentUtility fragUtil(evt, fRawFragmentLabel, fRawFragmentInstance);

  // fill the maps for matching the different data blocks into triggers
  // clear out the maps from the previous event first
  fTriggerToCAENDataBlocks.clear();
  fTriggerToTDCDataBlocks .clear();
 // this->matchDataBlocks(&fragUtil.DAQFragment());

  // make a set of the different trigger numbers, ie the keys in the fTriggerToCAENDataBlocks
  // and fTriggerToTDCDataBlocks maps
  std::set<int> trigNums;
  //for(auto itr : fTriggerToCAENDataBlocks) trigNums.insert(itr.first);
  //for(auto itr : fTriggerToTDCDataBlocks)  trigNums.insert(itr.first);

  std::vector<CAENFragment>              caenFrags;	 
  std::vector<raw::AuxDetDigit>          auxDigits;	 
  std::vector<raw::RawDigit>    	 rawDigits;	 
  std::vector<raw::OpDetPulse>   	 opPulses;	 
//  size_t                         	 startAssns = 0;
  //size_t                         	 endAssns   = 0;
//  double                                 eventTime  = 1.*evt.time().timeHigh() + 1.*evt.time().timeLow();
//  bool                                   caenDataPresent = true;
//  bool                                   tdcDataPresent  = true;

 // for(auto trigNum : trigNums){

//    caenDataPresent = false;
//    tdcDataPresent  = false;
    caenFrags.clear();
    auxDigits.clear();
    rawDigits.clear();
    opPulses .clear();
	const LariatFragment * data=&fragUtil.DAQFragment();

 const size_t numberCaenFrags = data->caenFrags.size();
  LOG_VERBATIM("SliceToDigit") << "Found " << numberCaenFrags << " CAEN fragments";

  if (numberCaenFrags > 0) 
    LOG_VERBATIM("SliceToDigit") << "Looking at CAEN fragments...";


    this->makeTPCRawDigits(data->caenFrags, rawDigits);
    for(auto rd : rawDigits) rawDigitVec->push_back(rd);
    this->makeOpDetPulses(data->caenFrags, opPulses);
    for(auto op : opPulses) opDetVec->push_back(op);
    this->makeMuonRangeDigits(data->caenFrags, auxDigits);
    this->makeTOFDigits      (data->caenFrags, auxDigits);
    this->makeAeroGelDigits  (data->caenFrags, auxDigits);
    this->makeHaloDigits     (data->caenFrags, auxDigits);
    this->makeTriggerDigits  (data->caenFrags, auxDigits);
    for(auto ad : auxDigits) auxDetVec->push_back(ad);

	for(auto tdcFrag : data->tdcFrags){
		std::vector< std::vector<TDCFragment::TdcEventData> > const& tdcEvents = tdcFrag.tdcEvents;	
		for(auto tdc : tdcEvents) this->makeMWPCDigits(tdc,  auxDigits);
	}


  evt.put(std::move(rawDigitVec));
  evt.put(std::move(auxDetVec));
  evt.put(std::move(opDetVec));
  //evt.put(std::move(tdRDAssns));
  //evt.put(std::move(tdADAssns));
  //evt.put(std::move(tdOPAssns));

  fTriggerToCAENDataBlocks.clear();
  fTriggerToTDCDataBlocks .clear();

  return;  
}

uint32_t SliceToDigit::triggerBits(std::vector<CAENFragment> const& caenFrags)
{

  // the trigger bits are piped into the V1740 board in slot 7, inputs 48 to 63
  // after run 6154 the bits were piped into a V1740 in slot 24, inputs 48 to 63
  // these are example connections as of May 08, 2015
  // 0   WC1      | OR of 2 X view TDCs ANDed with OR of 2 Y
  // 1   WC2      | "                                      " 
  // 2   WC3      | "                                      " 
  // 3   WC4      | "                                      " 
  // 4   BEAMON   | Spill gate : STARTs on $21, STOPs on $36 (cable says $26 but Bill says $36)
  // 5   USTOF    | OR of 4 PMTs
  // 6   DSTOF    | OR of 2 PMTs
  // 7   PUNCH    | OR of 2 X view paddles ANDed with OR of 2 Y
  // 8   HALO     | OR of 2 PMTs
  // 9   PULSER   |
  // 10  COSMICON | Cosmic gate : STARTs on $36, STOPs on $00 (not optimal, would like to stop before $00)
  // 11  COSMIC   | the trigger signal from the cosmic rack
  // 12  PILEUP   | Coincidence of any later LARSCINT with a delayed gate initiated by itself. Higher discrimination thresh. 
  // 13  MICHEL   | Coincidence of two light flashes in TPC (LARSCINT) occurring within a 5us time window
  // 14  LARSCINT | Coincidence of Hamamatsu and ETL PMTs (discriminated)
  // 15  MuRS     | Any coincidence of two planes.  Each plane is the OR of the discriminated pulses of 4 paddles. 

  // Each waveform corresponds to a single trigger channel.  If the (pedestal subtracted?) value of any ADC
  // in a waveform is less than 0, then the trigger for that channel fired

  // Need database eventually to set this correctly for different data-taking periods.
  // would set the fTriggerDecisionTick, fTrigger1740Pedestal, fTrigger1740Threshold values
  // in the beginRun method

  std::bitset<16> triggerBits;

  size_t minChan  = 48;
  size_t maxChan  = 64;

  for(auto const& frag : caenFrags){

    if     (frag.header.boardId != 7  && fRunNumber < 6155) continue;
    else if(frag.header.boardId != 24 && fRunNumber > 6154) continue;

    for(size_t chan = minChan; chan < maxChan; ++chan){ 
      if(chan > frag.waveForms.size() )
	throw cet::exception("SliceToDigit") << "attempting to access channel "
						<< chan << " from 1740 fragment with only "
						<< frag.waveForms.size() << " channels";
      
      // only look at the specific tick of the waveform where the trigger decision is taken
      if(frag.waveForms[chan].data.size() > fTriggerDecisionTick - 1)
	// the trigger waveform goes below the pedestal (low) if the trigger is on
	if(fTrigger1740Pedestal - frag.waveForms[chan].data[fTriggerDecisionTick] > fTrigger1740Threshold) 
	   triggerBits.set(chan - minChan);

    } // end loop over channels on the board
  } // end loop over caen fragments

  return triggerBits.to_ulong();
}  

//------------------------------------------------------------------------------
void SliceToDigit::makeTPCRawDigits(std::vector<CAENFragment> const& caenFrags,
				       std::vector<raw::RawDigit>     & tpcDigits)
{
  raw::ChannelID_t tpcChan = 0;
  size_t maxChan = 64;
  size_t boardId = 0;
  float  ped     = 0.;

  // make a list of the starting wire number for each board channel 0
  size_t startWireInd[8] = {239, 175, 111, 47,   0,   0,   0, 0 };
  size_t startWireCol[8] = {0,   0,   0,   239, 223, 159, 95, 31};
 
  for(auto const& frag : caenFrags){
    
    // the TPC mapping has the readout going to boards 0-7 of
    // the CAEN 1751, channels 0-63 of the boards 0-6, channels 0-31 of board 7
    // To make things hard, we decided to count the wires down instead of up
    // Board 0 channel 0  --> wire 239 of the induction plane
    // Board 3 channel 48 --> wire 0   of the induction plane
    // Board 3 channel 49 --> wire 239 of the collection plane
    // Board 7 channel 32 --> wire 0   of the collection plane
    boardId = frag.header.boardId;
    if(boardId > 7) continue;
    else{
      if(boardId < 7) maxChan = 64;
      else maxChan = 32;
      for(size_t chan = 0; chan < maxChan; ++chan){ 
	if(chan > frag.waveForms.size() )
	  throw cet::exception("SliceToDigit") << "attempting to access channel "
						  << chan << " from 1740 fragment with only "
						  << frag.waveForms.size() << " channels";

	// get TPC channel for the induction plane
	if( boardId < 3 || (boardId == 3 && chan < 48) )
	  tpcChan = startWireInd[boardId] - chan;
	// get TPC Channel for the collection plane
	else if( boardId > 3)
	  tpcChan = 240 + startWireCol[boardId] - chan;
	else if(boardId == 3 && chan > 47)
	  tpcChan = 240 + startWireCol[boardId] - chan + 48;

	// as of v04_13_00 of LArSoft, the event display no longer takes the
	// pedestal value from the RawDigit and uses an interface to a database instead
	// that doesn't really work for LArIAT, so pre-pedestal subtract the data
	// and keep the pedestal value for reference in the RawDigit
	std::vector<short> const padc(frag.waveForms[chan].data.begin(), frag.waveForms[chan].data.end());
	ped = this->findPedestal(padc);
	fRawDigitPedestals->Fill(ped);
	std::vector<short> adc(padc.size());
        for(size_t a = 0; a < adc.size(); ++a){
	  adc[a] = padc[a] - (short)ped;
	  fRawDigitADC->Fill(adc[a]);
	}

	raw::RawDigit rd(tpcChan, adc.size(), adc);
	rd.SetPedestal(ped);
	tpcDigits.push_back(rd);
      } // end loop to fill channels from this board
    }// end if it is a TPC board      
  }// end loop over caen fragments

  return;
  
}

//------------------------------------------------------------------------------
float SliceToDigit::findPedestal(const std::vector<short> & adcVec)
{
  // do nothing if there are no values in the vector
  if(adcVec.size() < 1) return 0.;

  // for now try taking the simple mean of the values in the 
  // vector and return that as the pedestal
  float mean = 0.;
  for(auto const& adc : adcVec) mean += adc;
  mean /= 1.*adcVec.size();

  return mean;
}

//------------------------------------------------------------------------------
void SliceToDigit::makeOpDetPulses(std::vector<CAENFragment>    const& caenFrags,
				      std::vector<raw::OpDetPulse>      & opDetPulse)
{
  // loop over the caenFrags
  uint32_t boardId        = 0;
  uint32_t triggerTimeTag = 0;

  for(auto const& caenFrag : caenFrags){

    boardId        = caenFrag.header.boardId;
    triggerTimeTag = caenFrag.header.triggerTimeTag;

    if(fOpticalDetChannels.count(boardId) > 0){

      // loop over the channels on this board connected to optical detectors
      for(auto ch : fOpticalDetChannels.find(boardId)->second){

	// check that the current channel, ch, is a valid one for grabbing a waveform
	if(ch > caenFrag.waveForms.size() )
	  throw cet::exception("SliceToDigit") << "requested channel, " << ch 
						  << " from board "        << boardId
						  << " is beyond the scope of the waveform vector";

	std::vector<short> waveForm(caenFrag.waveForms[ch].data.begin(), caenFrag.waveForms[ch].data.end());
   
	// LOG_VERBATIM("SliceToDigit") << "Writing opdetpulses " 
	// 			       << " boardID : " << boardId 
	// 			       << " channel " << ch 
	// 			       << " size of wvform data " << waveForm.size()
	// 			       << " fOpDetChID[boardId] size() " << fOpDetChID[boardId].size();

	opDetPulse.push_back(raw::OpDetPulse(static_cast <unsigned short> (ch),
					     waveForm,
					     0,
					     static_cast <unsigned int> (triggerTimeTag)
					     )
			     );

      } // end loop over channels on this board
    } // end if this board has optical channels on it
  } // end loop over fragments

  return;
}

//------------------------------------------------------------------------------
// boardId is the ID of the board we want to grab the digits from
// boardChans holds the channels on that board that we care about for this
// set of digits we want to make
// chanOffset is the value we subtract from the board channel so that the 
// digits have the right channel range for the desired auxiliary detector (ie 
// channel 0 of the muon range stack is not necessarily on channel 0 of the 
// caen board)
// detName is the name of the detector
void SliceToDigit::caenFragmentToAuxDetDigits(std::vector<CAENFragment>     const& caenFrags,
						 std::vector<raw::AuxDetDigit>      & auxDetDigits,
						 uint32_t                      const& boardId,
						 std::set<uint32_t>            const& boardChans,
						 uint32_t                      const& chanOffset,
						 std::string                   const& detName)
{
  // loop over the fragments and grab the one corresponding to this board ID
  for(auto const& frag : caenFrags){

    if(frag.header.boardId != boardId) continue;

    // loop over the channels in the set
    for( auto const& ch : boardChans){
      
      // check that ch is larger than chanOffset
      if(ch < chanOffset)
	throw cet::exception("SliceToDigit") << "requested channel, " << ch
						<< " is smaller than the requested offest "
						<< chanOffset;

      // check that there is a waveform for the chosen channel
      if(ch > frag.waveForms.size() )
	throw cet::exception("SliceToDigit") << "requested channel, " << ch 
						<< " from board "        << boardId
						<< " is beyond the scope of the waveform vector";
      
      std::vector<short> waveForm(frag.waveForms[ch].data.begin(), frag.waveForms[ch].data.end());
	
      // place the AuxDetDigit in the vector
      auxDetDigits.push_back(raw::AuxDetDigit(static_cast<unsigned short> (ch - chanOffset),
					      waveForm,
					      detName,
					      static_cast<unsigned long long>(frag.header.triggerTimeTag))
			     );

    } // end loop over channels on the board
  } // end loop over fragments
  
  return;
}

//------------------------------------------------------------------------------
void SliceToDigit::makeMuonRangeDigits(std::vector<CAENFragment>     const& caenFrags,
					  std::vector<raw::AuxDetDigit>      & mrAuxDigits)
{
  // The Muon Range Stack channels are all on the V1740 board in slot 7
  // The channels are 32 <= ch < 48
  uint32_t boardId = 7;
  uint32_t chanOff = 32;
  uint32_t maxChan = 48;
  std::set<uint32_t> boardChans;

  // Starting in run 6155 the MuRS channels were read out by boardID 24
  if(fRunNumber > 6154){
    boardId = 24;
    chanOff = 32;
    maxChan = 48;
  }

  for(uint32_t bc = chanOff; bc < maxChan; ++bc) boardChans.insert(bc);

  this->caenFragmentToAuxDetDigits(caenFrags, mrAuxDigits, boardId, boardChans, chanOff, "MuonRangeStack");

  return;
}

//------------------------------------------------------------------------------
void SliceToDigit::makeTOFDigits(std::vector<CAENFragment>     const& caenFrags,
				    std::vector<raw::AuxDetDigit>      & tofAuxDigits)
{
  // TOF inputs are all sent to board 8
  uint32_t boardId = 8;
  uint32_t chanOff = 0;
  std::set<uint32_t> boardChans;

  for(uint32_t bc = chanOff; bc < 2; ++bc) boardChans.insert(bc);
  this->caenFragmentToAuxDetDigits(caenFrags, tofAuxDigits, boardId, boardChans, chanOff, "TOFUS");
  
  boardChans.clear();
  chanOff = 2;
  for(uint32_t bc = chanOff; bc < 4; ++bc) boardChans.insert(bc);
  this->caenFragmentToAuxDetDigits(caenFrags, tofAuxDigits, boardId, boardChans, chanOff, "TOFDS");

  return;
}

//------------------------------------------------------------------------------
void SliceToDigit::makeAeroGelDigits(std::vector<CAENFragment>     const& caenFrags,
					std::vector<raw::AuxDetDigit>      & agAuxDigits)
{
  // Aerogel inputs are all sent to board 8
  uint32_t boardId = 8;
  uint32_t chanOff = 4;
  std::set<uint32_t> boardChans;

  // Call this for each AeroGel counter
  for(uint32_t bc = chanOff; bc < 6; ++bc) boardChans.insert(bc);
  this->caenFragmentToAuxDetDigits(caenFrags, agAuxDigits, boardId, boardChans, chanOff, "AeroGelUS");

  boardChans.clear();
  chanOff = 6;
  for(uint32_t bc = chanOff; bc < 8; ++bc) boardChans.insert(bc);
  this->caenFragmentToAuxDetDigits(caenFrags, agAuxDigits, boardId, boardChans, chanOff, "AeroGelDS");

  return;
}

//------------------------------------------------------------------------------
// Halo paddles are currently (Jun 4, 2015) attached to board 9, channels 5 and 6
void SliceToDigit::makeHaloDigits(std::vector<CAENFragment>     const& caenFrags,
				     std::vector<raw::AuxDetDigit>      & hAuxDigits)
{
  // Halo inputs are all sent to board 8
  uint32_t boardId = 9;
  uint32_t chanOff = 5;
  uint32_t maxChan = 7;
  std::set<uint32_t> boardChans;

  for(uint32_t bc = chanOff; bc < maxChan; ++bc) boardChans.insert(bc);
  this->caenFragmentToAuxDetDigits(caenFrags, hAuxDigits, boardId, boardChans, chanOff, "Halo");

  return;
}

//------------------------------------------------------------------------------
void SliceToDigit::makeTriggerDigits(std::vector<CAENFragment>     const& caenFrags,
					std::vector<raw::AuxDetDigit>      & trAuxDigits)
{
  // The trigger waveforms all come on board 7, channels 48-63
  uint32_t boardId = 7;
  uint32_t chanOff = 48;
  uint32_t maxChan = 64;
  std::set<uint32_t> boardChans;
  std::vector<std::string> trigNames;
  trigNames.push_back("WC1");
  trigNames.push_back("WC2");    
  trigNames.push_back("WC3");      
  trigNames.push_back("WC4");    
  trigNames.push_back("BEAMON"); 
  trigNames.push_back("USTOF");  
  trigNames.push_back("DSTOF");    
  trigNames.push_back("PUNCH");  
  trigNames.push_back("HALO");   
  trigNames.push_back("PULSER"); 
  trigNames.push_back("COSMICON"); 
  trigNames.push_back("COSMIC"); 
  trigNames.push_back("PILEUP"); 
  trigNames.push_back("MICHEL"); 
  trigNames.push_back("LARSCINT"); 
  trigNames.push_back("MuRS");

  // Starting in run 6155 the trigger channels were read out by boardID 24
  if(fRunNumber > 6154){
    boardId = 24;
    chanOff = 48;
    maxChan = 64;
  }

  // Call this for each AeroGel counter
  for(uint32_t tc = 0; tc < maxChan - chanOff; ++tc){
    boardChans.clear();
    boardChans.insert(chanOff + tc);
    this->caenFragmentToAuxDetDigits(caenFrags, trAuxDigits, boardId, boardChans, chanOff, trigNames[tc]);
  }

  return;
}

//------------------------------------------------------------------------------
// The map below indicates how each TDC maps to each Wire Chamber
// channel            wires
//   0   |-----------| 1
// TDC 3 |           |
//   63  |           |
//       |           | Wire Chamber 1
//   0   |           |
// TDC 4 |           |
//   63  |-----------| 128
//       TDC1     TDC2
//       0  63   0  63 channel
// wires 1         128

// channel            wires
//   0   |-----------| 1
// TDC 7 |           |
//   63  |           |
//       |           | Wire Chamber 2
//   0   |           |
// TDC 8 |           |
//   63  |-----------| 128
//       TDC5     TDC6
//       0  63   0  63 channel
// wires 1         128

// channel            wires
//   0   |-----------| 1
// TDC 11|           |
//   63  |           |
//       |           | Wire Chamber 3
//   0   |           |
// TDC 12|           |
//   63  |-----------| 128
//       TDC9     TDC10
//       0  63   0  63 channel
// wires 1         128

// channel            wires
//   0   |-----------| 1
// TDC 15|           |
//   63  |           |
//       |           | Wire Chamber 4
//   0   |           |
// TDC 16|           |
//   63  |-----------| 128
//       TDC13    TDC14
//       0  63   0  63 channel
// wires 1         128
//
// take the convention that vertical wire numbers start at channel 128
void SliceToDigit::InitializeMWPCContainers()
{
  this->CleanUpMWPCContainers();

  // make the map of TDC number to detector name and tdc to starting channel
  for(size_t tdc = 1; tdc < 17; ++tdc){
    if(tdc < 5)       fTDCToChamber[tdc] = 0;
    else if(tdc < 9)  fTDCToChamber[tdc] = 1;
    else if(tdc < 13) fTDCToChamber[tdc] = 2;
    else              fTDCToChamber[tdc] = 3;

    if     (tdc == 1 || tdc == 5 || tdc == 9  || tdc == 13) fTDCToStartWire[tdc] = 0;
    else if(tdc == 2 || tdc == 6 || tdc == 10 || tdc == 14) fTDCToStartWire[tdc] = 64;
    else if(tdc == 3 || tdc == 7 || tdc == 11 || tdc == 15) fTDCToStartWire[tdc] = 128;
    else if(tdc == 4 || tdc == 8 || tdc == 12 || tdc == 16) fTDCToStartWire[tdc] = 192;
  }

  // had swapped cables in runs 5546 - 5598 for TDC 7 and 8.
  if(fRunNumber > 5545 && fRunNumber < 5599){
    fTDCToStartWire[7] = 192;
    fTDCToStartWire[8] = 128;
  }

  fMWPCNames.resize(4);
  fMWPCNames[0] = "MWPC1";
  fMWPCNames[1] = "MWPC2";
  fMWPCNames[2] = "MWPC3";
  fMWPCNames[3] = "MWPC4";

  return;
}

//------------------------------------------------------------------------------
void SliceToDigit::CleanUpMWPCContainers()
{
  fMWPCNames           .clear();
  fTDCToStartWire      .clear();   
  fTDCToChamber        .clear();

  return;
}

//------------------------------------------------------------------------------
// set the name of the detector in the AuxDetDigit to be of the form
// MWPCXX where XX is the controller Number
void SliceToDigit::makeMWPCDigits(std::vector<TDCFragment::TdcEventData> const& tdcEventData,
				     std::vector<raw::AuxDetDigit>               & mwpcAuxDigits)
{

  size_t channelsPerChamber = TDCFragment::N_CHANNELS * TDCFragment::TDCS_PER_CHAMBER;

  // vector to hold the channels for a single MWPC
  std::vector<std::vector<short> > chamberHits(TDCFragment::MAX_CHAMBERS * channelsPerChamber);

  // vector to hold the timeStamps for each channel in the MWPC
  std::vector<unsigned long long> chamberTimeStamps(TDCFragment::MAX_CHAMBERS * channelsPerChamber, 0);

  // LOG_VERBATIM("SliceToDigit") << "there are " << tdcEventData.size() << " tdcEventData objects in the vector";

  for(auto const& tdced : tdcEventData){ 

    // determine the chamber and start wire
    auto switr = fTDCToStartWire.find(tdced.tdcEventHeader.tdcNumber);
    auto chitr = fTDCToChamber.find(tdced.tdcEventHeader.tdcNumber);

    if( chitr == fTDCToChamber.end() || switr == fTDCToStartWire.end() )
      throw cet::exception("SliceToDigit") << "TDC number " << tdced.tdcEventHeader.tdcNumber
					      << " is not present in map to chamber number or start wire";

    // LOG_VERBATIM("SliceToDigit") << "there are " << tdced.tdcHits.size() << " tdc hit objects in the vector for chamber "
    // 				    << chitr->second << " on tdc " << chitr->first << " start wire " << switr->second;
    
    for(auto const& hit : tdced.tdcHits){
      if(chitr->second >= TDCFragment::MAX_CHAMBERS || 
	 switr->second + (size_t)hit.channel >= channelsPerChamber
	 )
	throw cet::exception("SliceToDigit") << "Chamber is " << chitr->second << "/" << TDCFragment::MAX_CHAMBERS
						<< " hit channel is " << (size_t)hit.channel
						<< " first wire in tdc is " << switr->second << "/" 
						<< channelsPerChamber;

      chamberHits      [chitr->second * channelsPerChamber + switr->second + size_t (hit.channel)].push_back(hit.timeBin);
      chamberTimeStamps[chitr->second * channelsPerChamber + switr->second + size_t (hit.channel)] = tdced.tdcEventHeader.tdcTimeStamp;

      // LOG_VERBATIM("SliceToDigit") << chamberHits[chitr->second * channelsPerChamber + switr->second + size_t (hit.channel)].size() << " " 
      // 				      << (size_t)hit.channel << " " << switr->second << " " << (size_t)hit.timeBin << "\t" 
      // 				      << chamberTimeStamps[chitr->second * channelsPerChamber + switr->second + size_t (hit.channel)] << " " 
      // 				      << tdced.tdcEventHeader.tdcTimeStamp;
	
    }
      
  } // end loop over tdcEventData

  // now make the AuxDetDigits for this fragment
  for(size_t cham = 0; cham < TDCFragment::MAX_CHAMBERS; ++cham){
    for(size_t chan = 0; chan < channelsPerChamber; ++chan){

      if(chamberHits[cham*channelsPerChamber + chan].size() < 1) continue;
      
      mwpcAuxDigits.push_back(raw::AuxDetDigit(static_cast <unsigned short> (chan),
					       chamberHits[cham*channelsPerChamber + chan],
					       fMWPCNames[cham],
					       static_cast <unsigned long long> (chamberTimeStamps[cham*channelsPerChamber + chan]))
			      );

    }
    
  } // end loops to create AuxDetDigits

  return;
}

DEFINE_ART_MODULE(SliceToDigit)
