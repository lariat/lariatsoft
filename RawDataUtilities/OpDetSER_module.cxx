////////////////////////////////////////////////////////////////////////
// Class:       OpDetSER
// Module Type: analyzer
// File:        OpDetSER_module.cc
//
// Generated at Fri Mar  4 04:40:04 2016 by William Foreman using artmod
// from cetpkgsupport v1_08_06.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDAnalyzer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "art/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"
#include "LArIATRecoAlg/OpHitBuilderAlg.h"

class OpDetSER;

class OpDetSER : public art::EDAnalyzer {
public:
  explicit OpDetSER(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  OpDetSER(OpDetSER const &) = delete;
  OpDetSER(OpDetSER &&) = delete;
  OpDetSER & operator = (OpDetSER const &) = delete;
  OpDetSER & operator = (OpDetSER &&) = delete;

  // Required functions.
  void analyze(art::Event const & e) override;

  // Selected optional functions.
  void beginJob() override;
  void beginRun(art::Run const & r) override;
  void beginSubRun(art::SubRun const & sr) override;
  void endJob() override;
  void endRun(art::Run const & r) override;
  void endSubRun(art::SubRun const & sr) override;
  void reconfigure(fhicl::ParameterSet const & p) override;

private:

  // Tunable parameters defined by fcl
  std::string   fDAQModule;
  std::string   fInstanceName;
  float         fMvPerADC;
  bool          fAttemptFit;
  size_t        fBaselineWindowLength;
  float         fMean_set;
  float         fMean_lowerLim;
  float         fMean_upperLim;
  size_t        fT1;
  size_t        fT2;
  float         fPulseHitThreshHigh;
  float         fPulseHitRMSThresh;
  float         fGradientCut;
  size_t        fPostWindow;
  size_t        fPreWindow;

};


OpDetSER::OpDetSER(fhicl::ParameterSet const & p)
  :
  EDAnalyzer(p)  // ,
 // More initializers here.
{
  
  // Configures the ROOT histograms
  this->reconfigure(p);
  
    
}

void OpDetSER::analyze(art::Event const & e)
{
  // Implementation of required member function here.
}

void OpDetSER::beginJob()
{
  // Implementation of optional member function here.
}

void OpDetSER::beginRun(art::Run const & r)
{
  // Implementation of optional member function here.
}

void OpDetSER::beginSubRun(art::SubRun const & sr)
{
  // Implementation of optional member function here.
}

void OpDetSER::endJob()
{
  // Implementation of optional member function here.
}

void OpDetSER::endRun(art::Run const & r)
{
  // Implementation of optional member function here.
}

void OpDetSER::endSubRun(art::SubRun const & sr)
{
  // Implementation of optional member function here.
}

void OpDetSER::reconfigure(fhicl::ParameterSet const & p)
{
  fDAQModule              = p.get< std::string >  ("DAQModule","daq");
  fInstanceName           = p.get< std::string >  ("InstanceName","");
  fBaselineWindowLength   = p.get< size_t >       ("BaselineWindowLength",1000);
  fMean_set               = p.get< float >        ("Mean_set",50);
  fMean_lowerLim          = p.get< float >        ("Mean_lowerLim",30);
  fMean_upperLim          = p.get< float >        ("Mean_upperLim",80);
  fAttemptFit             = p.get< bool >         ("AttemptFit","true");
  fT1                     = p.get< size_t >       ("fT1",1000);
  fT2                     = p.get< size_t >       ("fT2",19000);
  fPulseHitThreshHigh     = p.get< float >        ("PulseHitThresh_high",10);
  fPulseHitRMSThresh      = p.get< float >        ("PulseHitRMSThresh",3.);
  fGradientCut            = p.get< float >        ("GradientCut",-4);
  fPreWindow              = p.get< size_t >       ("PreWindow",5);
  fPostWindow             = p.get< size_t >       ("PostWindow",45);
  fMvPerADC               = p.get< float >        ("MvPerADC",0.2);

}

DEFINE_ART_MODULE(OpDetSER)
