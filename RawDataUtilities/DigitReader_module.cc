////////////////////////////////////////////////////////////////////////
// Class:       DigitReader
// Module Type: analyzer
// File:        DigitReader_module.cc
//
// Generated at Tue Feb 10 15:40:09 2015 by Will Flanagan using artmod
// from cetpkgsupport v1_08_02.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDAnalyzer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "art/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"

#include "RawData/AuxDetDigit.h"

#include <memory>
#include <iostream>
#include <vector>

class DigitReader;

class DigitReader : public art::EDAnalyzer {
public:
  explicit DigitReader(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  DigitReader(DigitReader const &) = delete;
  DigitReader(DigitReader &&) = delete;
  DigitReader & operator = (DigitReader const &) = delete;
  DigitReader & operator = (DigitReader &&) = delete;

  // Required functions.
  void analyze(art::Event const & e) override;


private:

  // Declare member data here.

};


DigitReader::DigitReader(fhicl::ParameterSet const & p)
  :
  EDAnalyzer(p)  // ,
 // More initializers here.
{}

void DigitReader::analyze(art::Event const & e)
{

  std::cout<<"e.event(): "<<e.event()<<std::endl;

  art::Handle< std::vector<raw::AuxDetDigit> > digitVecHandle;
  e.getByLabel("FragmentToDigit", "caen1751dstof1", digitVecHandle);
  std::cout << "digitVecHandle Size is: " << digitVecHandle->size() << std::endl;

  art::Handle< std::vector<raw::AuxDetDigit> > digitVecHandleDummy;
  e.getByLabel("FragmentToDigit","a", digitVecHandleDummy);
  std::cout << "digitVecHandleDummy Size is: " << digitVecHandleDummy->size() << std::endl;

  for(size_t dummyIter = 0; dummyIter < digitVecHandleDummy->size(); ++dummyIter){ // ++ move

    art::Ptr<raw::AuxDetDigit> dummydigitVec(digitVecHandleDummy, dummyIter);
    std::cout << "dummydigitVec->NADC(): " << dummydigitVec->NADC() << std::endl;
    std::cout << "dummydigitVec->Channel(): " << dummydigitVec->Channel() << std::endl;
    std::cout << "dummydigitVec->AuxDetName(): " << dummydigitVec->AuxDetName() << std::endl;
  }

}

DEFINE_ART_MODULE(DigitReader)
