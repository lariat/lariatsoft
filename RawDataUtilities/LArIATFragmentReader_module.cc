////////////////////////////////////////////////////////////////////////
// Class:       LArIATFragmentReader
// Module Type: analyzer
// File:        LArIATFragmentReader_module.cc
//
// Generated at Tue Oct 28 14:15:01 2014 by Brian_Rebel using artmod
// from cetpkgsupport v1_07_01.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDAnalyzer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "art/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"
#include "art/Framework/Services/Registry/ServiceHandle.h"
#include "art/Framework/Services/Optional/TFileService.h"
#include "art/Framework/Services/Optional/TFileDirectory.h"

#include "artdaq-core/Data/Fragment.hh"

#include "LariatFragment.h"
#include "WUTFragment.h"
#include "CAENFragment.h"
#include "TDCFragment.h"

#include "TTree.h"

#include <vector>
#include <string>

namespace rdu {
  class LArIATFragmentReader;

  typedef struct{

    uint16_t wut_spill;
    uint16_t wut_fragment_id;
    uint32_t time_header;  // Each count in the time header is 16 us
    std::vector<uint16_t> hit_channel;
    std::vector<uint32_t> hit_time_bin;
    std::vector<uint64_t> hit_time;
  } WUTData;

  typedef struct{

    uint16_t caen_spill;
    uint16_t caen_fragment_id;
    uint32_t trigger_time_tag;  // Each count in the trigger time tag is 8 ns
    std::vector<uint16_t> ustof1_logic;
    std::vector<uint16_t> ustof2_logic;
    std::vector<uint16_t> ustof3_logic;
    std::vector<uint16_t> ustof4_logic;
    std::vector<uint16_t> dstof1_logic;
    std::vector<uint16_t> dstof2_logic;
  } CAENData;
}


class rdu::LArIATFragmentReader : public art::EDAnalyzer {
public:
  explicit LArIATFragmentReader(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  LArIATFragmentReader(LArIATFragmentReader const &) = delete;
  LArIATFragmentReader(LArIATFragmentReader &&) = delete;
  LArIATFragmentReader & operator = (LArIATFragmentReader const &) = delete;
  LArIATFragmentReader & operator = (LArIATFragmentReader &&) = delete;

  // Required functions.
  void analyze(art::Event const & e) override;

  // Selected optional functions.
  void beginJob() override;
  void reconfigure(fhicl::ParameterSet const & p) override;

private:

  void FillCAENInfo(LariatFragment const& lariatFrag);
  void FillWUTInfo (LariatFragment const& lariatFrag);

  TTree *               fCaenDataTree;        ///< Tree holding the data from the various fragments 
  TTree *               fWutDataTree;         ///< Tree holding the data from the various fragments 
  CAENData              fCAEN;    	          ///< data from CAEN V1751				 
  WUTData    	        fWUT;      	          ///< data from WUT				       	 
  std::vector<CAENData> fCAENs;               ///< collection of all CAEN fragments
  std::vector<WUTData>  fWUTs;                ///< collection of all CAEN fragments
  std::string           fRawFragmentLabel;    ///< label for module producing artdaq fragments
  std::string  		    fRawFragmentInstance; ///< instance label for artdaq fragments        
  uint16_t              fSpill;               ///< Spill number
};


//------------------------------------------------------------------------------
rdu::LArIATFragmentReader::LArIATFragmentReader(fhicl::ParameterSet const & p)
  : EDAnalyzer(p)
{
  this->reconfigure(p);
}

//------------------------------------------------------------------------------
void rdu::LArIATFragmentReader::reconfigure(fhicl::ParameterSet const & p)
{
  fRawFragmentLabel    = p.get< std::string >("RawFragmentLabel", "daq");
  fRawFragmentInstance = p.get< std::string >("RawFragmentInstance", "SPILL");
}

//------------------------------------------------------------------------------
void rdu::LArIATFragmentReader::beginJob()
{
  art::ServiceHandle<art::TFileService> tfs;

  //fWutDataTree = tfs->make<TTree>("WutData", "WutData");
  fWutDataTree = tfs->make<TTree>("wut", "wut");
  fWutDataTree->Branch("spill",                 &fWUT.wut_spill);
  fWutDataTree->Branch("fragment_id",           &fWUT.wut_fragment_id);
  fWutDataTree->Branch("wut_time_header",       &fWUT.time_header);
  fWutDataTree->Branch("wut_hit_channel",       &fWUT.hit_channel);
  fWutDataTree->Branch("wut_hit_time_bin",      &fWUT.hit_time_bin);
  fWutDataTree->Branch("wut_hit_time",          &fWUT.hit_time);

  //fCaenDataTree = tfs->make<TTree>("CaenData", "CaenData");
  fCaenDataTree = tfs->make<TTree>("caen", "caen");
  fCaenDataTree->Branch("spill",                 &fCAEN.caen_spill);
  fCaenDataTree->Branch("fragment_id",           &fCAEN.caen_fragment_id);
  fCaenDataTree->Branch("caen_trigger_time_tag", &fCAEN.trigger_time_tag);
  fCaenDataTree->Branch("caen_ustof1_logic",     &fCAEN.ustof1_logic);
  fCaenDataTree->Branch("caen_ustof2_logic",     &fCAEN.ustof2_logic);
  fCaenDataTree->Branch("caen_ustof3_logic",     &fCAEN.ustof3_logic);
  fCaenDataTree->Branch("caen_ustof4_logic",     &fCAEN.ustof4_logic);
  fCaenDataTree->Branch("caen_dstof1_logic",     &fCAEN.dstof1_logic);
  fCaenDataTree->Branch("caen_dstof2_logic",     &fCAEN.dstof2_logic);

  return;
}

//------------------------------------------------------------------------------
void rdu::LArIATFragmentReader::analyze(art::Event const & evt)
{
  art::Handle< std::vector<artdaq::Fragment> > fragments;
  evt.getByLabel(fRawFragmentLabel, fRawFragmentInstance, fragments);

  if( !fragments.isValid() )
    throw cet::exception("LARIATFragementReader") << "artdaq::Fragment handle is not valid, bail";
  if( fragments->size() != 1 )
    throw cet::exception("LARIATFragementReader") << "artdaq::Fragment handle contains more than one fragment, bail";

  fSpill = (uint16_t) evt.id().event();

  // get the fragments we are interested in
  const auto& frag((*fragments)[0]);

  char const* bytePtr = reinterpret_cast<char const*> (&*frag.dataBegin());

  LariatFragment lariatFrag((char *)bytePtr, frag.dataSize() * sizeof(unsigned long long));

  this->FillWUTInfo(lariatFrag);

  this->FillCAENInfo(lariatFrag);

  std::cout << "Run " << evt.run() << ", subrun " << evt.subRun()
            << ", spill " << fSpill << std::endl;

  for(size_t s = 0; s < fCAENs.size(); ++s){
    fCAEN = fCAENs[s];
    fCaenDataTree->Fill();
  }

  for(size_t s = 0; s < fWUTs.size(); ++s){
    fWUT  = fWUTs[s];
    fWutDataTree->Fill();
  }

  std::cout << "////////////////////////////////////////" << std::endl;
  std::cout << "Dumping TDC controller fragments" << std::endl;
  std::cout << "////////////////////////////////////////" << std::endl;
  for (size_t s = 0; s < lariatFrag.tdcFrags.size(); ++s) {
    lariatFrag.tdcFrags[s].print();
  }

  return;  
}

//------------------------------------------------------------------------------
void rdu::LArIATFragmentReader::FillCAENInfo(LariatFragment const& lariatFrag)
{
  
  const size_t numberCaenFrags = lariatFrag.caenFrags.size();
  LOG_VERBATIM("LArIATFragmentReader") << "Found " << numberCaenFrags << " CAEN fragments";

  LOG_VERBATIM("LArIATFragmentReader") << "Looking at CAEN fragments...";

  fCAENs.clear();
  CAENData data;
  for (size_t i = 0; i < numberCaenFrags; ++i) {
    CAENFragment const& frag = lariatFrag.caenFrags[i];

    if (frag.header.boardId == 8) {

      data.caen_spill = fSpill;
      data.caen_fragment_id = (uint16_t) i;
      data.trigger_time_tag = frag.header.triggerTimeTag;

      LOG_VERBATIM("LArIATFragmentReader") << "///////////////////////////////////////"
                << "\nFragment number: " << i
                << "\n///////////////////////////////////////"
                << "\nBoard ID: " << frag.header.boardId
                << "\nNumber of samples: " << frag.header.nSamples;
      data.ustof1_logic.clear();
      data.ustof2_logic.clear();
      data.ustof3_logic.clear();
      data.ustof4_logic.clear();
      data.dstof1_logic.clear();
      data.dstof2_logic.clear();

      for (size_t time = 0; time < frag.header.nSamples; ++time) {
      	data.ustof1_logic.push_back(frag.waveForms[2].data[time]);
      	data.ustof2_logic.push_back(frag.waveForms[3].data[time]);
      	data.ustof3_logic.push_back(frag.waveForms[4].data[time]);
      	data.ustof4_logic.push_back(frag.waveForms[5].data[time]);
      	data.dstof1_logic.push_back(frag.waveForms[6].data[time]);
      	data.dstof2_logic.push_back(frag.waveForms[7].data[time]);
      }

      fCAENs.push_back(data);

    } // end if board ID is 8

  } // end loop over fragment pointers

  return;
}

//------------------------------------------------------------------------------
void rdu::LArIATFragmentReader::FillWUTInfo(LariatFragment const& lariatFrag)
{

  const size_t numberWutFrags = lariatFrag.wutFrags.size();
  LOG_VERBATIM("LArIATFragmentReader") << "Found " << numberWutFrags << " WUT fragments";

  fWUTs.clear();
  WUTData data;

  for (size_t i = 0; i < numberWutFrags; ++i) {
    WUTFragment const& frag = lariatFrag.wutFrags[i];

    size_t numberHits = frag.header.nHits;

    LOG_VERBATIM("LArIATFragmentReader") << "  WUT fragment ID: " << i 
					 << "\n  Number of WUT hits: " << numberHits;

    data.hit_channel.clear();
    data.hit_time_bin.clear();
    data.hit_time.clear();

    data.wut_spill = fSpill;
    data.wut_fragment_id = (uint16_t) i;
    data.time_header = frag.header.timeHeader;

    for (size_t j = 0; j < numberHits; ++j) {
      WUTFragment::WutHit const& hit = frag.hits[j];

      // hit time since beginning of spill
      uint64_t hitTime = ((uint64_t) data.time_header << 20) | ((uint64_t) hit.timeBin);

      data.hit_channel.push_back((uint16_t) hit.channel);
      data.hit_time_bin.push_back(hit.timeBin);
      data.hit_time.push_back(hitTime);

      LOG_VERBATIM("LArIATFragmentReader") << "    Hit ID: " << j
					   << "\n   Channel: " << (uint16_t) hit.channel
					   << "\n  Time bin: " << hit.timeBin 
					   << "\n  Time since BOS: " << hitTime
					   << "\n  Time since BOS (s): " << hitTime * 15.625e-12 ;

    } // end loop over WUT hits

    fWUTs.push_back(data);
  } // end loop over WUT fragment pointers

  return;
}

DEFINE_ART_MODULE(rdu::LArIATFragmentReader)
