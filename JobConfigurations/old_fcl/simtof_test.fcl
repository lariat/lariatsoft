#include "FragmentToDigit_config.fcl"
#include "services_lariat.fcl"
#include "RawDataUtilities_algs.fcl"
#include "caldata_lariat.fcl"
#include "hitfindermodules_lariat.fcl"
#include "lariatclustermodules.fcl"
#include "trackfindermodules.fcl"
#include "calorimetry_lariat.fcl"
#include "particleid.fcl"
#include "showerreco3d.fcl"
#include "showerquality.fcl"
#include "lariat_reco_algs.fcl"
#include "lariatbeamlinereco.fcl"
#include "services_lariat.fcl"
#include "lariatcheckmodules.fcl"
#include "triggeralgo_service.fcl"
#include "lariatanamodules.fcl"
#include "cluster_lariat.fcl"
#include "showerfindermodules.fcl"
 
process_name: Reco2D

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "anaTree_histo.root" }
  TimeTracker:       {}
  MemoryTracker:     {}
  RandomNumberGenerator: {} #ART native random number generator
  #message:      @local::lariat_message_services
  @table::lariat_services
  #              @table::lariat_simulation_services
}
#services.DatabaseUtil.ShouldConnect: false
services.scheduler.SkipEvent: [ ProductNotFound ]
#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  -1        # Number of events to create
}



# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {

  ### beamline elements ###
  
  tof:         @local::lariat_tof
 }
 analyzers:
{

}



 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 reco: [tof ]
	  
 ana: [  ]

 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [reco] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   #fileName:    "%ifb_%tc_reco2D.root"
   fileName:    "%ifb_Reco2d.root"
   dataTier:    "reconstructed-2d"
   compressionLevel: 1
 }
}


#services.message.destinations :
#{
#  STDCOUT:
#  {
#     type:      "cout"      #tells the message service to output this destination to cout
#     threshold: "WARNING"   #tells the message service that this destination applies to WARNING and higher level messages
#     append:     true       #says to append all messages to the output
#     categories:
#     {
#       ChannelFilter:
#       {
#         limit: 0
#         reportEvery: 0
#       }
#       TrackStitcher:
#       {
#         limit: 0
#         reportEvery: 0
#       }
#       CRHitRemoval:
#       {
#         limit: 0
#         reportEvery: 0
#       }
#       default:
#       {
#         limit: -1  #don't print anything at the infomsg level except the explicitly named categories
#         reportEvery: 1
#       }
#     }
#  }
#}
