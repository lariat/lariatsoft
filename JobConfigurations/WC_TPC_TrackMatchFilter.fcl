#include "FragmentToDigit_config.fcl"
#include "services_lariat.fcl"
#include "triggeralgo_service.fcl"
#include "lariatfiltermodules.fcl"

## You will write whatever name you want this process to be called 
## It is important to note that the same process name cannot be called
## twice on a ROOT file, so you may have to change this 
process_name: WCTPCFilter


services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "WCTPCTrkfilter_hist.root" }
  #Timing:       {}
  #SimpleMemoryCheck:     { ignoreTotal: 1 } # default is one
  RandomNumberGenerator: {} #ART native random number generator
  #message:      @local::lariat_message_services
  @table::lariat_services
  #user:         @local::lariat_simulation_services
}
#services.user.DatabaseUtil.ShouldConnect: false


#This defines the input to your fcl file
#You can start by reading in a ROOT file
#Setting maxEvents = -1 will loop over all events in the file
source:
{
  module_type: RootInput
  maxEvents:  -1        # Number of events to create
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{
 
 ### Here you will define any producer modules you want to run ###
 producers:
 {
  ### random number saver
  #rns:                 { module_type: RandomNumberSaver }

 }
 
 ### Here you will define any analyzer modules you want to run ###
 analyzers:
 {

 
 }
 
 ### Here you will define any filter modules you want to run ###
 filters:
 {
 WCTPCtrkFilt:	@local::lariat_wctotpcmatchfilter
 
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 
 reco: [  ]
 
 ana:[ ]
 
 filt:[ WCTPCtrkFilt ]

 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [filt,reco] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [ana, stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   SelectEvents: {SelectEvents:[filt]}
   fileName:    "WCTPCTrkFilter.root"
   dataTier:    "reconstructed-2d"
   compressionLevel: 1
   fastCloning: false
 }
}


### Here, we overwrite ALL module labels with the ones defined above.
##############################################
# See LArIATFilters/lariatfiltersmodule.fcl  #
#      for definition of variables           #
##############################################
#physics.filters.WCTPCtrkFilt.TrackModuleLabel: 	"pmtrack"
#physics.filters.WCTPCtrkFilt.WCTrackLabel: 	"wctrack"
#physics.filters.WCTPCtrkFilt.alpha: 		20
#physics.filters.WCTPCtrkFilt.DeltaXLow:		-2.0
#physics.filters.WCTPCtrkFilt.DeltaXHigh:	6.0
#physics.filters.WCTPCtrkFilt.DeltaYLow:		-3.0
#physics.filters.WCTPCtrkFilt.DeltaYHigh:	6.0
#physics.filters.WCTPCtrkFilt.MaxZPos:		14.0
#physics.filters.WCTPCtrkFilt.MaxMatchedTracks:	5
