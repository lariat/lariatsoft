#include "filters.fcl"
#include "services_lariat.fcl"

process_name: EvtFilter

services:
{
  RandomNumberGenerator: {} 
  @table::lariat_services
}

# Source
source:
{
  module_type: RootInput
}

# Output block
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "%ifb_evtsel_%#.root"
   SelectEvents:[reco]
   fastCloning: true
   dataTier: "reconstructed"
 }
}

# Physics block
physics:
{
  filters:
  {
    evtfilter:  @local::evtfilter
  }
 
  #define the producer and filter modules for this path, order matters, 
  reco: [ evtfilter ] 

  # define the output stream, there could be more than one if using filters 
  stream1:  [ out1 ]
 
  #trigger_paths is a keyword and contains the paths that modify the art::event, 
  #ie filters and producers
  trigger_paths: [ reco ] 
 
  #end_paths is a keyword and contains the paths that do not modify the art::Event, 
  #ie analyzers and output streams.  these all run simultaneously
  end_paths:     [ stream1 ]  
}

physics.filters.evtfilter.EventList: "events.tsv"
physics.filters.evtfilter.Selection: 1

outputs.out1.fileName: "%ifb_evtsel_%#.root"
outputs.out1.fileProperties.maxEvents: 20

