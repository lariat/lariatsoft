#include "services_lariat.fcl"
#include "lariat_reco_algs.fcl"
#include "lariatbeamlinereco.fcl"
#include "lariatfiltermodules.fcl"

process_name: TimestampFilter

services:
{
  TFileService: { fileName: "hist_tfilt.root" }
  TimeTracker: { }
  @table::lariat_services
}

services.scheduler.SkipEvent: [ ProductNotFound ]

source:
{
  module_type: RootInput
  maxEvents:  -1        # Number of events to create
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{
  filters:
  {
    tfilt: @local::lariat_timestampfilter
  }


  #define the producer and filter modules for this path, order matters, 
  #filters reject all following items.  see lines starting physics.producers below
  filt: [ tfilt ]
  ana: [ ]

  #define the output stream, there could be more than one if using filters 
  stream1:  [ out1 ]

  #trigger_paths is a keyword and contains the paths that modify the art::event, 
  #ie filters and producers
  trigger_paths: [ filt ] 

  #end_paths is a keyword and contains the paths that do not modify the art::Event, 
  #ie analyzers and output streams.  these all run simultaneously
  end_paths:     [ stream1 ]
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
  out1:
  {
    module_type: RootOutput
    fileName:    "%ifb_%p_%tc.root"
    dataTier:    "reconstructed"
    compressionLevel: 1
    SelectEvents: [filt]
  }
}

#============================================
# DataSelection can be set to "pedestal", "beam", or "cosmic"
# Leave blank ("") to use T1 and T2 instead.
physics.filters.tfilt.DataSelection:    "beam" 
physics.filters.tfilt.RequireRawDigits:  true

