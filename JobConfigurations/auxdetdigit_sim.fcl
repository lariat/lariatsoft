#include "services_lariat.fcl"
#include "largeantmodules_lariat.fcl"
#include "detsimmodules_lariat.fcl"

process_name: TOFAuxDet

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "TOF_simdigits_histo.root" }
  RandomNumberGenerator: {} #ART native random number generator
  #user:         @local::lariat_simulation_services
  @table::lariat_services

}


#Start each new event with an empty event.
source:
{
  module_type: RootInput
  maxEvents:   -1          # Number of events to create
  
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   
   daq:    @local::lariat_tofsim  	  
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 reco: [ daq ] 
 
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [reco] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "TOF_simdigits.root" #default file name, can override from command line with -o or --output
   dataTier: "reconstructed-2d"
   compressionLevel: 1
 }
}



