////////////////////////////////////////////////////////////////////////
// Class:       SimLArIATDigits
// Module Type: producer
// File:        SimLArIATDigits_module.cc
//
// Generated at Tue May 31 13:53:13 2016 by Greg Pulliam using artmod
// from cetpkgsupport v1_08_06.
////////////////////////////////////////////////////////////////////////
#include <vector>
#include <string>
#include <algorithm>
#include <sstream>
#include <fstream>
#include <bitset>
#include <iostream>
extern "C" {
#include <sys/types.h>
#include <sys/stat.h>
}
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Core/EDProducer.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Services/Registry/ServiceHandle.h"
#include "art/Framework/Services/Optional/TFileService.h"
#include "art/Framework/Services/Optional/TFileDirectory.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"
#include "Utilities/LArFFT.h"
#include "RawData/RawDigit.h"
#include "RawData/raw.h"
#include "RawData/TriggerData.h"
#include "RawData/AuxDetDigit.h"
#include "Utilities/LArProperties.h"
#include "Utilities/TimeService.h"
#include "Utilities/SignalShapingServiceT1034.h"
#include "Geometry/Geometry.h"
#include "Simulation/sim.h"
#include "Simulation/SimChannel.h"
#include "Simulation/AuxDetSimChannel.h"
#include "Utilities/DetectorProperties.h"
#include "TMath.h"
#include "TComplex.h"
#include "TString.h"
#include "TH2.h"
#include "TH1D.h"
#include "TFile.h"
#include "TRandom.h"
#include "CLHEP/Random/RandFlat.h"
#include "CLHEP/Random/RandGaussQ.h"

class SimLArIATDigits;

class SimLArIATDigits : public art::EDProducer {
public:
  explicit SimLArIATDigits(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  SimLArIATDigits(SimLArIATDigits const &) = delete;
  SimLArIATDigits(SimLArIATDigits &&) = delete;
  SimLArIATDigits & operator = (SimLArIATDigits const &) = delete;
  SimLArIATDigits & operator = (SimLArIATDigits &&) = delete;

  // Required functions.
  void produce(art::Event & e) override;

  // Selected optional functions.
  void beginJob() override;
  void beginRun(art::Run & r) override;
  void beginSubRun(art::SubRun & sr) override;
  void endJob() override;
  void endRun(art::Run & r) override;
  void endSubRun(art::SubRun & sr) override;
  void reconfigure(fhicl::ParameterSet const & p) override;
  void respondToCloseInputFile(art::FileBlock const & fb) override;
  void respondToCloseOutputFiles(art::FileBlock const & fb) override;
  void respondToOpenInputFile(art::FileBlock const & fb) override;
  void respondToOpenOutputFiles(art::FileBlock const & fb) override;

private:
 // Declare member data here.
  //std::vector<raw::AuxDetDigit> const& MakeWCDigits(art::Event & evt);  
  std::string fG4ModuleLabel; 
  int numSimChannels;  //Number of Aux Dets we have
  int numIDEs;  //
  //TTree* fTree;
};


SimLArIATDigits::SimLArIATDigits(fhicl::ParameterSet const & p)
// :
// Initialize member data here.
{
  // Call appropriate produces<>() functions here.
  this->reconfigure(pset);
}

void SimLArIATDigits::produce(art::Event & e)
{
  // Implementation of required member function here.
  std::vector<const sim::AuxDetSimChannel*> AuxDetCollection;
  e.getView(fG4ModuleLabel, AuxDetCollection);
  numSimChannels=AuxDetCollection.size();
  for(size_t auxiter=0; auxiter<numSimChannels; ++auxiter){
    std::vector<sim::AuxDetIDE> SimIDE=AuxDetCollection[auxiter]->AuxDetIDEs();
    numIDEs=SimIDE.size();  
    std::cout<<"For AuxDetID: "<<auxiter<<", there are "<<numIDEs<<" IDEs."<<std::endl;
  }
  
}

void SimLArIATDigits::beginJob()
{
  // Implementation of optional member function here.
}

void SimLArIATDigits::beginRun(art::Run & r)
{
  // Implementation of optional member function here.
}

void SimLArIATDigits::beginSubRun(art::SubRun & sr)
{
  // Implementation of optional member function here.
}

void SimLArIATDigits::endJob()
{
  // Implementation of optional member function here.
}

void SimLArIATDigits::endRun(art::Run & r)
{
  // Implementation of optional member function here.
}

void SimLArIATDigits::endSubRun(art::SubRun & sr)
{
  // Implementation of optional member function here.
}

void SimLArIATDigits::reconfigure(fhicl::ParameterSet const & p)
{
  // Implementation of optional member function here.
  fG4ModuleLabel = pset.get<std::string>("G4ModuleLabel");
}

void SimLArIATDigits::respondToCloseInputFile(art::FileBlock const & fb)
{
  // Implementation of optional member function here.
}

void SimLArIATDigits::respondToCloseOutputFiles(art::FileBlock const & fb)
{
  // Implementation of optional member function here.
}

void SimLArIATDigits::respondToOpenInputFile(art::FileBlock const & fb)
{
  // Implementation of optional member function here.
}

void SimLArIATDigits::respondToOpenOutputFiles(art::FileBlock const & fb)
{
  // Implementation of optional member function here.
}

DEFINE_ART_MODULE(SimLArIATDigits)
