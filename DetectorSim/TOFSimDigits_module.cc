////////////////////////////////////////////////////////////////////////
// Class:       TOFSimDigits
// Module Type: producer
// File:        TOFSimDigits_module.cc
//
// Generated at Wed Jul 20 14:54:59 2016 by Lucas Mendes Santos using artmod
// from cetpkgsupport v1_10_01.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDProducer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "art/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"

//LArSoft libraries

#include "lardata/Utilities/LArFFT.h"
#include "lardata/RawData/RawDigit.h"
#include "lardata/RawData/AuxDetDigit.h"
#include "lardata/RawData/raw.h"
#include "lardata/RawData/TriggerData.h"
#include "RawDataUtilities/FragmentToDigitAlg.h"
#include "lardata/DetectorInfoServices/LArPropertiesService.h"
#include "lardata/DetectorInfoServices/DetectorClocksService.h"
#include "lardata/DetectorInfoServices/DetectorClocksServiceStandard.h" // special (see below)
#include "Utilities/SignalShapingServiceT1034.h"
#include "larcore/Geometry/Geometry.h"
#include "larcore/Geometry/AuxDetGeo.h"
#include "larcore/Geometry/AuxDetGeometry.h"
#include "larsim/Simulation/sim.h"
#include "larsim/Simulation/SimChannel.h"
#include "larsim/Simulation/AuxDetSimChannel.h"
#include "SimulationBase/MCParticle.h"
#include "lardata/DetectorInfoServices/DetectorPropertiesService.h"

#include "TF1.h"


#include <memory>

class TOFSimDigits;

class TOFSimDigits : public art::EDProducer {
public:
  explicit TOFSimDigits(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  TOFSimDigits(TOFSimDigits const &) = delete;
  TOFSimDigits(TOFSimDigits &&) = delete;
  TOFSimDigits & operator = (TOFSimDigits const &) = delete;
  TOFSimDigits & operator = (TOFSimDigits &&) = delete;
  void  reconfigure(fhicl::ParameterSet const & p) override;

  // Required functions.
  void produce(art::Event & e) override;
  std::string fG4ModuleLabel;

private:

  // Declare member data here.

};

void TOFSimDigits::reconfigure(fhicl::ParameterSet const & p)
{
  // Implementation of optional member function here.
  
  fG4ModuleLabel = p.get<std::string>("G4ModuleLabel");
}


TOFSimDigits::TOFSimDigits(fhicl::ParameterSet const & p)
// :
// Initialize member data here.
{
  // Call appropriate produces<>() functions here.
  this->reconfigure(p);
  produces< std::vector<raw::AuxDetDigit>   >();
}

void TOFSimDigits::produce(art::Event & e)
{
  // Implementation of required member function here.

  art::Handle< std::vector<sim::AuxDetSimChannel> > AuxDetHandle;
  //std::vector<sim::AuxDetSimChannel*> AuxDetCollection;
  e.getByLabel(fG4ModuleLabel, AuxDetHandle);
  std::unique_ptr< std::vector<raw::AuxDetDigit>> tofdigits(new std::vector<raw::AuxDetDigit>);
  int numSimChannels=AuxDetHandle->size();
  std::cout<<"numSimChannel: "<<numSimChannels<<std::endl;
 // int iter=0;
  int ID;

//  double energy;
  std::string detName;
  short channel;

  //Generating a example waveform
  std::vector <short> fadc;
  TF1 *wvsim = new TF1("wvsim", "[0] -[1]*TMath::Landau(x,[2],[3])",0,28672);
  double param[4] = {560.413, 2824.51, 8461.98,2.1};
  wvsim->SetParameters(param);

  std::vector <short> fadc2;
  TF1 *wvsim2 = new TF1("wvsim2", "[0] -[1]*TMath::Landau(x,[2],[3])",0,28672);
  double param2[4] = {558.763, 897.573, 8502.03, 2.50247};
  wvsim2->SetParameters(param2);

  for(int i = 0; i < 28672; i++){fadc.push_back((short)wvsim->Eval(i)); fadc2.push_back((short)wvsim2->Eval(i));}

  // for(size_t i=0; i<numSimChannels; ++i){
   for(std::vector<sim::AuxDetSimChannel>::const_iterator auxiter = AuxDetHandle->begin(); auxiter!=AuxDetHandle->end(); ++auxiter){
     const sim::AuxDetSimChannel & aux = *auxiter;
     
     ID=aux.AuxDetID();
     art::ServiceHandle<geo::Geometry> adGeoServ;
     std::vector<sim::AuxDetIDE> SimIDE=aux.AuxDetIDEs();
     if(ID == 0 || ID == 6){std::cout<<" Found a TOF!! "<<std::endl;
     switch(ID)
     {
       case 0:
	detName = "USTOF";
	channel = 5;
	std::cout<<"USTOF"<<std::endl;
        tofdigits->push_back(raw::AuxDetDigit(channel, fadc, detName,0));
	tofdigits->push_back(raw::AuxDetDigit(channel, fadc, detName,0));		
        break;
       case 6:
	detName = "DSTOF";
	std::cout<<"DSTOF"<<std::endl;
	channel = 6;
        tofdigits->push_back(raw::AuxDetDigit(channel, fadc2, detName,0));
	tofdigits->push_back(raw::AuxDetDigit(channel, fadc2, detName,0));				
        break;
     }

     }
   }  
   e.put(std::move(tofdigits));  
}

DEFINE_ART_MODULE(TOFSimDigits)
