#include "services_lariat.fcl"
#include "caldata_lariat.fcl"
#include "hitfindermodules.fcl"
#include "lariatclustermodules.fcl"
#include "trackfindermodules.fcl"
#include "calorimetry_lariat.fcl"
#include "particleid.fcl"
#include "showerreco3d.fcl"
#include "showerquality.fcl"
#include "lariat_reco_algs.fcl"
#include "lariatbeamlinereco.fcl"
#include "services_lariat.fcl"
#include "lariatcheckmodules.fcl"
#include "triggeralgo_service.fcl"
#include "lariatanamodules.fcl"
#include "cluster_lariat.fcl"
#include "showerfindermodules.fcl"
##include "resourcetracking_services.fcl"
#include "lariatfiltermodules.fcl"
 
process_name: SignalToNoise

services:
{
  TFileService: { fileName: "histo_SignalToNoise.root" }
  RandomNumberGenerator: {} #ART native random number generator
  @table::lariat_services
}
services.scheduler.SkipEvent: [ ProductNotFound ]

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  -1        # Number of events to create
}


# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 filters:
 {
  sigtonoise:      @local::lariat_signaltonoise
 }

 filt:  [ sigtonoise ]
 stream1:  [ ]
 trigger_paths: [ filt ] 
 end_paths:     [ stream1 ]  
}

# no art output
outputs:
{
}

physics.filters.sigtonoise.HitModuleLabel: "gaushit"
physics.filters.sigtonoise.TrackModuleLabel: "pmtracktc"
physics.filters.sigtonoise.WCTrackLabel: "wctrack"
