////////////////////////////////////////////////////////////////////////
// Class:       DDMCPrimaryPicker
// Module Type: filter
// File:        DDMCPrimaryPicker_module.cc
//
// Generated at Fri Nov 30 12:08:27 2018 by Greg Pulliam using artmod
// from cetpkgsupport v1_10_02.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDFilter.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"

#include "fhiclcpp/ParameterSet.h"
#include "canvas/Persistency/Common/Ptr.h" 
#include "canvas/Persistency/Common/PtrVector.h" 
#include "messagefacility/MessageLogger/MessageLogger.h"
#include "art/Framework/Services/Optional/TFileService.h" 
#include "art/Framework/Services/Optional/TFileDirectory.h"
#include <memory>
#include "larsim/MCCheater/BackTrackerService.h"
#include "larsim/MCCheater/ParticleInventoryService.h"
#include "nusimdata/SimulationBase/MCTruth.h"
#include "TComplex.h"
#include "TFile.h"
#include "TH2D.h"
#include "TF1.h"
#include "TTree.h"
#include "TTimeStamp.h"
class DDMCPrimaryPicker;

class DDMCPrimaryPicker : public art::EDFilter {
public:
  explicit DDMCPrimaryPicker(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  DDMCPrimaryPicker(DDMCPrimaryPicker const &) = delete;
  DDMCPrimaryPicker(DDMCPrimaryPicker &&) = delete;
  DDMCPrimaryPicker & operator = (DDMCPrimaryPicker const &) = delete;
  DDMCPrimaryPicker & operator = (DDMCPrimaryPicker &&) = delete;

  // Required functions.
  bool filter(art::Event & e) override;

  // Selected optional functions.
  void beginJob() override;
  void endJob() override;
  void reconfigure(fhicl::ParameterSet const & p) override;
  void respondToCloseInputFile(art::FileBlock const & fb) override;
  void respondToCloseOutputFiles(art::FileBlock const & fb) override;
  void respondToOpenInputFile(art::FileBlock const  &fb) override;
  void respondToOpenOutputFiles(art::FileBlock const & fb) override;

private:

  //std::string fG4ModuleLabel;
  double fPDGid;
};


DDMCPrimaryPicker::DDMCPrimaryPicker(fhicl::ParameterSet const & p)
// :
// Initialize member data here.
{
  this->reconfigure(p);
}

bool DDMCPrimaryPicker::filter(art::Event & e)
{ 
  std::cout<<fPDGid<<std::endl;
  std::string pri("primary");
  art::ServiceHandle<cheat::ParticleInventoryService> pi_serv;
  const sim::ParticleList& plist = pi_serv->ParticleList();
     // ### Making a vector of MCParticles ###
    std::vector<const simb::MCParticle* > geant_part;
    for(size_t p = 0; p < plist.size(); ++p) 
	  {geant_part.push_back(plist.Particle(p));}
    for( unsigned int i = 0; i < geant_part.size(); ++i )
    {
      if(geant_part[i]->Process()==pri)
      {
        if(geant_part[i]->Vz()<-90)
	{
	  std::cout<<"PDG for event :"<<geant_part[i]->PdgCode()<<std::endl;
	  if(geant_part[i]->PdgCode()==fPDGid)
	  {
	    return true;
	  }
	  else
	  {
	    return false;
	  }
	}
      }
    }//<---End i loop
  return false;  	  
}

void DDMCPrimaryPicker::beginJob()
{
  
}


void DDMCPrimaryPicker::endJob()
{
  // Implementation of optional member function here.
}


void DDMCPrimaryPicker::reconfigure(fhicl::ParameterSet const & p)
{
  fPDGid                    = p.get<double>("PDGid");
  //fG4ModuleLabel            = p.get< std::string >("G4ModuleLabel");
}

void DDMCPrimaryPicker::respondToCloseInputFile(art::FileBlock const & fb)
{
  // Implementation of optional member function here.
}

void DDMCPrimaryPicker::respondToCloseOutputFiles(art::FileBlock const & fb)
{
  // Implementation of optional member function here.
}

void DDMCPrimaryPicker::respondToOpenInputFile(art::FileBlock const  &fb)
{
  // Implementation of optional member function here.
}

void DDMCPrimaryPicker::respondToOpenOutputFiles(art::FileBlock const & fb)
{
  // Implementation of optional member function here.
}

DEFINE_ART_MODULE(DDMCPrimaryPicker)
