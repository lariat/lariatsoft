////////////////////////////////////////////////////////////////////////
// Class:       TimestampFilter
// Module Type: filter
// File:        TimestampFilter_module.cc
//
// This filter checks the event timestamp (within spill) and requires
// that it be within some user-defined limit.  Useful way to select beam
// events (1.2 - 5.5 sec).
//
// Option to require event contain non-empty container of TPC wire digits.
//
// Generated at Wed Oct 12 15:23:51 2016 by William Foreman using artmod
// from cetpkgsupport v1_10_02.
////////////////////////////////////////////////////////////////////////

// Framework includes
#include "art/Framework/Core/EDFilter.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "art_root_io/TFileService.h"
#include "canvas/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"

// LArSoft includes
#include "lardataobj/RawData/OpDetPulse.h"
#include "lardataobj/RawData/RawDigit.h"

// ROOT includes
#include <TH1F.h>
#include <TH2F.h>

// C++ includes
#include <iostream>
#include <memory>

class TimestampFilter;

class TimestampFilter : public art::EDFilter {
public:
  explicit TimestampFilter(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  TimestampFilter(TimestampFilter const &) = delete;
  TimestampFilter(TimestampFilter &&) = delete;
  TimestampFilter & operator = (TimestampFilter const &) = delete;
  TimestampFilter & operator = (TimestampFilter &&) = delete;

  // Required functions.
  bool filter(art::Event & e) override;

  // Selected optional functions.
  void beginJob() override;
  void endJob() override;
  void reconfigure(fhicl::ParameterSet const & p) ;

private:

  float fT1;
  float fT2;
  bool  fRequireRawDigits;
  std::string fDAQModuleLabel;
  std::string fDAQModuleInstanceName;

  TH1F* hTimestamps;
  TH1F* hTimestamps_pass;

};


TimestampFilter::TimestampFilter(fhicl::ParameterSet const & p)
: EDFilter(p)
// Initialize member data here.
{
  this->reconfigure(p);
  art::ServiceHandle<art::TFileService> tfs;
  hTimestamps       = tfs->make<TH1F>("Timestamps",";Time in spill [sec]",300,0,60.);
  hTimestamps_pass  = tfs->make<TH1F>("Timestamps_pass",";Time in spill [sec]",300,0.,60.);
}

bool TimestampFilter::filter(art::Event & e)
{
  // -----------------------------------------------
  // Require event contain non-empty container of RawDigits (wires)
  // If empty, skip event immediately.
  art::Handle< std::vector<raw::RawDigit> > DigitHandle;;
  std::vector<art::Ptr<raw::RawDigit> > digit;
  if(e.getByLabel("daq",DigitHandle))
    {art::fill_ptr_vector(digit, DigitHandle);} 
  //std::cout<<"Number of rawDigits: "<<digit.size()<<"\n";
  if( fRequireRawDigits && digit.size() == 0 ) return false;
  
  //std::cout<<"TimestampFilter: run "<<e.run()<<", subrun "<<e.subRun()<<", event "<<e.id().event()<<"\n";
  // Get the timestamp (within the spill cycle) from the opdetpulse
  // objects because I don't know where else this info is saved!
  art::Handle< std::vector< raw::OpDetPulse >> opdetHandle;
  e.getByLabel(fDAQModuleLabel, fDAQModuleInstanceName, opdetHandle);
  
  float timeStamp = -1.;
  
  if( (size_t)opdetHandle->size() > 0 ){
    // All we want is the timestamp so just grab the first opdetpulse
    // we can find and call it a day
    art::Ptr< raw::OpDetPulse > ThePulsePtr(opdetHandle,0); 
    raw::OpDetPulse pulse = *ThePulsePtr;
    timeStamp = ((float)pulse.PMTFrame()*8.)/1.0e09;
    //std::cout<<"Timestamp = "<<timeStamp<<" sec\n";
    hTimestamps->Fill(timeStamp);
  }
  
  if( timeStamp >= fT1 && timeStamp <= fT2 ) {
    hTimestamps_pass->Fill(timeStamp);
    return true;
  }
  
  return false;

}

void TimestampFilter::beginJob()
{
}


void TimestampFilter::endJob()
{
}


void TimestampFilter::reconfigure(fhicl::ParameterSet const & p)
{
  fT1				= p.get< float  >("T1",0);
  fT2				= p.get< float  >("T2",60);
  fDAQModuleLabel               = p.get< std::string >  ("DAQModule","daq");
  fDAQModuleInstanceName        = p.get< std::string >  ("DAQInstanceName","");
  fRequireRawDigits             = p.get< bool >         ("RequireRawDigits",true); 
  
}


DEFINE_ART_MODULE(TimestampFilter)
