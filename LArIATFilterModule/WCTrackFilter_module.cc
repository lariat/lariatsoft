////////////////////////////////////////////////////////////////////////
// Class:       WCTrackFilter
// Module Type: filter
// File:        WCTrackFilter_module.cc
//
// Generated at Tue Jan  5 11:09:15 2016 by Jonathan Asaadi using artmod
// from cetpkgsupport v1_08_06.
//
// This module filters events based on the number of WCTracks that exist
// in this event
////////////////////////////////////////////////////////////////////////

// ##########################
// ### Framework Includes ###
// ##########################
#include "art/Framework/Core/EDFilter.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "art/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"
#include "art/Framework/Services/Optional/TFileService.h"

// ###########################
// ### LArIATsoft Includes ###
// ###########################
#include "LArIATDataProducts/WCTrack.h"

// ####################
// ### C++ Includes ###
// ####################
#include <iostream>
#include <memory>

class WCTrackFilter;

class WCTrackFilter : public art::EDFilter {
public:
  explicit WCTrackFilter(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  WCTrackFilter(WCTrackFilter const &) = delete;
  WCTrackFilter(WCTrackFilter &&) = delete;
  WCTrackFilter & operator = (WCTrackFilter const &) = delete;
  WCTrackFilter & operator = (WCTrackFilter &&) = delete;

  // Required functions.
  bool filter(art::Event & e) override;

  // Selected optional functions.
  void beginJob() override;
  void endJob() override;
  void reconfigure(fhicl::ParameterSet const & p) override;

private:

  // Declare member data here.
  std::string fWCTrackLabel;
  double fminNumberWCTrack;
  
};


// ---------------------- Parameter Setting ---------------------
WCTrackFilter::WCTrackFilter(fhicl::ParameterSet const & p)
// :
// Initialize member data here.
{
  // Call appropriate produces<>() functions here.
  this->reconfigure(p);
}

// -------------------- FHICL Parameter Set ---------------------
void WCTrackFilter::reconfigure(fhicl::ParameterSet const & p)
{
  // Implementation of optional member function here.
  fWCTrackLabel       = p.get<  std::string  >("WCTrackLabel");
  fminNumberWCTrack   = p.get<     double    >("minNumberWCTrack", 1.0);
}


// ---------------------- Begin Job ---------------------------
void WCTrackFilter::beginJob()
{
  // Implementation of optional member function here.
}

// ---------------------- Event Loop ---------------------------
bool WCTrackFilter::filter(art::Event & evt)
{
// ######################################
// ### Get the collection of WCTracks ###
// ######################################
art::Handle< std::vector<ldp::WCTrack> > wctrackHandle;
std::vector<art::Ptr<ldp::WCTrack> > wctrack;
   
if(evt.getByLabel(fWCTrackLabel, wctrackHandle))
   {art::fill_ptr_vector(wctrack, wctrackHandle);}

// ###     If the number of WCTracks in the event       ###
// ### is less than the min number set, skip this event ###
if(wctrack.size() < fminNumberWCTrack){return false;}
else {return true;}


}//<---End Event Loop



// ----------------------- End Job ----------------------------
void WCTrackFilter::endJob()
{
  // Implementation of optional member function here.
}


DEFINE_ART_MODULE(WCTrackFilter)
