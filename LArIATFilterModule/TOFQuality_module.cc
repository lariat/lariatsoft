////////////////////////////////////////////////////////////////////////
// Class:       TOFQuality
// Module Type: filter
// File:        TOFQuality_module.cc
//
// Generated at 17 Feb 2016 by Irene Nutini using artmod
// from cetpkgsupport v1_08_06.
//
// This module filters on the number of TOF objects (by default requiring
// at least 1) with a TOF (ns) value less than some cut 
//(by default set to seperate pi/mu from protons
////////////////////////////////////////////////////////////////////////

// ##########################
// ### Framework Includes ###
// ##########################
#include "art/Framework/Core/EDFilter.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "canvas/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"
#include "art/Framework/Services/Optional/TFileService.h"

// ###########################
// ### LArIATsoft Includes ###
// ###########################
#include "LArIATDataProducts/TOF.h"

// ####################
// ### C++ Includes ###
// ####################
#include <iostream>
#include <memory>
#include <TH1F.h>

class TOFQuality;

class TOFQuality : public art::EDFilter {
public:
  explicit TOFQuality(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  TOFQuality(TOFQuality const &) = delete;
  TOFQuality(TOFQuality &&) = delete;
  TOFQuality & operator = (TOFQuality const &) = delete;
  TOFQuality & operator = (TOFQuality &&) = delete;

  // Required functions.
  bool filter(art::Event & e) override;

  // Selected optional functions.
  void beginJob() override;
  void endJob() override;
  void reconfigure(fhicl::ParameterSet const & p) override;
  
 

private:

  // Declare member data here.
  std::string fTOFModuleLabel;		// Name of the producer that made the TOF objects
  double fnTOFObjects;
  
  TH1F* fTOFvalues;
  
};

// ---------------------- Parameter Setting ---------------------
TOFQuality::TOFQuality(fhicl::ParameterSet const & p)
// :
// Initialize member data here.
{
  // Call appropriate produces<>() functions here.
  this->reconfigure(p);
}
// -------------------- FHICL Parameter Set ---------------------
void TOFQuality::reconfigure(fhicl::ParameterSet const & p)
{
  // Implementation of optional member function here.
  fTOFModuleLabel 		= p.get< std::string >("TOFModuleLabel");
  fnTOFObjects			= p.get< double >("nTOFObjects", 1.0);
}

// ---------------------- Begin Job ---------------------------
void TOFQuality::beginJob()
{
  // Implementation of optional member function here.
  art::ServiceHandle<art::TFileService> tfs;
  fTOFvalues = tfs->make<TH1F>("TOFvalues", "TOF(ns)", 100, 0, 100);
}

// ---------------------- Event Loop ---------------------------
bool TOFQuality::filter(art::Event & evt)
{
  std::cout<<"PUPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPAAAAAAAAAAAAAAAAAAAAAAA \n";
  // ####################################################
  // ### Getting the Time of Flight (TOF) Information ###
  // ####################################################
  art::Handle< std::vector<ldp::TOF> > TOFColHandle;
  std::vector<art::Ptr<ldp::TOF> > tof;
  
  std::cout<<"Puppa1\n";
  if(evt.getByLabel(fTOFModuleLabel,TOFColHandle)) art::fill_ptr_vector(tof, TOFColHandle);
  
  std::cout<<"Puppa2\n";
  // ### Reject the event if there is no TOF info ###   
  if(tof.size() <  fnTOFObjects)  return false;  
 
  std::cout<<"Puppa4\n";
  //Remove the event is the TOFObject is created but it gives out a zero value/empty value for the Tof itself
  
  //if( TOFColHandle->at(0).NTOF() < 1 ) return false;
  return true;
    
}


<<<<<<< HEAD
/*
bool tofGood = true;
if(ntof < 1){continue;}
for(int mmtof = 0; mmtof < ntof; mmtof++)
  {
    if(tofObject[mmtof] < 0 && tofObject[mmtof] > 30)
      {tofGood = false;}
=======
else {
  //Remove the event is the TOFObject is created but it gives out a zero value/empty value for the Tof itself
   if( TOFColHandle->at(0).NTOF() != 1 ) {return false;} 
   
  else return true;}
>>>>>>> fc6c8f7b9b77a5742e1e4d53d3a2622200cbb890

  }//<---End mmtof                                                                                                                                                                                  

*/



void TOFQuality::endJob()
{
  // Implementation of optional member function here.
}



DEFINE_ART_MODULE(TOFQuality)
