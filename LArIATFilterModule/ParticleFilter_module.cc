////////////////////////////////////////////////////////////////////////
// Class:       KaonFilter
// Module Type: filter
// File:        KaonFilter_module.cc
//
// Generated at Thur Dec 10 2015 by Irene Nutini using artmod
// from cetpkgsupport v1_08_06.
//Following KaonFilter - PiMuFilter structure
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDFilter.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "art/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"
#include "LArIATDataProducts/WCTrack.h"
#include "LArIATDataProducts/TOF.h"
#include "LArIATDataProducts/AuxDetParticleID.h"
#include <TH2F.h>
#include "art/Framework/Services/Optional/TFileService.h"

#include <iostream>
#include <memory>

class ParticleFilter;

class ParticleFilter : public art::EDFilter {
public:
  explicit ParticleFilter(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  ParticleFilter(ParticleFilter const &) = delete;
  ParticleFilter(ParticleFilter &&) = delete;
  ParticleFilter & operator = (ParticleFilter const &) = delete;
  ParticleFilter & operator = (ParticleFilter &&) = delete;

  // Required functions.
  bool filter(art::Event & e) override;

  // Selected optional functions.
  void beginJob() override;
  void endJob() override;
  void reconfigure(fhicl::ParameterSet const & p) override;
  void respondToCloseInputFile(art::FileBlock const & fb) override;
  void respondToCloseOutputFiles(art::FileBlock const & fb) override;
  void respondToOpenInputFile(art::FileBlock const  &fb) override;
  void respondToOpenOutputFiles(art::FileBlock const & fb) override;

private:

  // Declare member data here.
  TH2F* fParticlePzVsTOF;
  
  std::string fParticleIDModuleLabel;
  std::string fWCTrackModuleLabel;
  std::string fTOFModuleLabel;
  
  double fParticlePDG;
  double fParticleProbCutOff;

};


ParticleFilter::ParticleFilter(fhicl::ParameterSet const & p)
// :
// Initialize member data here.
{
  // Call appropriate produces<>() functions here.
  this->reconfigure(p);

}

bool ParticleFilter::filter(art::Event & e)
{
  // Implementation of required member function here.
  //Retrieving the Particle IDs from the event record
  art::Handle< std::vector<ldp::AuxDetParticleID> > particleIDCol;
  e.getByLabel(fParticleIDModuleLabel,particleIDCol);


  //Get the collection of WCTracks produced by the WCTrackBuilder module
  art::Handle< std::vector<ldp::WCTrack> > WCTrackColHandle;
  e.getByLabel(fWCTrackModuleLabel,WCTrackColHandle);


  //Get the collection of TOF objects produced by the TOF module
  art::Handle< std::vector<ldp::TOF> > TOFColHandle;
  e.getByLabel(fTOFModuleLabel,TOFColHandle);
  
  if(!particleIDCol->size()) return false;

  //Finding best-guess Particles
  double pdg_temp = 0;
  pdg_temp=fParticlePDG;
  
std::cout << "I'm looking for particles with PDG " << pdg_temp << std::endl;

if(pdg_temp == 321 || pdg_temp == -321){
	  if( particleIDCol->at(0).PDGCode() == 321 || particleIDCol->at(0).PDGCode() == -321 ){
          if( particleIDCol->at(0).KaonProbability() > fParticleProbCutOff ){
           std::cout << "Selected Possible Kaon Run/Subrun/Event: " << e.run() << "/" << e.subRun() << "/" << e.event() << std::endl;
			  fParticlePzVsTOF->Fill(WCTrackColHandle->at(0).Momentum(),TOFColHandle->at(0).SingleTOF(0));
          return true;
    }
  }
  return false;
} 

else if(pdg_temp == 211 || pdg_temp == -211){
  if( particleIDCol->at(0).PDGCode() == 211 || particleIDCol->at(0).PDGCode() == -211 ){
    if( particleIDCol->at(0).PionProbability() > fParticleProbCutOff ){
      std::cout << "Selected Possible Pion Run/Subrun/Event: " << e.run() << "/" << e.subRun() << "/" << e.event() << std::endl;
      fParticlePzVsTOF->Fill(WCTrackColHandle->at(0).Momentum(),TOFColHandle->at(0).SingleTOF(0));
      return true;
    }
  }
  return false;
}

else if(pdg_temp == 13 || pdg_temp == -13){
  if( particleIDCol->at(0).PDGCode() == 13 || particleIDCol->at(0).PDGCode() == -13 ){
    if( particleIDCol->at(0).MuonProbability() > fParticleProbCutOff ){
      std::cout << "Selected Possible Muon Run/Subrun/Event: " << e.run() << "/" << e.subRun() << "/" << e.event() << std::endl;
      fParticlePzVsTOF->Fill(WCTrackColHandle->at(0).Momentum(),TOFColHandle->at(0).SingleTOF(0));
      return true;
    }
  }
  return false;
}

else if(pdg_temp == 21113){
    if( particleIDCol->at(0).PDGCode() == 21113 ){ 
//PDG -> Pi: 211, Mu: 13, so PiMu is 21113
//Use PiMu pdg flag due to lack of good MuRS Tracks (as it is now)  
    if( particleIDCol->at(0).PiMuProbability() > fParticleProbCutOff ){
      if(!WCTrackColHandle->size()) return false;
      if(!TOFColHandle->size()) return false;
      std::cout << "Selected Possible Pi/Mu Run/Subrun/Event: " << e.run() << "/" << e.subRun() << "/" << e.event() << std::endl;
      fParticlePzVsTOF->Fill(WCTrackColHandle->at(0).Momentum(),TOFColHandle->at(0).SingleTOF(0));
      return true;
    }
  }
  return false;
}

else if(pdg_temp == 2212 || pdg_temp == -2212){
  if( particleIDCol->at(0).PDGCode() == 2212 || particleIDCol->at(0).PDGCode() == -2212 ){
    if( particleIDCol->at(0).ProtonProbability() > fParticleProbCutOff ){
      std::cout << "Selected Possible Proton Run/Subrun/Event: " << e.run() << "/" << e.subRun() << "/" << e.event() << std::endl;
      fParticlePzVsTOF->Fill(WCTrackColHandle->at(0).Momentum(),TOFColHandle->at(0).SingleTOF(0));
      return true;
    }
  }
  return false;
}

else return false; 
   

}

void ParticleFilter::beginJob()
{
  // Implementation of optional member function here.
  art::ServiceHandle<art::TFileService> tfs;
  fParticlePzVsTOF = tfs->make<TH2F>("ParticlePzVsTOF","Particle Pz Vs. TOF",160,0,1600,70,10,80);  //that's now from protons

}

void ParticleFilter::endJob()
{
  // Implementation of optional member function here.
}

void ParticleFilter::reconfigure(fhicl::ParameterSet const & p)
{
  // Implementation of optional member function here.
  fParticleProbCutOff = p.get<float>("ParticleProbabilityThreshold",0.5);
  fParticleIDModuleLabel = p.get<std::string>("ParticleIDModuleLabel");
  fWCTrackModuleLabel = p.get<std::string>("WCTrackModuleLabel");
  fTOFModuleLabel = p.get<std::string>("TOFModuleLabel");
  fParticlePDG = p.get<float>("ParticlePDG",211); //default value is for piplus

}

void ParticleFilter::respondToCloseInputFile(art::FileBlock const & fb)
{
  // Implementation of optional member function here.
}

void ParticleFilter::respondToCloseOutputFiles(art::FileBlock const & fb)
{
  // Implementation of optional member function here.
}

void ParticleFilter::respondToOpenInputFile(art::FileBlock const  &fb)
{
  // Implementation of optional member function here.
}

void ParticleFilter::respondToOpenOutputFiles(art::FileBlock const & fb)
{
  // Implementation of optional member function here.
}

DEFINE_ART_MODULE(ParticleFilter)
