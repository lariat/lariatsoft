////////////////////////////////////////////////////////////////////////
// Class:       BasicPiMuFilter
// Module Type: filter
// File:        BasicPiMuFilter_module.cc
//
// Generated at Wed Mar  2 17:11:48 2016 by Irene Nutini using artmod
// from cetpkgsupport v1_08_06.
////////////////////////////////////////////////////////////////////////

// ##########################
// ### Framework Includes ###
// ##########################
#include "art/Framework/Core/EDFilter.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "art/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"
#include "art/Framework/Services/Optional/TFileService.h"

// ###########################
// ### LArIATsoft Includes ###
// ###########################
#include "LArIATDataProducts/TOF.h"
#include "LArIATDataProducts/WCTrack.h"

// ####################
// ### C++ Includes ###
// ####################
#include <iostream>
#include <memory>
#include <TH1F.h>
#include <TH2F.h>

class BasicPiMuFilter;

class BasicPiMuFilter : public art::EDFilter {
public:
  explicit BasicPiMuFilter(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  BasicPiMuFilter(BasicPiMuFilter const &) = delete;
  BasicPiMuFilter(BasicPiMuFilter &&) = delete;
  BasicPiMuFilter & operator = (BasicPiMuFilter const &) = delete;
  BasicPiMuFilter & operator = (BasicPiMuFilter &&) = delete;

  // Required functions.
  bool filter(art::Event & e) override;

  // Selected optional functions.
  void beginJob() override;
  void reconfigure(fhicl::ParameterSet const & p) override;

private:

  // Declare member data here.
  std::string fTOFModuleLabel;		// Name of the producer that made the TOF objects
  double fnTOFObjects;
  double fTOFLowerBound; //<---Lowest TOF value we can have (ns)
  double fTOFUpperBound; //<---Upper TOF value we can have (ns)
  
  std::string fWCTrackModuleLabel;
  double fminNumberWCTrack;
  double fWCLowerBound; //<---Lowest WC value we can have 
  double fWCUpperBound; //<---Upper WC value we can have
  
  TH1F* fReco_Pz;
  TH1F* fTOFBeforeCut;
  TH2F* fPiMuPzVsTOF;
  TH2F* fPzVsTOF;

};


BasicPiMuFilter::BasicPiMuFilter(fhicl::ParameterSet const & p)
// :
// Initialize member data here.
{
  // Call appropriate produces<>() functions here.
  this->reconfigure(p);
}

bool BasicPiMuFilter::filter(art::Event & e)
{
  // Implementation of required member function here.
  // ####################################################
// ### Getting the Time of Flight (TOF) Information ###
// ####################################################
art::Handle< std::vector<ldp::TOF> > TOFColHandle;
std::vector<art::Ptr<ldp::TOF> > tof;
   
if(e.getByLabel(fTOFModuleLabel,TOFColHandle))
   {art::fill_ptr_vector(tof, TOFColHandle);}

// ### Reject the event if there is no TOF info ###   
if(tof.size() <  fnTOFObjects){return false;}  

// ######################################
// ### Get the collection of WCTracks ###
// ######################################
art::Handle< std::vector<ldp::WCTrack> > wctrackHandle;
std::vector<art::Ptr<ldp::WCTrack> > wctrack;
   
if(e.getByLabel(fWCTrackModuleLabel, wctrackHandle))
   {art::fill_ptr_vector(wctrack, wctrackHandle);}


// ### Set a boolian to false for the event ###
bool GoodTOFValue = false;
// ################################
// ### Looping over TOF objects ###
// ################################
for(size_t i = 0; i < tof.size(); i++)
      {
      for (size_t tof_idx = 0; tof_idx < tof[i]->NTOF(); ++tof_idx)
         {
	 fTOFBeforeCut->Fill( tof[i]->SingleTOF(tof_idx) );
	 // ### Requiring that the TOF be between the lower and upper bound (set in the fcl) ###
	 if(tof[i]->SingleTOF(tof_idx) > fTOFLowerBound && tof[i]->SingleTOF(tof_idx) < fTOFUpperBound)
	    {GoodTOFValue = true;} //<---If any object statisfies this then keep the event
	 
	 }//<---End tof_idx loop
      
      
      }//<---End i loop
      
bool GoodWCValue =false;
// ###     If the number of WCTracks in the event       ###
// ### is less than the min number set, skip this event ###
if(wctrack.size() < fminNumberWCTrack){return false;}

  for(size_t wct_count = 0; wct_count < wctrack.size(); wct_count++)
    {
      // ### Filling histogram with Wire Chamber Track momentum Pz and check momentum range ###
     fReco_Pz->Fill(wctrack[wct_count]->Momentum());
     if(wctrack[wct_count]->Momentum() > fWCLowerBound && wctrack[wct_count]->Momentum() < fWCUpperBound)
       {GoodWCValue = true;}
       
    }

fPzVsTOF->Fill(wctrackHandle->at(0).Momentum(),TOFColHandle->at(0).SingleTOF(0));
      
if(GoodTOFValue && GoodWCValue){
  fPiMuPzVsTOF->Fill(wctrackHandle->at(0).Momentum(),TOFColHandle->at(0).SingleTOF(0));
  return true;}
else {return false;}
}

void BasicPiMuFilter::beginJob()
{
  // Implementation of optional member function here.
  art::ServiceHandle<art::TFileService> tfs;
  fTOFBeforeCut = tfs->make<TH1F>("TOFBeforeCut", "TOF(ns)", 100, 0, 100);
  fReco_Pz = tfs->make<TH1F>("Reco_Pz","Reconstructed momentum in XZ plane", 180, 0, 1800);
  fReco_Pz->GetXaxis()->SetTitle("Reconstructed momentum (MeV/c)");
  fReco_Pz->GetYaxis()->SetTitle("Tracks per 10 MeV/c");
  fPzVsTOF = tfs->make<TH2F>("PzVsTOF","Pz Vs. TOF (All) ",160,0,1600,70,10,80);
  fPiMuPzVsTOF = tfs->make<TH2F>("PiMuPzVsTOF","PiMu Pz Vs. TOF",160,0,1600,70,10,80);  //that's for the selected PiMu
}

void BasicPiMuFilter::reconfigure(fhicl::ParameterSet const & p)
{
  // Implementation of optional member function here.
  fTOFModuleLabel 		= p.get< std::string >("TOFModuleLabel");
  fnTOFObjects			= p.get< double >("nTOFObjects", 1.0);
  fTOFLowerBound                = p.get< double >("TOFLowerBound", 10.0);
  fTOFUpperBound                = p.get< double >("TOFUpperBound", 25.0);
  fWCTrackModuleLabel           = p.get<  std::string  >("WCTrackModuleLabel");
  fminNumberWCTrack   		= p.get<     double    >("minNumberWCTrack", 1.0);
  fWCLowerBound                 = p.get< double >("WCLowerBound", 100.0);
  fWCUpperBound                 = p.get< double >("WCUpperBound", 1500.0);

}

DEFINE_ART_MODULE(BasicPiMuFilter)
