////////////////////////////////////////////////////////////////////////
// Class:       PiMuFilter
// Module Type: filter
// File:        PiMuFilter_module.cc
//
// Generated at Mon Sep 28 12:34:11 2015 by Irene Nutini using artmod
// from cetpkgsupport v1_08_06.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDFilter.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "canvas/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"
#include "LArIATDataProducts/WCTrack.h"
#include "LArIATDataProducts/TOF.h"
#include "LArIATDataProducts/AuxDetParticleID.h"
#include <TH2F.h>
#include "art/Framework/Services/Optional/TFileService.h"

#include <iostream>
#include <memory>

class PiMuFilter;

class PiMuFilter : public art::EDFilter {
public:
  explicit PiMuFilter(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  PiMuFilter(PiMuFilter const &) = delete;
  PiMuFilter(PiMuFilter &&) = delete;
  PiMuFilter & operator = (PiMuFilter const &) = delete;
  PiMuFilter & operator = (PiMuFilter &&) = delete;

  // Required functions.
  bool filter(art::Event & e) override;

  // Selected optional functions.
  void beginJob() override;
  void reconfigure(fhicl::ParameterSet const & p) ;
  void endJob() override;
  void respondToCloseInputFile(art::FileBlock const & fb) override;
  void respondToCloseOutputFiles(art::FileBlock const & fb) override;
  void respondToOpenInputFile(art::FileBlock const  &fb) override;
  void respondToOpenOutputFiles(art::FileBlock const & fb) override;

private:

  // Declare member data here.
  
  //Produce a scatterplot TimeOfFlight (ns) vs Momentum along beam axis
  TH2F* fPiMuPzVsTOF;  
  
  std::string fSlicerSourceLabel;
  std::string fParticleIDModuleLabel;
  std::string fWCTrackModuleLabel;
  std::string fTOFModuleLabel;

  

  double fPiMuProbCutOff;

};


PiMuFilter::PiMuFilter(fhicl::ParameterSet const & p)
// :
// Initialize member data here.
{
  // Call appropriate produces<>() functions here.
	this->reconfigure(p);	
}

bool PiMuFilter::filter(art::Event & e)
{
  // Implementation of required member function here.
  //Retrieving the Particle IDs from the event record
  art::Handle< std::vector<ldp::AuxDetParticleID> > particleIDCol;
  e.getByLabel(fParticleIDModuleLabel,particleIDCol);

  //Get the collection of WCTracks produced by the WCTrackBuilder module
  art::Handle< std::vector<ldp::WCTrack> > WCTrackColHandle;
  e.getByLabel(fWCTrackModuleLabel,WCTrackColHandle);

  //Get the collection of TOF objects produced by the TOF module
  art::Handle< std::vector<ldp::TOF> > TOFColHandle;
  e.getByLabel(fTOFModuleLabel,TOFColHandle);

  

  //Finding best-guess PI/MU <-----

  if( particleIDCol->at(0).PDGCode() == 21113 ){ 
//PDG -> Pi: 211, Mu: 13, so PiMu is 21113
//Now used PiMu pdg flag due to lack of good MuRS Tracks (as it is now)
//When we'll have good MuRS -> new filter module PiFilter! (select pdg 211)

    if( particleIDCol->at(0).PiMuProbability() > fPiMuProbCutOff ){

      std::cout << "Selected Possible Pi/Mu Run/Subrun/Event: " << e.run() << "/" << e.subRun() << "/" << e.event() << std::endl;

      fPiMuPzVsTOF->Fill(WCTrackColHandle->at(0).Momentum(),TOFColHandle->at(0).SingleTOF(0));

      return true;

    }

  }

  return false;

}

void PiMuFilter::beginJob()
{
  // Implementation of optional member function here.
  art::ServiceHandle<art::TFileService> tfs;
  fPiMuPzVsTOF = tfs->make<TH2F>("PiMuPzVsTOF","Pi/Mu Pz Vs. TOF",160,0,1600,70,10,80);  


}

void PiMuFilter::reconfigure(fhicl::ParameterSet const & p)
{
  // Implementation of optional member function here.  
  fSlicerSourceLabel =p.get<std::string>("SourceLabel","SlicerInput");
  fPiMuProbCutOff = p.get<float>("PiMuProbabilityThreshold",0.5);
  fParticleIDModuleLabel = p.get<std::string>("ParticleIDModuleLabel","pid");
  fWCTrackModuleLabel = p.get<std::string>("WCTrackModuleLabel");
  fTOFModuleLabel = p.get<std::string>("TOFModuleLabel");

}

void PiMuFilter::endJob()
{
  // Implementation of optional member function here.
}

void PiMuFilter::respondToCloseInputFile(art::FileBlock const & fb)
{
  // Implementation of optional member function here.
}

void PiMuFilter::respondToCloseOutputFiles(art::FileBlock const & fb)
{
  // Implementation of optional member function here.
}

void PiMuFilter::respondToOpenInputFile(art::FileBlock const  &fb)
{
  // Implementation of optional member function here.
}

void PiMuFilter::respondToOpenOutputFiles(art::FileBlock const & fb)
{
  // Implementation of optional member function here.
}


DEFINE_ART_MODULE(PiMuFilter)
