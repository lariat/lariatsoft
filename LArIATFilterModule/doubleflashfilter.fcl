#include "services_lariat.fcl"
#include "caldata_lariat.fcl"
#include "hitfindermodules.fcl"
#include "lariatclustermodules.fcl"
#include "trackfindermodules.fcl"
#include "calorimetry_lariat.fcl"
#include "particleid.fcl"
#include "showerreco3d.fcl"
#include "showerquality.fcl"
#include "lariat_reco_algs.fcl"
#include "lariatbeamlinereco.fcl"
#include "services_lariat.fcl"
#include "lariatcheckmodules.fcl"
#include "triggeralgo_service.fcl"
#include "lariatanamodules.fcl"
#include "cluster_lariat.fcl"
#include "showerfindermodules.fcl"
#include "resourcetracking_services.fcl"
#include "lariatfiltermodules.fcl"
 
process_name: DoubleFlash

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "histo_dflash.root" }
 #@table::standard_resourcetrackers
  RandomNumberGenerator: {} #ART native random number generator
  #message:      @local::lariat_message_services
  @table::lariat_services
}
#services.DatabaseUtil.ShouldConnect: false
services.scheduler.SkipEvent: [ ProductNotFound ]

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  -1        # Number of events to create
}


# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{
 producers:
 { 
 }

 analyzers:
 {
 }

 filters:
 {
  dflash:
  {
   module_type: DoubleFlashFilter
   OpHitBuilderAlg: {}
  }
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 filt:  [ dflash ]
 
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [ filt ] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [ stream1 ]  

}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: [XXX]
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "dflash_r%R_%tc_%#.root"
   SelectEvents: [ filt ]
   compressionLevel: 1
 }
}

#================================================================================================
# Tunable settings for hit-finding, integration, etc.  Most of these can be left as default.
#
physics.filters.dflash.OpHitBuilderAlg.HitFindingMode:         "grad"  # "grad" or "signal"
physics.filters.dflash.OpHitBuilderAlg.GradHitThresh:          -10  # default -10 ADC/ns
physics.filters.dflash.OpHitBuilderAlg.GradRMSThresh:          5    # default 5 (x grad RMS)
physics.filters.dflash.OpHitBuilderAlg.SignalHitThresh:        4    # default 4 mV
physics.filters.dflash.OpHitBuilderAlg.IntegrationWindows:     [100,7000]  # integration lengths in samples (ns)  
physics.filters.dflash.OpHitBuilderAlg.BaselineWindowSize:     1000  # samples (ns)
physics.filters.dflash.OpHitBuilderAlg.MvPerADC:               0.2   # V1751 board 9 digitizer conversion 
physics.filters.dflash.OpHitBuilderAlg.UsePrepulseFit:         false
