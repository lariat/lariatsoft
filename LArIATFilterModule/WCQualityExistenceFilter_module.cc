///////////////////////////////////////////////////////////////////////
// Class:       WCQualityExistenceFilter
// Module Type: filter
// File:        WCQualityExistenceFilter_module.cc
//
// Generated at Thu Oct 25 14:01:15 2018 by Greg Pulliam using artmod
// from cetpkgsupport v1_10_02.
//
//  This module is basic. It just checks that the WCQualityFilter has been run.
//  It filters out events that do not have a WCQuality object.
//  
////////////////////////////////////////////////////////////////////////
#include "art/Framework/Core/EDFilter.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
//#include "art/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include <TH1F.h>
#include "messagefacility/MessageLogger/MessageLogger.h"
#include "lardataobj/RecoBase/PFParticle.h"
#include <memory>
#include "art/Framework/Services/Optional/TFileService.h"
class WCQualityExistenceFilter;
class WCQualityExistenceFilter : public art::EDFilter {
public:
  explicit WCQualityExistenceFilter(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.
  // Plugins should not be copied or assigned.
  WCQualityExistenceFilter(WCQualityExistenceFilter const &) = delete;
  WCQualityExistenceFilter(WCQualityExistenceFilter &&) = delete;
  WCQualityExistenceFilter & operator = (WCQualityExistenceFilter const &) = delete;
  WCQualityExistenceFilter & operator = (WCQualityExistenceFilter &&) = delete;
  // Required functions.
  bool filter(art::Event & e) override;
  void beginJob();
private:
  std::string fWCQualityProducerLabel;
  TH1F* hPassFail;
};
WCQualityExistenceFilter::WCQualityExistenceFilter(fhicl::ParameterSet const & p)
// :
// Initialize member data here.
{
  fWCQualityProducerLabel   = p.get< std::string >("WCQualityProducerLabel", "wcquality");
}
bool WCQualityExistenceFilter::filter(art::Event & e)
{
    auto wcquality_handle = e.getValidHandle< std::vector< recob::PFParticle > > (fWCQualityProducerLabel);
    //std::cout<<wcquality_handle->size()<<std::endl; 
    if(wcquality_handle->size()==0)
    { hPassFail->Fill(0); return false;}
    else if(wcquality_handle->size()==1)
    {hPassFail->Fill(1); return true;}
    else {std::cout<<"WCquality handle had size "<<wcquality_handle->size()<<std::endl; hPassFail->Fill(0); return false;}
     
}
void WCQualityExistenceFilter::beginJob()
{
  art::ServiceHandle<art::TFileService> tfs;
  hPassFail= tfs->make<TH1F>("WCQualityPassFail","WCQualityPassFail",2,-.5,1.5);
}
DEFINE_ART_MODULE(WCQualityExistenceFilter)
