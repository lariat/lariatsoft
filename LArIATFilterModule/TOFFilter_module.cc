////////////////////////////////////////////////////////////////////////
// Class:       TOFFilter
// Module Type: filter
// File:        TOFFilter_module.cc
//
// Generated at Tue Jan  5 11:54:30 2016 by Jonathan Asaadi using artmod
// from cetpkgsupport v1_08_06.
//
// This module filters on the number of TOF objects (by default requiring
// at least 1) with a TOF (ns) value less than some cut 
//(by default set to seperate pi/mu from protons
////////////////////////////////////////////////////////////////////////

// ##########################
// ### Framework Includes ###
// ##########################
#include "art/Framework/Core/EDFilter.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "canvas/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"
#include "art_root_io/TFileService.h"

// ###########################
// ### LArIATsoft Includes ###
// ###########################
#include "LArIATDataProducts/TOF.h"

// ####################
// ### C++ Includes ###
// ####################
#include <iostream>
#include <memory>
#include <TH1F.h>

class TOFFilter;

class TOFFilter : public art::EDFilter {
public:
  explicit TOFFilter(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  TOFFilter(TOFFilter const &) = delete;
  TOFFilter(TOFFilter &&) = delete;
  TOFFilter & operator = (TOFFilter const &) = delete;
  TOFFilter & operator = (TOFFilter &&) = delete;

  // Required functions.
  bool filter(art::Event & e) override;

  // Selected optional functions.
  void beginJob() override;
  void endJob() override;
  void reconfigure(fhicl::ParameterSet const & p) ;
  
 

private:

  // Declare member data here.
  std::string fTOFModuleLabel;		// Name of the producer that made the TOF objects
  double fnTOFObjects;
  double fTOFLowerBound; //<---Lowest TOF value we can have (ns)
  double fTOFUpperBound; //<---Upper TOF value we can have (ns)
  
  TH1F* fTOFBeforeCut;
  
};

// ---------------------- Parameter Setting ---------------------
TOFFilter::TOFFilter(fhicl::ParameterSet const & p)
: EDFilter(p)
// Initialize member data here.
{
  // Call appropriate produces<>() functions here.
  this->reconfigure(p);
}
// -------------------- FHICL Parameter Set ---------------------
void TOFFilter::reconfigure(fhicl::ParameterSet const & p)
{
  // Implementation of optional member function here.
  fTOFModuleLabel 		= p.get< std::string >("TOFModuleLabel");
  fnTOFObjects			= p.get< double >("nTOFObjects", 1.0);
  fTOFLowerBound                = p.get< double >("TOFLowerBound", 0.0);
  fTOFUpperBound                = p.get< double >("TOFUpperBound", 80.0);
}

// ---------------------- Begin Job ---------------------------
void TOFFilter::beginJob()
{
  // Implementation of optional member function here.
  art::ServiceHandle<art::TFileService> tfs;
  fTOFBeforeCut = tfs->make<TH1F>("TOFBeforeCut", "TOF(ns)", 100, 0, 100);
}

// ---------------------- Event Loop ---------------------------
bool TOFFilter::filter(art::Event & evt)
{
// ####################################################
// ### Getting the Time of Flight (TOF) Information ###
// ####################################################
art::Handle< std::vector<ldp::TOF> > TOFColHandle;
std::vector<art::Ptr<ldp::TOF> > tof;
   
if(evt.getByLabel(fTOFModuleLabel,TOFColHandle))
   {art::fill_ptr_vector(tof, TOFColHandle);}

// ### Reject the event if there is no TOF info ###   
if(tof.size() <  fnTOFObjects){return false;}  

// ### Set a boolian to false for the event ###
bool GoodTOFValue = false;
// ################################
// ### Looping over TOF objects ###
// ################################
for(size_t i = 0; i < tof.size(); i++)
      {
      for (size_t tof_idx = 0; tof_idx < tof[i]->NTOF(); ++tof_idx)
         {
	 fTOFBeforeCut->Fill( tof[i]->SingleTOF(tof_idx) );
	 // ### Requiring that the TOF be between the lower and upper bound (set in the fcl) ###
	 if(tof[i]->SingleTOF(tof_idx) > fTOFLowerBound && tof[i]->SingleTOF(tof_idx) < fTOFUpperBound)
	    {GoodTOFValue = true;} //<---If any object statisfies this then keep the event
	 
	 }//<---End tof_idx loop
      
      
      }//<---End i loop
      
if(!GoodTOFValue){return false;}
else {return true;}

}





void TOFFilter::endJob()
{
  // Implementation of optional member function here.
}



DEFINE_ART_MODULE(TOFFilter)
