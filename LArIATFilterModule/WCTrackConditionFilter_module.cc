////////////////////////////////////////////////////////////////////////
// Class:       WCTrackConditionFilter
// Module Type: filter
// File:        WCTrackConditionFilter_module.cc
//
// Generated at Wed Jan  9 14:05:36 2019 by Greg Pulliam using artmod
// from cetpkgsupport v1_10_02.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDFilter.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"

#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"
#include "LArIATDataProducts/WCTrack.h"
#include <memory>
#include <TH1F.h>
#include "art/Framework/Services/Optional/TFileService.h"
class WCTrackConditionFilter;

class WCTrackConditionFilter : public art::EDFilter {
public:
  explicit WCTrackConditionFilter(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  WCTrackConditionFilter(WCTrackConditionFilter const &) = delete;
  WCTrackConditionFilter(WCTrackConditionFilter &&) = delete;
  WCTrackConditionFilter & operator = (WCTrackConditionFilter const &) = delete;
  WCTrackConditionFilter & operator = (WCTrackConditionFilter &&) = delete;

  // Required functions.
  bool filter(art::Event & e) override;

  // Selected optional functions.
  void beginJob() override;

  void endJob() override;

  void reconfigure(fhicl::ParameterSet const & p) override;
  void respondToCloseInputFile(art::FileBlock const & fb) override;
  void respondToCloseOutputFiles(art::FileBlock const & fb) override;
  void respondToOpenInputFile(art::FileBlock const  &fb) override;
  void respondToOpenOutputFiles(art::FileBlock const & fb) override;

private:

  bool bKeepPicky;
  bool bOnlyFourPoint;
  std::string fWCModuleLabel;
  TH1F* hPassFail;
  TH1F* hFailReason;

};


WCTrackConditionFilter::WCTrackConditionFilter(fhicl::ParameterSet const & p)
// :
// Initialize member data here.
{
  this->reconfigure(p);
}

bool WCTrackConditionFilter::filter(art::Event & e)
{ 
  std::cout<<"picky "<<bKeepPicky<<", fourpt: "<<bOnlyFourPoint<<std::endl;
  art::Handle< std::vector<ldp::WCTrack> > wctrackHandle;
  std::vector<art::Ptr<ldp::WCTrack> > wctrack;
  if(!e.getByLabel(fWCModuleLabel, wctrackHandle)){hPassFail->Fill(0); hFailReason->Fill(0); return false; } 
  art::fill_ptr_vector(wctrack, wctrackHandle);
  if (wctrack.size() > 1 || wctrack.size() < 1){hPassFail->Fill(0);hFailReason->Fill(1);return false; }
  
  bool isthispicky=wctrack[0]->IsPicky();
  bool isthisfourpoint=false;
  bool keepthisevent=false;
  if (wctrack[0]->WCMissed()<0){isthisfourpoint=true;}
  if (bKeepPicky && isthisfourpoint==bOnlyFourPoint && isthispicky){hPassFail->Fill(1);keepthisevent=true;}
  if(!bKeepPicky && isthisfourpoint==bOnlyFourPoint){hPassFail->Fill(1);keepthisevent=true;}
  if(!keepthisevent){hPassFail->Fill(0); hFailReason->Fill(2);}
  return keepthisevent;

}

void WCTrackConditionFilter::beginJob()
{
    art::ServiceHandle<art::TFileService> tfs;
  hPassFail= tfs->make<TH1F>("WCConditionPassFail","WCConditionPassFail",2,-.5,1.5);
  hFailReason=tfs->make<TH1F>("FailReason","FailReason",4,-.5,3.5);
}




void WCTrackConditionFilter::endJob()
{
  // Implementation of optional member function here.
}


void WCTrackConditionFilter::reconfigure(fhicl::ParameterSet const & p)
{
  fWCModuleLabel=p.get<std::string>("WCModuleLabel","wctrack");
  bKeepPicky=p.get<bool>("PickyTracksOnly","false");
  bOnlyFourPoint=p.get<bool>("FourPointOnly","false");
}

void WCTrackConditionFilter::respondToCloseInputFile(art::FileBlock const & fb)
{
  // Implementation of optional member function here.
}

void WCTrackConditionFilter::respondToCloseOutputFiles(art::FileBlock const & fb)
{
  // Implementation of optional member function here.
}

void WCTrackConditionFilter::respondToOpenInputFile(art::FileBlock const  &fb)
{
  // Implementation of optional member function here.
}

void WCTrackConditionFilter::respondToOpenOutputFiles(art::FileBlock const & fb)
{
  // Implementation of optional member function here.
}

DEFINE_ART_MODULE(WCTrackConditionFilter)
