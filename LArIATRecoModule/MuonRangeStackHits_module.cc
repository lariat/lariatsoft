////////////////////////////////////////////////////////////////////////
// Class:       MuonRangeStackHits
// Module Type: producer
// File:        MuonRangeStackHits_module.cc
//
// Generated at Thu Jun  4 10:04:24 2015 by Greg Pulliam using artmod
// from cetpkgsupport v1_08_05.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDProducer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "art/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"
#include <iostream>
#include <TH1F.h>
#include "art/Framework/Services/Optional/TFileService.h"
#include "art/Framework/Services/Registry/ServiceHandle.h"
#include "art/Framework/Services/Optional/TFileDirectory.h"
#include "RawDataUtilities/TriggerDigitUtility.h"
#include <vector>
#include <memory>
#include <sstream>
namespace lrm{
	class MuonRangeStackHits;
}

class MuonRangeStackHits : public art::EDProducer {
public:
  explicit MuonRangeStackHits(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  MuonRangeStackHits(MuonRangeStackHits const &) = delete;
  MuonRangeStackHits(MuonRangeStackHits &&) = delete;
  MuonRangeStackHits & operator = (MuonRangeStackHits const &) = delete;
  MuonRangeStackHits & operator = (MuonRangeStackHits &&) = delete;

  // Required functions.
  void produce(art::Event & e) override;

  // Selected optional functions.
  void beginJob() override;
  void beginRun(art::Run & r) override;
  void beginSubRun(art::SubRun & sr) override;
  void endJob() override;
  void endRun(art::Run & r) override;
  void endSubRun(art::SubRun & sr) override;
  void reconfigure(fhicl::ParameterSet const & p) override;
  void respondToCloseInputFile(art::FileBlock const & fb) override;
  void respondToCloseOutputFiles(art::FileBlock const & fb) override;
  void respondToOpenInputFile(art::FileBlock const & fb) override;
  void respondToOpenOutputFiles(art::FileBlock const & fb) override;

private:
std::string fTriggerUtility;
std::vector<TH1F*> fMRSADC;
  // Declare member data here.

};


MuonRangeStackHits::MuonRangeStackHits(fhicl::ParameterSet const & p)
// :
// Initialize member data here.
{
  // Call appropriate produces<>() functions here.
}

void MuonRangeStackHits::produce(art::Event & e)
{
  // Implementation of required member function here.
  fTriggerUtility = "FragmentToDigit";
  rdu::TriggerDigitUtility tdu(e, fTriggerUtility);

    // Loop over Triggers
  for(size_t trig=0; trig < tdu.NTriggers(); trig++)
     {	
      std::vector<const raw::AuxDetDigit*> MRSDigit=tdu.TriggerMuonRangeStackDigits(trig); 
	std::cout<<"Size of MRSDigit = "<<MRSDigit.size()<<std::endl;
	int size=MRSDigit.size();
	if(size==0){continue;}
	// Loop over PMT in trigger
	for(int nPMT=0; nPMT < size; nPMT++)
	{
	auto PMTDigit = MRSDigit[nPMT];
	  for(size_t i=0; i < PMTDigit->NADC(); i++) 
	   {
	   	if(PMTDigit->ADC(i)>2000){continue;}
		fMRSADC[nPMT]->Fill(i, PMTDigit->ADC(i)); //Fill Hist of ADC counts for each paddle

	  }
	  }
	  //A horribly inefficient loop to find simultaneous hits in multiple planes of paddles.
	  for(int nPMT=0; nPMT<4; nPMT++){
	  
	   auto PMTDigit=MRSDigit[nPMT];
                 for (size_t i=0; i < PMTDigit->NADC();i++){
		 	 
	    
	    
	    
	    int FirstThresholdCheck;
	    int threshold=2000;
	    int min=0;
	    int minPaddle=0; 
	    int PaddleFirst=0;
	    int PaddleSecond=0;
	    int PaddleThird=0;
	    int PaddleFourth=0;
	    int Planeshit=0;
	    FirstThresholdCheck=PMTDigit->ADC(i);
	       //std::cout<<"ADC Count for "<<i<<" is "<<FirstThresholdCheck<<std::endl;
	       if(FirstThresholdCheck<threshold){ //set threshold
	          
	         int HitTick=i;//which tick was there a hit?
		 std::cout<<"Found a hit at time tick "<<HitTick<<std::endl;
	      	 min=FirstThresholdCheck;//initialize the first paddle hit as the min.
		 minPaddle=nPMT;//which paddle had the min
		 PaddleFirst=nPMT;
		 Planeshit=1; //Counter for number of planes we pass
		 for (int SecondPaddleIter=4; SecondPaddleIter<8; SecondPaddleIter++){ //Look at second plane of paddles
		  
		   auto SecondThresholdCheck=MRSDigit[SecondPaddleIter]->ADC(i);
		   if(SecondThresholdCheck<threshold){ //If we're over threshold
		   PaddleSecond=SecondPaddleIter;
		     Planeshit=2;//Second plane was hit
		     if(SecondThresholdCheck<min){ //If this ADC count is less than the minimum ADC count 
		     
		     	min=SecondThresholdCheck; //set the second paddle ADC as the new min and the minpaddle
			minPaddle=SecondPaddleIter;
			
		     }
		     for (int ThirdPaddleIter=8; ThirdPaddleIter<12; ThirdPaddleIter++){ //Third plane paddles
		      
		       auto ThirdThresholdCheck=MRSDigit[ThirdPaddleIter]->ADC(i);
		       if(ThirdThresholdCheck<threshold){ //Over threshold?
		         PaddleThird=ThirdPaddleIter;
			 Planeshit=3;//Three planes hit
		          if(ThirdThresholdCheck<min){ //new min?
		           
		     	     min=ThirdThresholdCheck; //set min
			     minPaddle=ThirdPaddleIter;
		           }
			 for (int FourthPaddleIter=12; FourthPaddleIter<16; FourthPaddleIter++){ //Fourth plane paddles
		              
			      auto FourthThresholdCheck=MRSDigit[FourthPaddleIter]->ADC(i);
		       	     if(FourthThresholdCheck<threshold){ //Over threshold?
		         	 PaddleFourth=FourthPaddleIter;
				 Planeshit=4;//Made it through 4 planes.
		         	  if(FourthThresholdCheck<min){ //new min?
		                    
		     		     min=FourthThresholdCheck; //set min
				     minPaddle=FourthPaddleIter;
		                   }//CLOSE ALL THE LOOPS!
		              }// if fourth threshold
			   }//fourth iter
			  }//if third threshold
			}//third iter
	             }//if second threshold
	          }//second iter
std::cout<<"MuRS found a hit! Something passed through "<<Planeshit<<" planes.  The minumum ADC was for paddle "<<minPaddle<<" and had an ADC measurement of "<<min<< " The Paddle chain was "    
 <<PaddleFirst<<" "<<PaddleSecond<<" "<< PaddleThird<<" "<<PaddleFourth<<std::endl;
		  
	        }//if first threshold
	       
            }// close loop over time ticks
	    
    }//close nPMT loop
}//tdu.NTriggers loop
}//event

void MuonRangeStackHits::beginJob()
{
  art::ServiceHandle<art::TFileService> tfs;
   for(int trig=0; trig<80; trig++)
   {
   std::stringstream sMRSname, sMRStitle;
   sMRSname.str(""); sMRSname.flush(); sMRStitle.str(""); sMRStitle.flush();
   sMRSname<<"MRSADC for PMT"<<trig; sMRStitle<<"MRSADC for PMT"<<trig;
   fMRSADC.push_back( (TH1F*)tfs->make<TH1F>(sMRSname.str().c_str(), sMRStitle.str().c_str(),3073,0,3072));
 
  }
  //fMRSSize = tfs->make<TH1F>("MRSSize","MRSSize", 100, 0, 100);

  // Implementation of optional member function here.
}

void MuonRangeStackHits::beginRun(art::Run & r)
{
  // Implementation of optional member function here.
}

void MuonRangeStackHits::beginSubRun(art::SubRun & sr)
{
  // Implementation of optional member function here.
}

void MuonRangeStackHits::endJob()
{
  // Implementation of optional member function here.
}

void MuonRangeStackHits::endRun(art::Run & r)
{
  // Implementation of optional member function here.
}

void MuonRangeStackHits::endSubRun(art::SubRun & sr)
{
  // Implementation of optional member function here.
}

void MuonRangeStackHits::reconfigure(fhicl::ParameterSet const & p)
{
  // Implementation of optional member function here.
}

void MuonRangeStackHits::respondToCloseInputFile(art::FileBlock const & fb)
{
  // Implementation of optional member function here.
}

void MuonRangeStackHits::respondToCloseOutputFiles(art::FileBlock const & fb)
{
  // Implementation of optional member function here.
}

void MuonRangeStackHits::respondToOpenInputFile(art::FileBlock const & fb)
{
  // Implementation of optional member function here.
}

void MuonRangeStackHits::respondToOpenOutputFiles(art::FileBlock const & fb)
{
  // Implementation of optional member function here.
}

DEFINE_ART_MODULE(MuonRangeStackHits)
