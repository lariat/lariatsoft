////////////////////////////////////////////////////////////////////////
// Class:       MichelWfmReco
// Module Type: producer
// File:        MichelWfmReco_module.cc
//
// This module is used to perform some ID and reconstruction of PMT
// waveforms from stopping/decaying muons (primarily in the Michel 
// trigger sample).
//
// Eventually it may be used to create a new data product related to 
// Michel events, but for now, it does not add to the data file.
//
// Output histograms include:
//  - # hits found in each waveform
//  - amplitude of Michel-candidate pulses
//  - integrated charge of Michel candidates (100ns window)
//  - time difference between 1st and 2nd pulse
//    when exactly two pulses are found
//
// Authors: William Foreman, wforeman@uchicago.edu
//
// Generated at Wed Jul 15 13:09:43 2015 by William Foreman using artmod
// from cetpkgsupport v1_08_06.
//
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDProducer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "art/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"
#include "art/Framework/Services/Optional/TFileService.h"
#include "art/Framework/Services/Registry/ServiceHandle.h"
#include "art/Framework/Services/Optional/TFileDirectory.h"

//C++ Includes
#include <iostream>
#include <fstream>
#include <vector>
#include <memory>
#include <utility>

//ROOT Includes
#include <TH1F.h>
#include <TTree.h>

// LArSoft Includes
#include "Utilities/AssociationUtil.h"
#include "RawData/TriggerData.h"

//LAriatSoft Includes
#include "RawDataUtilities/TriggerDigitUtility.h"
#include "LArIATRecoAlg/OpHitBuilderAlg.h"
#include "LArIATRecoAlg/TriggerFilterAlg.h"
#include "Utilities/DatabaseUtilityT1034.h"


class MichelWfmReco;

class MichelWfmReco : public art::EDProducer {
public:
  explicit MichelWfmReco(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  MichelWfmReco(MichelWfmReco const &) = delete;
  MichelWfmReco(MichelWfmReco &&) = delete;
  MichelWfmReco & operator = (MichelWfmReco const &) = delete;
  MichelWfmReco & operator = (MichelWfmReco &&) = delete;

  // Required functions.
  void produce(art::Event & e) override;

  // Selected optional functions.
  void beginJob() override;
  void beginRun(art::Run & r) override;
  void beginSubRun(art::SubRun & sr) override;
  void endJob() override;
  void endRun(art::Run & r) override;
  void endSubRun(art::SubRun & sr) override;
  void reconfigure(fhicl::ParameterSet const & p) override;
  void respondToCloseInputFile(art::FileBlock const & fb) override;
  void respondToCloseOutputFiles(art::FileBlock const & fb) override;
  void respondToOpenInputFile(art::FileBlock const & fb) override;
  void respondToOpenOutputFiles(art::FileBlock const & fb) override;

private:

  // Name of the module producing the triggers
  std::string fTriggerUtility;

  // Switch to use the trigger filter or not
  bool      bUseTriggerFilter;
  bool      bVerbose;
  float     V1751PostPercent;

  // Alg objects
  OpHitBuilderAlg   fOpHitBuilderAlg; 
  TriggerFilterAlg  fTrigFiltAlg;

  // Variables
  Int_t       Timestamp;
  Double_t    DeltaTime;
  Int_t       NumHits;
  Double_t    Amplitude;
  Double_t    Charge_100ns; 

  // Histograms
  TH1F* h_NumOpHits;
  TH1F* h_DeltaTime;
  
  // TTree info
  TTree* MichelDataTree;
  TBranch* b_Timestamp;
  TBranch* b_NumHits;
  TBranch* b_DeltaTime;
  TBranch* b_Amplitude;
  TBranch* b_Charge_100ns;

};



MichelWfmReco::MichelWfmReco(fhicl::ParameterSet const & p)
: fOpHitBuilderAlg(p), fTrigFiltAlg(p)
{

  // Configures the ROOT histograms
  this->reconfigure(p);
  
  // Produces the LArSoft object to be outputted
  // (none for now!) 
  
}


void MichelWfmReco::produce(art::Event & e)
{

  std::cout << "Here we are... in MichelWfmReco::produce\n";

  // Set up loop over triggers in the inputted ROOT file
  rdu::TriggerDigitUtility tdu(e, fTriggerUtility);

  // Defint the vector of associations to be saved
  // (none yet!)

  // Loop over the triggers
  for(size_t trig = 0 ; trig < tdu.NTriggers(); ++trig){
    
    std::cout<<"Trigger "<<trig<<"\n";

    // Global trigger that will be used to make associations
    art::Ptr<raw::Trigger> theTrigger = tdu.EventTriggersPtr()[trig];
    raw::Trigger thisTrigger = *theTrigger;
    
    // filter for the MICHEL trigger pattern (note that for some runs,
    // particularly for those with the optimized Michel trigger setup, 
    // unfortunately the trigger inputs were not being saved and thus 
    // the filter won't work).
    bool isMichel; 
    // filter for MICHEL trigger
    if (bUseTriggerFilter){
      std::string myFilter = "+MICHEL";
      isMichel = fTrigFiltAlg.doesTriggerPassFilter( thisTrigger, myFilter ); 
    } else {
      isMichel = 1;
    }

    if ( isMichel ){

      // get the OpDetPulses; skip if empty
      art::PtrVector<raw::OpDetPulse> OpPulses = tdu.TriggerOpDetPulsesPtr(trig);
      if ( OpPulses.size() == 0 ) continue;
      
      // loop through the pulses
      for (unsigned int pulse_index =0; pulse_index < OpPulses.size(); ++pulse_index){

        // get the OpDetPulses
        raw::OpDetPulse ThePulse = *OpPulses[pulse_index];

        // if this is the ETL, continue onward
        if (ThePulse.OpChannel() == 1){
          
          // Initialize variables to be added to tree
          Timestamp   = -999;
          NumHits     = -9;
          DeltaTime   = -99.;
          Amplitude   = -99.;
          Charge_100ns= -99.;

          // find trigger time
          Timestamp = ThePulse.FirstSample();

          // save the ETL waveform into a new vector of shorts
          std::vector<short> ETL_waveform = ThePulse.Waveform();
          Int_t NSamples = ETL_waveform.size();
          short PostPercentMark = NSamples*(1.-V1751PostPercent);
          std::cout<<"NSamples: "<<NSamples<<"   PostPercent Mark: "<<PostPercentMark<<"\n";

          // perform hit-finding/filtering
          std::vector<short> hit_times = fOpHitBuilderAlg.GetHits(ETL_waveform);
          NumHits = hit_times.size();

          std::cout << "We found "<<NumHits<<" hits\n";
          for (Int_t i=0; i<NumHits; i++){
            std::cout<<"   "<<i<<"    t = "<<hit_times[i]<<"  ("<<hit_times[i]/double(NSamples)<<" of total readout window)\n";
          }

          // fill Nhits histo
          h_NumOpHits ->Fill(NumHits);
          
          // if there were only 2 hits (one before PostPercent, one ~at PostPercent 
          if( (NumHits == 2) && (hit_times[0] < PostPercentMark) && ( abs(hit_times[1]-PostPercentMark) <= 0.01*NSamples) ){
            
            std::cout << "    passes Michel cut \n";
            DeltaTime = hit_times[1] - hit_times[0];
            h_DeltaTime->Fill(DeltaTime);
           
            // calculate  
            std::vector<std::vector<double>> hit_info = fOpHitBuilderAlg.CalcHitInfo(ETL_waveform, hit_times);
          
          }
          
          MichelDataTree->Fill();

          //printf("Size of ETL waveform is %lu",n);
        } // <-- endif PMT is ETL (OpChannel == 1)
      
      
      }

    } // <-- endif isMichel
    
  
  } //<-- End loop over triggers

  

}

void MichelWfmReco::beginJob()
{
  // Opens up the file service to read information from the ROOT file input
  art::ServiceHandle<art::TFileService> tfs;

  MichelDataTree        = tfs->make<TTree>("MichelDataTree","MichelDataTree");
  b_Timestamp           = MichelDataTree->Branch("Timestamp",&Timestamp,"Timestamp/I");
  b_NumHits             = MichelDataTree->Branch("NumHits",&NumHits,"NumHits/I");
  b_DeltaTime           = MichelDataTree->Branch("DeltaTime",&DeltaTime,"DeltaTime/D");
  b_Amplitude           = MichelDataTree->Branch("Amplitude",&Amplitude,"Amplitude/D");
  b_Charge_100ns        = MichelDataTree->Branch("Charge_100ns",&Charge_100ns,"Charge_100ns/D");
  
  h_NumOpHits           = tfs->make<TH1F>("OpHitsPerEvent"    , "OpHitsPerEvent",     10,    0., 10.);
  h_NumOpHits           ->GetXaxis()->SetTitle("Num hits");
  h_NumOpHits           ->GetYaxis()->SetTitle("Counts");

  h_DeltaTime           = tfs->make<TH1F>("DeltaTime"         , "DeltaTime",          800,    0., 8000.);
  h_DeltaTime           ->GetXaxis()->SetTitle("Time difference in two-hit events");
  h_DeltaTime           ->GetYaxis()->SetTitle("Counts");
}

void MichelWfmReco::beginRun(art::Run & r)
{
  fTrigFiltAlg.loadXMLDatabaseTable( r.run() ); 
}

void MichelWfmReco::beginSubRun(art::SubRun & sr)
{
}

void MichelWfmReco::endJob()
{
}

void MichelWfmReco::endRun(art::Run & r)
{
}

void MichelWfmReco::endSubRun(art::SubRun & sr)
{
}

void MichelWfmReco::reconfigure(fhicl::ParameterSet const & p)
{
  // Pass name of TriggerUtility
  fTriggerUtility         = p.get< std::string >("TriggerUtility","FragmentToDigit");
  bUseTriggerFilter       = p.get< bool >("UseTriggerFilter","false");
  bVerbose                = p.get< bool >("Verbosity","false");
  V1751PostPercent        = p.get< float >("V1751PostPercent",0.7);
  
}

void MichelWfmReco::respondToCloseInputFile(art::FileBlock const & fb)
{
}

void MichelWfmReco::respondToCloseOutputFiles(art::FileBlock const & fb)
{
}

void MichelWfmReco::respondToOpenInputFile(art::FileBlock const & fb)
{
}

void MichelWfmReco::respondToOpenOutputFiles(art::FileBlock const & fb)
{
}

DEFINE_ART_MODULE(MichelWfmReco)
