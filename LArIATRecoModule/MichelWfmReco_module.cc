////////////////////////////////////////////////////////////////////////
// Class:       MichelWfmReco
// Module Type: producer
// File:        MichelWfmReco_module.cc
//
// This module is used to perform some ID and reconstruction of PMT
// waveforms from stopping/decaying muons (primarily in the Michel 
// trigger sample).
//
// Eventually it may be used to create a new data product related to 
// Michel events, but for now, it does not add to the data file (despite
// being a producer).
//
// Authors: William Foreman, wforeman@uchicago.edu
//
// Generated at Wed Jul 15 13:09:43 2015 by William Foreman using artmod
// from cetpkgsupport v1_08_06.
//
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDProducer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "art/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"
#include "art/Framework/Services/Optional/TFileService.h"
#include "art/Framework/Services/Registry/ServiceHandle.h"
#include "art/Framework/Services/Optional/TFileDirectory.h"

//C++ Includes
#include <iostream>
#include <fstream>
#include <vector>
#include <memory>
#include <utility>

//ROOT Includes
#include <TF1.h>
#include <TH1F.h>
#include <TH1I.h>
#include <TH2F.h>
#include <TH3F.h>
#include <TTree.h>

// LArSoft Includes
#include "lardata/Utilities/AssociationUtil.h"
#include "lardata/RawData/TriggerData.h"
#include "lardata/RecoBase/Track.h"
#include "lardata/AnalysisBase/Calorimetry.h"

//LAriatSoft Includes
#include "RawDataUtilities/TriggerDigitUtility.h"
#include "LArIATRecoAlg/OpHitBuilderAlg.h"
#include "LArIATRecoAlg/TriggerFilterAlg.h"
#include "Utilities/DatabaseUtilityT1034.h"


class MichelWfmReco;

class MichelWfmReco : public art::EDProducer {
public:
  explicit MichelWfmReco(fhicl::ParameterSet const & pset);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  MichelWfmReco(MichelWfmReco const &) = delete;
  MichelWfmReco(MichelWfmReco &&) = delete;
  MichelWfmReco & operator = (MichelWfmReco const &) = delete;
  MichelWfmReco & operator = (MichelWfmReco &&) = delete;

  // Required functions.
  void produce(art::Event & e) override;

  // Selected optional functions.
  void beginJob() override;
  void beginRun(art::Run & r) override;
  void beginSubRun(art::SubRun & sr) override;
  void endJob() override;
  void endRun(art::Run & r) override;
  void endSubRun(art::SubRun & sr) override;
  void reconfigure(fhicl::ParameterSet const & pset) override;
  void respondToCloseInputFile(art::FileBlock const & fb) override;
  void respondToCloseOutputFiles(art::FileBlock const & fb) override;
  void respondToOpenInputFile(art::FileBlock const & fb) override;
  void respondToOpenOutputFiles(art::FileBlock const & fb) override;
  
  // Custom functions
  bool IsPointInFiducialVolume(TVector3);

private:

  // Name of the module producing the triggers
  std::string fTriggerUtility;

  // Tunable parameters from fcl
  bool            bUseTriggerFilter;
  bool            bUseTrackInformation;
  bool            bVerbose;
  std::string     fDAQModule;
  std::string     fTrackModule;
  std::string     fTrackCalModule;
  std::string     fInstanceName;
  double          fTimestampCut;
  short           fGateDelay;
  short           fDtIntegralCut;
  short           fBaselineWindowLength;
  short           fPromptWindowLength;
  short           fFullWindowLength;
  short           fPrePulseBaselineFit;
  double          fFiducialMargin_X;
  double          fFiducialMargin_Y;
  double          fFiducialMargin_Z; 

  // Alg objects
  OpHitBuilderAlg   fOpHitBuilderAlg; 
  TriggerFilterAlg  fTrigFiltAlg;

  // Variables/vectors
  int                   iEvent;
  bool                  GotETL;
  bool                  flag;
  std::vector<short>    ETL_waveform;
  short                 PostPercentMark;
  int                   NSamples;
  std::vector<TVector3> TrackVertex;
  std::vector<TVector3> TrackEnd;
  int                   MuTrackIndex;
  TVector3              MuCandidateTrackVertex;
  TVector3              MuCandidateTrackEnd;
  TVector3              region_centerpoint;
  double                region_radius;
  std::vector<double>   TrackEnergy;
  std::vector<double>   hit_info;

  // Histograms
  TH1I* h_NumOpHits;
  TH2I* h_NumOpHits_vs_NumTracks;
  TH1I* h_NumOpHits_beam;
  TH1I* h_NumOpHits_offbeam;
  TH1F* h_DeltaTime_chargeCut;
  TH1F* h_DeltaTime_stoppingMu;
  TH1F* h_DeltaTime_chargeCut_beam;

  TH1F* h_Amplitude;
  TH1F* h_HitTime;
  TH1F* h_HitAmplitude;
  TH1F* h_Charge100ns;
  TH1F* h_Charge100ns_populationCut;
  TH1F* h_Charge100ns_populationCut_DtCut;
  TH1F* h_Charge100ns_stoppingMu;
  TH1F* h_Charge100ns_region;
  TH1F* h_ChargeFull_populationCut;
  TH1F* h_ChargeFull_populationCut_DtCut;
  TH1F* h_ChargeFull_region;
  TH2F* h_Amplitude_vs_Charge100ns;
  TH1F* h_TrackVertex_x;
  TH1F* h_TrackVertex_y;
  TH1F* h_TrackVertex_z;
  //TH3F* h_TrackVertex;
  TH1F* h_TrackEnd_x;
  TH1F* h_TrackEnd_y;
  TH1F* h_TrackEnd_z;
  //TH3F* h_TrackEnd;
  TH2F* h_TrackNode_zx;
  TH2F* h_TrackNode_zy;
  TH2I* h_InFiducialVolume;
  TH1F* h_SecondTrackOffset;
  TH1F* h_AverageWaveform;

  // Variables for Tree
  Double_t    WaveformBaseline;
  Double_t    WaveformBaselineRMS;
  Double_t    Timestamp;
  Int_t       IsBeamEvent;
  Int_t       IsCleanBeamWaveform;
  Double_t    DeltaTime;
  Int_t       NumHits;
  Double_t    PrepulseBaseline;
  Double_t    PrepulseRMS;
  Double_t    PrepulseNorm;
  Double_t    PrepulseTau;
  Double_t    Amplitude;
  Double_t    Charge_100ns; 
  Double_t    Charge_Full;
  Int_t       IsInBGPopulation; 
  Int_t       NumTracks;
  Int_t       IsSingleStoppingTrack;
  Double_t    StoppingTrackZenithAngle;
  Double_t    MuTrackVertex_x;
  Double_t    MuTrackVertex_y;
  Double_t    MuTrackVertex_z;
  Double_t    MuTrackEnd_x;
  Double_t    MuTrackEnd_y;
  Double_t    MuTrackEnd_z;
  Double_t    MuTrackLength;
  Double_t    MuTrackEnergy;
  Int_t       MuAmplitude;
  Double_t    MuCharge_100ns;
  
  // TTree info
  TTree* MichelDataTree;
  TBranch* b_Timestamp;
  TBranch* b_IsBeamEvent;
  TBranch* b_IsCleanBeamWaveform;
  TBranch* b_WaveformBaseline;
  TBranch* b_WaveformBaselineRMS;
  TBranch* b_NumHits;
  TBranch* b_DeltaTime;
  TBranch* b_PrepulseBaseline;
  TBranch* b_PrepulseRMS;
  TBranch* b_PrepulseNorm;
  TBranch* b_PrepulseTau;
  TBranch* b_Amplitude;
  TBranch* b_Charge_100ns;
  TBranch* b_Charge_Full;
  TBranch* b_IsInBGPopulation;
  TBranch* b_NumTracks;
  TBranch* b_IsSingleStoppingTrack;
  TBranch* b_StoppingTrackZenithAngle;
  TBranch* b_MuTrackVertex_x;
  TBranch* b_MuTrackVertex_y;
  TBranch* b_MuTrackVertex_z;
  TBranch* b_MuTrackEnd_x;
  TBranch* b_MuTrackEnd_y;
  TBranch* b_MuTrackEnd_z;
  TBranch* b_MuTrackLength;
  TBranch* b_MuTrackEnergy;
  TBranch* b_MuAmplitude;
  TBranch* b_MuCharge_100ns;

};



MichelWfmReco::MichelWfmReco(fhicl::ParameterSet const & pset)
: fOpHitBuilderAlg(pset), fTrigFiltAlg(pset)
{

  // Configures the ROOT histograms
  this->reconfigure(pset);
  
  // Produces the LArSoft object to be outputted
  // (none for now!) 
 
  // TO DO: make this a fcl parameter 
  region_centerpoint.SetXYZ(23.5,0.,45.);
  region_radius = 10.;
  

}


void MichelWfmReco::produce(art::Event & e)
{
  iEvent++;

  // Initialize variables and vectors
  Timestamp         = -9.; 
  IsCleanBeamWaveform = -9;
  IsBeamEvent       = -9;
  NumHits           = -9;
  NumTracks         = -9;
  IsSingleStoppingTrack   = 0;
  StoppingTrackZenithAngle = -1;
  MuTrackVertex_x   = -99.;
  MuTrackVertex_y   = -99.;
  MuTrackVertex_z   = -99.;
  MuTrackEnd_x      = -99.;
  MuTrackEnd_y      = -99.;
  MuTrackEnd_z      = -99.;
  MuTrackLength     = -99.;
  MuTrackEnergy     = -99.;
  MuAmplitude       = -99;
  MuCharge_100ns    = -999.;
  PrepulseBaseline  = -99.;
  PrepulseRMS       = -9.;
  PrepulseNorm      = 999.;
  PrepulseTau       = -99.;
  DeltaTime         = -99.;
  Amplitude         = -99.;
  Charge_100ns      = -9999.;
  Charge_Full       = -99999.;
  IsInBGPopulation  = -9.;
  WaveformBaseline  = -99.;
  WaveformBaselineRMS = -9.;
  TrackVertex.clear();
  TrackEnd.clear();
  TrackEnergy.clear();
  
  
  // Filter for the MICHEL trigger pattern (note that for some runs, particularly for 
  // those with the optimized Michel trigger setup, unfortunately the trigger inputs 
  // were not being saved and thus the filter won't work).
  /*
  bool isMichel = 1; 
  if (bUseTriggerFilter){
    std::string myFilter = "+MICHEL";
    isMichel = fTrigFiltAlg.doesTriggerPassFilter( thisTrigger, myFilter ); 
  } else {
    isMichel = 1;
  }
  if ( !isMichel ) return;
  */

  // Get the OpDetPulses; skip event if empty
  art::Handle< std::vector< raw::OpDetPulse >> WaveformHandle;
  e.getByLabel(fDAQModule,fInstanceName,WaveformHandle);
  if( (int)WaveformHandle->size() == 0 ) {
    if(bVerbose) std::cout<<"No optical detector data found -- skipping the event\n";
    return;
  } else {
    // If not empty, store ETL waveform
    GotETL = false;
    for( int ipulse = 0; ipulse < (int)WaveformHandle->size(); ipulse++){
      art::Ptr< raw::OpDetPulse > ThePulsePtr(WaveformHandle,ipulse);
      raw::OpDetPulse ThePulse = *ThePulsePtr;
      if( ThePulse.OpChannel() == 1) {
        ETL_waveform = ThePulse.Waveform();
        NSamples = ETL_waveform.size();
        Timestamp = (double(ThePulse.PMTFrame())*8.)/1.0e09;
        PostPercentMark = short(ThePulse.FirstSample()); 
        GotETL = true;
        
        if(bVerbose){
          std::cout<<"ETL pulse recorded."<<std::endl;
          std::cout<<"  Nsamples = "<<NSamples<<std::endl;
          std::cout<<"  PMTFrame = "<<ThePulse.PMTFrame()<<std::endl;
          std::cout<<"  FirstSample = "<<ThePulse.FirstSample()<<std::endl;
          std::cout<<"  Timestamp = "<<Timestamp<<" sec"<<std::endl;
        }

        // Is clean beam waveform? (for testing out function)
        //IsCleanBeamWaveform = fOpHitBuilderAlg.IsCleanBeamWaveform(ThePulse);
      }
    }
  }
  // If we somehow didn't get the ETL, skip the event
  if( !GotETL ) return;

  // Classify as beam or non-beam event
  if ( (Timestamp >= 0)&&(Timestamp < fTimestampCut)){ IsBeamEvent = 1;}
  else if (Timestamp >= fTimestampCut) { IsBeamEvent = 0;}

  //  Get waveform baseline/RMS
  std::vector<double> tmp = fOpHitBuilderAlg.GetBaselineAndRMS(ETL_waveform,0,fBaselineWindowLength);
  WaveformBaseline = tmp[0];
  WaveformBaselineRMS = tmp[1];
  if(bVerbose) std::cout<<"Baseline: "<<WaveformBaseline<<"  RMS: "<<WaveformBaselineRMS<<"\n";
  
  // Perform hit-finding/filtering
  std::vector<short> hit_times = fOpHitBuilderAlg.GetHits(ETL_waveform);
  NumHits = hit_times.size();
  if(bVerbose) {
    std::cout << "Performing optical hitfinding...\n"; 
    std::cout << "We found "<<NumHits<<" hits\n";
    for (int i=0; i<NumHits; i++) std::cout<<"   "<<i<<"    t = "<<hit_times[i]<<"\n";
  }

  // Measure time difference
  if(NumHits == 2){
    DeltaTime = double(hit_times[1]) - double(hit_times[0]);
    if(bVerbose) std::cout<<"    DeltaT = "<<DeltaTime<<std::endl;
  }
  
  // Get amplitude info for single-hit events (to get
  // idea of trigger sensitivity
  if(NumHits == 1){
    h_HitTime       ->Fill(hit_times[0]);
    h_HitAmplitude  ->Fill(fOpHitBuilderAlg.GetHitAmplitude(ETL_waveform,hit_times[0]));
    // Decide if this is a "clean beam waveform"
    if( fabs(hit_times[0]-PostPercentMark) < 0.01*double(NSamples)){
      IsCleanBeamWaveform = 1;
    }
  }
 
  

  if(bUseTrackInformation){ 
    
    // Get the tracks and their associated energy
    art::Handle< std::vector< recob::Track >> TrackHandle;
    e.getByLabel(fTrackModule,TrackHandle);
  
    // Fill tracklist... (not used right now)
    //std::vector< art::Ptr< recob::Track >> tracklist; 
    //if (e.getByLabel(fTrackModule,TrackHandle))
    //   {art::fill_ptr_vector(tracklist, trackListHandle);}

    NumTracks = (int)TrackHandle->size();

    if(bVerbose) std::cout<<"Number of tracks: "<<NumTracks<<"\n";
  
    art::FindManyP<anab::Calorimetry> fmcal(TrackHandle, e, fTrackCalModule);
  
    // Loop through the track list and store their properties
    for( int track_index = 0; track_index < NumTracks; track_index++){
  
      // Get the recob::Track object and record its endpoint/vertex
      art::Ptr< recob::Track > TheTrackPtr(TrackHandle,track_index);
      recob::Track TheTrack = *TheTrackPtr;
      TrackEnd.push_back(TheTrack.End());
      TrackVertex.push_back(TheTrack.Vertex());
      
      /*
      std::cout<<"  track "<<track_index<<" vertex("
      << TheTrack.Vertex().X() <<"," 
      << TheTrack.Vertex().Y() << "," 
      << TheTrack.Vertex().Z() << ")->InFiducial()="
      << IsPointInFiducialVolume(TheTrack.Vertex())
      << "   end("
      << TheTrack.End().X() <<"," 
      << TheTrack.End().Y() << "," 
      << TheTrack.End().Z() << ")->InFiducial()="
      << IsPointInFiducialVolume(TheTrack.End()) << std::endl;
      */

      h_InFiducialVolume->Fill(
        IsPointInFiducialVolume(TheTrack.Vertex()),
        IsPointInFiducialVolume(TheTrack.End()));

      h_TrackNode_zx->Fill((float)TheTrack.Vertex().Z(),(float)TheTrack.Vertex().X());
      h_TrackNode_zx->Fill((float)TheTrack.End().Z(),(float)TheTrack.End().X());
      h_TrackNode_zy->Fill((float)TheTrack.Vertex().Z(),(float)TheTrack.Vertex().Y());
      h_TrackNode_zy->Fill((float)TheTrack.End().Z(),(float)TheTrack.End().Y());
      

      // Get measured track energy (if possible)
      if( fmcal.isValid() ){
        std::vector<art::Ptr<anab::Calorimetry> > calos = fmcal.at(track_index);
        // calos[0] is from induction plane
        // calos[1] is from collection plane
        TrackEnergy.push_back(calos[1]->KineticEnergy());
        //std::cout<<"  KE = "<<calos[1]->KineticEnergy()<<std::endl; 
      } else {
        //std::cout<<"  KE = undefined"<<std::endl;
      }
    
    }  

    // --------------------------------------
    // Higher-level track filtering:
    
    // Require no more than two tracks in the event:
    if( NumTracks <= 2 ) {
      
      flag = false;
  
      // Cycle through tracks
      for( int i=0; i<NumTracks; i++){
          
        // Since we don't want to blindly trust that the endpoint and 
        // vertex have been assigned correctly, let's say whichever 
        // has a higher Y-value is the vertex (pretty reasonable 
        // assumption for cosmic muons).
        TVector3 vertex;
        TVector3 end;
        if( TrackVertex[i].Y() > TrackEnd[i].Y()  ) { 
          vertex  = TrackVertex[i]; 
          end     = TrackEnd[i];
        } else {
          vertex  = TrackEnd[i];
          end     = TrackVertex[i];
        }
      
        // Fill histograms
        h_TrackEnd_x->Fill((float)end.X());
        h_TrackEnd_y->Fill((float)end.Y());
        h_TrackEnd_z->Fill((float)end.Z());
        //h_TrackEnd  ->Fill(..,..,..); 
        h_TrackVertex_x->Fill((float)vertex.X());
        h_TrackVertex_y->Fill((float)vertex.Y());
        h_TrackVertex_z->Fill((float)vertex.Z());
        //h_TrackVertex  ->Fill(..,..,..);
  
        // Check that vertex is outside fiducial volume and endpoint is 
        // inside fiducial volume.
        if( (!flag) && (IsPointInFiducialVolume(end)) && (!IsPointInFiducialVolume(vertex))) {
          
          // If there was already a stopping track, this disqualifies 
          // the event.
          if( IsSingleStoppingTrack ){
            IsSingleStoppingTrack = 0;
            flag = true;
            MuTrackVertex_x   = -99.;
            MuTrackVertex_y   = -99.;
            MuTrackVertex_z   = -99.;
            MuTrackEnd_x      = -99.;
            MuTrackEnd_y      = -99.;
            MuTrackEnd_z      = -99.;
            MuTrackLength     = -9.;
            MuTrackEnergy     = -9.;
            StoppingTrackZenithAngle = -9.;
          } else { 
            MuTrackIndex = i;
            MuCandidateTrackVertex  = vertex;
            MuCandidateTrackEnd     = end;
            IsSingleStoppingTrack = 1;
            MuTrackVertex_x = vertex.X();
            MuTrackVertex_y = vertex.Y();
            MuTrackVertex_z = vertex.Z();
            MuTrackEnd_x    = end.X();
            MuTrackEnd_y    = end.Y();
            MuTrackEnd_z    = end.Z();
            MuTrackLength   = (vertex-end).Mag();
            MuTrackEnergy   = TrackEnergy[i];
  
            TVector3 vert(0.,1.,0.);
            TVector3 tmp = (vertex-end);
            StoppingTrackZenithAngle = tmp.Angle(vert);
          }
        
        }
      } 
    }
  
    // If there was a stopping "muon" and a second track, check
    // to see if either of its endpoints is close to muon endpoint.
    if( IsSingleStoppingTrack && NumTracks == 2 ) {
      for( int i=0; i<NumTracks; i++){
        if( i != MuTrackIndex ){
          double proximity = std::min( 
            (TrackVertex[i] - MuCandidateTrackEnd).Mag(),
            (TrackEnd[i]   - MuCandidateTrackEnd).Mag());
          h_SecondTrackOffset->Fill(proximity);
        }
      }  
    }

    // If there was 1 stopping track and 1 or 2 Optical hits, 
    if( (IsSingleStoppingTrack) && (NumHits > 0)&&(NumHits <= 2) ) {
      hit_info = fOpHitBuilderAlg.GetHitInfo(ETL_waveform, hit_times[0], fPromptWindowLength);
      MuAmplitude = hit_info[0];
      MuCharge_100ns = hit_info[1];
    }
  
  if(bVerbose) std::cout<<"IsSingleStoppingTrack? "<<IsSingleStoppingTrack<<std::endl;


  } //endif bUseTrackInformation

    

  // Fill NumOpHits histo (beam vs. offbeam)
  h_NumOpHits ->Fill(NumHits);
  h_NumOpHits_vs_NumTracks->Fill(NumHits,NumTracks);
  if(IsBeamEvent)   h_NumOpHits_beam    ->Fill(NumHits);
  if(!IsBeamEvent)  h_NumOpHits_offbeam ->Fill(NumHits);
  
        
  // Only proceed to calculate charge/amplitude information if 
  // the pulses are far enough apart such that the tail of the
  // first does not contiminate the second (fcl setting, default 0)
  if (DeltaTime > fDtIntegralCut){
      
    // Integral/amplitude of Michel pulse
    hit_info = fOpHitBuilderAlg.GetHitInfo(ETL_waveform, hit_times[1], fPromptWindowLength);
    Amplitude     = hit_info[0];
    Charge_100ns  = hit_info[1];
    if(bVerbose) std::cout<<"    Amplitude = "<<Amplitude<<std::endl;
    if(bVerbose) std::cout<<"    Charge prompt = "<<Charge_100ns<<std::endl;
    
    // Integral of Michel candidate pulse (full)
    // (To do: extract both prompt and full integral from single
    // function call to minimize redundant calculations)
    hit_info = fOpHitBuilderAlg.GetHitInfo(ETL_waveform, hit_times[1], fFullWindowLength);
    Charge_Full   = hit_info[1];
    if(bVerbose) std::cout<<"    Charge full = "<<Charge_Full<<" \n";
    
    // Get information from the prepulse fit
    PrepulseBaseline  = fOpHitBuilderAlg.prepulse_baseline;
    PrepulseRMS       = fOpHitBuilderAlg.prepulse_rms;
    PrepulseNorm      = fOpHitBuilderAlg.fit_norm;
    PrepulseTau       = fOpHitBuilderAlg.fit_tau;
  
    // Line in amplitude (mV,x) vs. charge (ADC,y) space to cut out background. 
    TF1 f_PopulationCut("f_PopulationCut","48.04*x + 404.9",0.,150.);
    if( Charge_100ns > f_PopulationCut.Eval(Amplitude)){ IsInBGPopulation = 0;}
    else{ IsInBGPopulation = 1; }
  
  }

  
  
  // Event quality control:
  // Require 2 hits (one before PostPercent, one within 1% of PostPercent) 
  if( (NumHits == 2) && (hit_times[0] < hit_times[1]-fGateDelay) && ( abs(hit_times[1]-PostPercentMark) <= 0.01*NSamples) && (!IsBeamEvent)){
    
    if(bVerbose) std::cout << "--> passes Michel trigger cut (off-beam) \n";

    h_Amplitude->Fill(Amplitude);
    h_Charge100ns->Fill(Charge_100ns); 
    h_Amplitude_vs_Charge100ns->Fill(Amplitude,Charge_100ns);
    
    if( Charge_100ns > 1600. ) h_DeltaTime_chargeCut ->Fill(DeltaTime);

    if( !IsInBGPopulation ) {
      h_Charge100ns_populationCut->Fill(Charge_100ns);
      h_ChargeFull_populationCut->Fill(Charge_Full);
      
      if( DeltaTime > 3000. ){
        h_Charge100ns_populationCut_DtCut->Fill(Charge_100ns);
        h_ChargeFull_populationCut_DtCut->Fill(Charge_Full);
      } 
    }
  
    if( IsSingleStoppingTrack ) {
      h_Charge100ns_stoppingMu->Fill(Charge_100ns);
      h_DeltaTime_stoppingMu->Fill(DeltaTime);
      if( (MuCandidateTrackEnd-region_centerpoint).Mag() <= region_radius) {
        h_Charge100ns_region->Fill(Charge_100ns);
        h_ChargeFull_region->Fill(Charge_Full);
      }
    }
    
  
  } // end quality cut condition (off-beam)


  // Also look at beam events
  if( (NumHits == 2) && ( abs(hit_times[0]-PostPercentMark) <= 0.01*NSamples) && (IsBeamEvent) ){
    if( Charge_100ns > 1600 ) h_DeltaTime_chargeCut_beam->Fill(DeltaTime);
  }

  MichelDataTree->Fill();
  
  // Add space in printout to separate events (for easier debugging)
  std::cout<<std::endl;
}


void MichelWfmReco::beginJob()
{
  // Opens up the file service to read information from the ROOT file input
  art::ServiceHandle<art::TFileService> tfs;

  MichelDataTree        = tfs->make<TTree>("MichelDataTree","MichelDataTree");
  b_Timestamp           = MichelDataTree->Branch("Timestamp",&Timestamp,"Timestamp/D");
  b_IsBeamEvent         = MichelDataTree->Branch("IsBeamEvent",&IsBeamEvent,"IsBeamEvent/I");
  b_IsCleanBeamWaveform = MichelDataTree->Branch("IsCleanBeamWaveform",&IsCleanBeamWaveform,"IsCleanBeamWaveform/I");
  b_WaveformBaseline    = MichelDataTree->Branch("WaveformBaseline",&WaveformBaseline,"WaveformBaseline/D");
  b_WaveformBaselineRMS = MichelDataTree->Branch("WaveformBaselineRMS",&WaveformBaselineRMS,"WaveformBaselineRMS/D");
  b_NumHits             = MichelDataTree->Branch("NumHits",&NumHits,"NumHits/I");
  b_DeltaTime           = MichelDataTree->Branch("DeltaTime",&DeltaTime,"DeltaTime/D");
  b_PrepulseBaseline           = MichelDataTree->Branch("PrepulseBaseline",&PrepulseBaseline,"PrepulseBaseline/D");
  b_PrepulseRMS           = MichelDataTree->Branch("PrepulseRMS",&PrepulseRMS,"PrepulseRMS/D");
  b_PrepulseNorm           = MichelDataTree->Branch("PrepulseNorm",&PrepulseNorm,"PrepulseNorm/D");
  b_PrepulseTau           = MichelDataTree->Branch("PrepulseTau",&PrepulseTau,"PrepulseTau/D");
  b_Amplitude           = MichelDataTree->Branch("Amplitude",&Amplitude,"Amplitude/D");
  b_Charge_100ns        = MichelDataTree->Branch("Charge_100ns",&Charge_100ns,"Charge_100ns/D");
  b_Charge_Full         = MichelDataTree->Branch("Charge_Full",&Charge_Full,"Charge_Full/D");
  b_IsInBGPopulation    = MichelDataTree->Branch("IsInBGPopulation",&IsInBGPopulation,"IsInBGPopulation/I");
  b_NumTracks           = MichelDataTree->Branch("NumTracks",&NumTracks,"NumTracks/I");
  b_IsSingleStoppingTrack     = MichelDataTree->Branch("IsSingleStoppingTrack",&IsSingleStoppingTrack,"IsStoppingTrack/I");
  b_StoppingTrackZenithAngle = MichelDataTree->Branch("StoppingTrackZenithAngle",&StoppingTrackZenithAngle,"StoppingTrackZenithAngle/D");
  b_MuTrackVertex_x     = MichelDataTree->Branch("MuTrackVertex_x",&MuTrackVertex_x,"MuTrackVertex_x/D");
  b_MuTrackVertex_y     = MichelDataTree->Branch("MuTrackVertex_y",&MuTrackVertex_y,"MuTrackVertex_y/D");
  b_MuTrackVertex_z     = MichelDataTree->Branch("MuTrackVertex_z",&MuTrackVertex_z,"MuTrackVertex_z/D");
  b_MuTrackEnd_x        = MichelDataTree->Branch("MuTrackEnd_x",&MuTrackEnd_x,"MuTrackEnd_x/D");
  b_MuTrackEnd_y        = MichelDataTree->Branch("MuTrackEnd_y",&MuTrackEnd_y,"MuTrackEnd_y/D");
  b_MuTrackEnd_z        = MichelDataTree->Branch("MuTrackEnd_z",&MuTrackEnd_z,"MuTrackEnd_z/D");
  b_MuTrackLength        = MichelDataTree->Branch("MuTrackLength",&MuTrackLength,"MuTrackLength/D");
  b_MuTrackEnergy        = MichelDataTree->Branch("MuTrackEnergy",&MuTrackEnergy,"MuTrackEnergy/D");
  
  h_NumOpHits           = tfs->make<TH1I>("OpHitsPerEvent", "Optical hits per event", 10, 0, 10);
  h_NumOpHits           ->GetXaxis()->SetTitle("Num hits");
  h_NumOpHits           ->GetYaxis()->SetTitle("Counts");
  h_NumOpHits_beam      = tfs->make<TH1I>("OpHitsPerEvent_beam", "Optical hits per event (beam)",  10, 0, 10);
  h_NumOpHits_beam      ->GetXaxis()->SetTitle("Num hits");
  h_NumOpHits_beam      ->GetYaxis()->SetTitle("Counts");
  h_NumOpHits_offbeam   = tfs->make<TH1I>("OpHitsPerEvent_offbeam", "Optical hits per event (off-beam)", 10, 0, 10);
  h_NumOpHits_offbeam   ->GetXaxis()->SetTitle("Num hits");
  h_NumOpHits_offbeam   ->GetYaxis()->SetTitle("Counts");
  h_NumOpHits_vs_NumTracks = tfs->make<TH2I>("NumOpHits_vs_NumTracks", "Optical hits vs. number of tracks in event", 10, 0,10, 30,0,30);
  h_NumOpHits_vs_NumTracks ->GetXaxis()->SetTitle("Num optical hits");
  h_NumOpHits_vs_NumTracks ->GetYaxis()->SetTitle("Num tracks");
  h_NumOpHits_vs_NumTracks ->SetOption("colz");

  h_DeltaTime_chargeCut = tfs->make<TH1F>("DeltaTime_chargeCut", "#Delta t (prompt integral > 1600ADC)", 700,0., 7000.);
  h_DeltaTime_chargeCut ->GetXaxis()->SetTitle("ns");
  h_DeltaTime_chargeCut ->GetYaxis()->SetTitle("Counts");
  
  h_DeltaTime_stoppingMu = tfs->make<TH1F>("DeltaTime_stoppingMu", "#Delta t (1 stopping track, prompt integral > 1600ADC)", 700,0., 7000.);
  h_DeltaTime_stoppingMu ->GetXaxis()->SetTitle("ns");
  h_DeltaTime_stoppingMu ->GetYaxis()->SetTitle("Counts");

  h_DeltaTime_chargeCut_beam = tfs->make<TH1F>("DeltaTime_chargeCut_beam","#Delta t (prompt integral > 1600ADC) for Michel-like beam event",700,0.,7000.);
  h_DeltaTime_chargeCut_beam    ->GetXaxis()->SetTitle("ns");
  h_DeltaTime_chargeCut_beam    ->GetYaxis()->SetTitle("Counts");

  h_HitTime                 = tfs->make<TH1F>("HitTime", "Hit time in single-hit events",1000,0.,30000.);
  h_HitAmplitude           = tfs->make<TH1F>("HitAmplitude", "Amplitude of found hit in single-hit events", 300,   0., 300.);
  h_HitAmplitude           ->GetXaxis()->SetTitle("Amplitude of Michel PMT pulse [mV]");
  h_HitAmplitude           ->GetYaxis()->SetTitle("Counts");
  h_Amplitude           = tfs->make<TH1F>("Amplitude", "Amplitude", 500,   0., 100.);
  h_Amplitude           ->GetXaxis()->SetTitle("Amplitude of Michel PMT pulse [mV]");
  h_Amplitude           ->GetYaxis()->SetTitle("Counts");
  
  h_Charge100ns          = tfs->make<TH1F>("Charge100ns", "Prompt light integral (100ns)",  240,  0., 12000.);
  h_Charge100ns          ->GetXaxis()->SetTitle("Integrated prompt light, 100ns [ADC]");
  h_Charge100ns          ->GetYaxis()->SetTitle("Counts");

  h_Charge100ns_populationCut          = tfs->make<TH1F>("Charge100ns_populationCut", "Prompt light integral (100ns), BG population cut",  240,  0., 12000.);
  h_Charge100ns_populationCut          ->GetXaxis()->SetTitle("Integrated prompt light, 100ns [ADC]");
  h_Charge100ns_populationCut          ->GetYaxis()->SetTitle("Counts");
 
  h_Charge100ns_populationCut_DtCut    = tfs->make<TH1F>("Charge100ns_populationCut_DtCut", "Prompt light integral (100ns), BG population cut, #Delta t > 3us",  240,  0., 12000.);
  h_Charge100ns_populationCut_DtCut    ->GetXaxis()->SetTitle("Integrated prompt light, 100ns [ADC]");
  h_Charge100ns_populationCut_DtCut    ->GetYaxis()->SetTitle("Counts");
  
  h_Charge100ns_stoppingMu = tfs->make<TH1F>("Charge100ns_stoppingMu","Prompt light integral (100ns) in events with 1 stopping track",240,0.,12000.);
  h_Charge100ns_stoppingMu ->GetXaxis()->SetTitle("Integrated prompt light, 100ns [ADC]");
  h_Charge100ns_stoppingMu ->GetYaxis()->SetTitle("Counts");

  h_Charge100ns_region    = tfs->make<TH1F>("Charge100ns_region","Prompt light integral (100ns), limited region",240,0.,12000.);
  h_Charge100ns_region    ->GetXaxis()->SetTitle("Integrated prompt light, 100ns [ADC]");
  h_Charge100ns_region    ->GetYaxis()->SetTitle("Counts");
  
  h_ChargeFull_populationCut          = tfs->make<TH1F>("ChargeFull_populationCut", "Full light integral (7us), BG population cut",  300,  0., 30000.);
  h_ChargeFull_populationCut          ->GetXaxis()->SetTitle("Integrated light, 7us [ADC]");
  h_ChargeFull_populationCut          ->GetYaxis()->SetTitle("Counts");
  
  h_ChargeFull_populationCut_DtCut    = tfs->make<TH1F>("ChargeFull_populationCut_DtCut", "Full light integral (7us), BG population cut, #Delta t > 3us",  300,  0., 30000.);
  h_ChargeFull_populationCut_DtCut    ->GetXaxis()->SetTitle("Integrated light, 7us [ADC]");
  h_ChargeFull_populationCut_DtCut    ->GetYaxis()->SetTitle("Counts");
  
  h_ChargeFull_region    = tfs->make<TH1F>("ChargeFull_region","Full light integral (7us), limited region",300,0.,30000.);
  h_ChargeFull_region    ->GetXaxis()->SetTitle("Integrated light, 7us [ADC]");
  h_ChargeFull_region    ->GetYaxis()->SetTitle("Counts");

  h_Amplitude_vs_Charge100ns = tfs->make<TH2F>("Amplitude_vs_Charge100ns","Pulse amplitude vs. prompt charge (100ns);mV;ADC",100,0.,100.,100,0.,12000.);
  h_Amplitude_vs_Charge100ns ->GetXaxis()->SetTitle("Amplitude of Michel-candidate PMT pulse [mV]");
  h_Amplitude_vs_Charge100ns ->GetYaxis()->SetTitle("Integrated prompt light, 100ns [ADC]");
  h_Amplitude_vs_Charge100ns ->SetOption("colz");

  h_TrackNode_zx          = tfs->make<TH2F>("TrackNode_zx","TrackNode_zx",90,0.,90.,47,0.,47.);
  h_TrackNode_zx          ->GetXaxis()->SetTitle("z [cm]");
  h_TrackNode_zx          ->GetYaxis()->SetTitle("x [cm]");
  h_TrackNode_zx          ->SetMarkerStyle(7);
  h_TrackNode_zx          ->SetOption("colz");

  h_TrackNode_zy          = tfs->make<TH2F>("TrackNode_zy","TrackNode_zy",90,0.,90.,40,-20.,20.);
  h_TrackNode_zy          ->GetXaxis()->SetTitle("z [cm]");
  h_TrackNode_zy          ->GetYaxis()->SetTitle("y [cm]");
  h_TrackNode_zy          ->SetMarkerStyle(7);
  h_TrackNode_zy          ->SetOption("colz");

  h_TrackEnd_x            = tfs->make<TH1F>("TrackEnd_x","TrackEnd_x",100,-10.,60.);
  h_TrackEnd_y            = tfs->make<TH1F>("TrackEnd_y","TrackEnd_y",100,-25.,25.);
  h_TrackEnd_z            = tfs->make<TH1F>("TrackEnd_z","TrackEnd_z",100,-10.,100.);
  h_TrackVertex_x         = tfs->make<TH1F>("TrackVertex_x","TrackVertex_x",100,-10.,60.);
  h_TrackVertex_y         = tfs->make<TH1F>("TrackVertex_y","TrackVertex_y",100,-25.,25.);
  h_TrackVertex_z         = tfs->make<TH1F>("TrackVertex_z","TrackVertex_z",100,-10.,100.);
  //h_TrackEnd              = tfs->make<TH3F>("TrackEnd","TrackEnd",  1000,0.,47.,  1000, -20.,20.,  1000, 0.,90.);
  //h_TrackVertex           = tfs->make<TH3F>("TrackVertex","TrackVertex",  1000,0.,47.,  1000, -20.,20.,  1000, 0.,90.);
  
  h_InFiducialVolume      = tfs->make<TH2I>("InFiducialVolume",";Vertex in fiducial volume;End in fiducial volume",2,0.,2.,2,0.,2.);
  h_InFiducialVolume      ->SetOption("colz");
  
  h_SecondTrackOffset     = tfs->make<TH1F>("SecondTrackOffset","Primary / secondary track endpoint offset;cm",100,0.,30.);


  h_AverageWaveform       = tfs->make<TH1F>("AverageWaveform","Average waveform of Michel pulse",
    int(fFullWindowLength)+int(fPrePulseBaselineFit),
    0.,
    double(fFullWindowLength)+double(fPrePulseBaselineFit));
  h_AverageWaveform ->GetXaxis()->SetTitle("ns");
  h_AverageWaveform  ->GetYaxis()->SetTitle("mV");
  
}

void MichelWfmReco::beginRun(art::Run & r)
{
  fTrigFiltAlg.loadXMLDatabaseTable( r.run() );
  iEvent = 0; 
}

void MichelWfmReco::beginSubRun(art::SubRun & sr)
{
}

void MichelWfmReco::endJob()
{

  // Make the average waveforms
  int N_entries = fOpHitBuilderAlg.AverageWaveform_count;
  double integral_prompt = 0.;
  double integral_total = 0.;
  
  if( N_entries > 0 ){
    for( int i = 0; i < (int)fOpHitBuilderAlg.AverageWaveform.size(); i++) {
      double w = fOpHitBuilderAlg.AverageWaveform.at(i) / double(N_entries); 
      h_AverageWaveform->Fill(i,w);
  
      if( (i>fPrePulseBaselineFit)&&(i<fPrePulseBaselineFit+fPromptWindowLength) ) integral_prompt += w;
      if( (i>fPrePulseBaselineFit) ) integral_total += w; 

    }
  
  std::cout<<"================================\n";
  std::cout<<"Average of "<<N_entries<<" waveforms.\n";
  std::cout<<"   prompt ("<<fPromptWindowLength<<" ns): "<<integral_prompt<<std::endl;
  std::cout<<"   total ("<<fFullWindowLength<<" ns): "<<integral_total<<std::endl;
  std::cout<<"   ratio: "<< integral_prompt / integral_total<<std::endl;
  std::cout<<"================================\n";
  
  } 
}

void MichelWfmReco::endRun(art::Run & r)
{
}

void MichelWfmReco::endSubRun(art::SubRun & sr)
{
}

void MichelWfmReco::reconfigure(fhicl::ParameterSet const & pset)
{
  // Pass name of TriggerUtility
  fTriggerUtility         = pset.get< std::string >("TriggerUtility","FragmentToDigit");
  bUseTriggerFilter       = pset.get< bool >("UseTriggerFilter","false");
  bUseTrackInformation    = pset.get< bool >("UseTrackInformation","true");
  bVerbose                = pset.get< bool >("Verbosity","false");
  fDAQModule              = pset.get< std::string >("DAQModule","daq");
  fTrackModule            = pset.get< std::string >("TrackModule","pmtrack");
  fTrackCalModule         = pset.get< std::string >("TrackCalModule","calo");
  fInstanceName           = pset.get< std::string >("InstanceName","");
  fBaselineWindowLength   = pset.get< short >("BaselineWindowLength",1000);
  fPromptWindowLength     = pset.get< short >("PromptWindowLength",100);
  fFullWindowLength       = pset.get< short >("FullWindowLength",7000);
  fPrePulseBaselineFit    = pset.get< short >("PrePulseBaselineFit",300);
  fFiducialMargin_X       = pset.get< double>("FiducialMargin_X",5.);
  fFiducialMargin_Y       = pset.get< double>("FiducialMargin_Y",4.);
  fFiducialMargin_Z       = pset.get< double>("FiducialMargin_Z",5.);
  fTimestampCut           = pset.get< double>("TimestampCut",5.3);
  fGateDelay              = pset.get< short>("GateDelay",300);
  fDtIntegralCut          = pset.get< short>("DtIntegralCut",0);

}

void MichelWfmReco::respondToCloseInputFile(art::FileBlock const & fb)
{
}

void MichelWfmReco::respondToCloseOutputFiles(art::FileBlock const & fb)
{
}

void MichelWfmReco::respondToOpenInputFile(art::FileBlock const & fb)
{
}

void MichelWfmReco::respondToOpenOutputFiles(art::FileBlock const & fb)
{
}

// Function for determining if a point is inside or outside
// predefined fiducial volume
bool MichelWfmReco::IsPointInFiducialVolume(TVector3 p)
{
  double Lx = 47.;
  double Ly = 40.;
  double Lz = 90.;
  if( (fabs(p.Y()       ) > Ly/2. - fFiducialMargin_Y) ||
      (fabs(p.X()-Lx/2. ) > Lx/2. - fFiducialMargin_X) ||
      (fabs(p.Z()-Lz/2. ) > Lz/2. - fFiducialMargin_Z) )
  {
    return false;
  } else {
    return true;
  }
}

DEFINE_ART_MODULE(MichelWfmReco)
