#include "services_lariat.fcl"
#include "lariatfiltermodules.fcl"
#include "LArIATRecoAlg/ophitbuilderalg.fcl"

process_name: OpDetSER

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "OpDetSER_histos.root" }

  Timing:       {}
  RandomNumberGenerator: {} #ART native random number generator
  message:      @local::standard_info
  user:         @local::lariat_services 	     
  scheduler:    { }
}

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  -1        # Number of events to create
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
 }

 
 filters:
 {
 }

 analyzers:
 {
   OpDetSER:
   {
      module_type:      OpDetSER 
      OpHitBuilderAlg:  @local::lariat_ophitbuilderalg
   }
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 reco: [  ]
 ana:  [ OpDetSER ]

 #define the output stream, there could be more than one if using filters 
 stream1:  [  ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [  ]

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [  ana ]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}

{

}

###################################################################################
# Single photoelectron calibration parameters

physics.analyzers.AttemptFit:             "true"
physics.analyzers.Mean_set:               50 
physics.analyzers.Mean_lowerLim:          30 
physics.analyzers.Mean_upperLim:          80 

###################################################################################
