
#include "services_lariat.fcl"
#include "detsimmodules_lariat.fcl"

## You will write whatever name you want this process to be called 
## It is important to note that the same process name cannot be called
## twice on a ROOT file, so you may have to change this 
process_name: SimDigit


services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "simdigit_histo.root" }
  Timing:       {}
  RandomNumberGenerator: {} #ART native random number generator
  @table::lariat_services
  LArSeedService: @local::random_seedservice
}


#This defines the input to your fcl file
#You can start by reading in a ROOT file
#Setting maxEvents = -1 will loop over all events in the file
source:
{
  ### If your module takes a ROOT file as input ###
  module_type: RootInput
  ### If your module created events from scratch ###
  # module_type: EmptyEvent
  
  maxEvents:  -1        # Number of events to create
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{
 
 #################################################################
 ### Here you will define any producer modules you want to run ###
 #################################################################
 producers:
 {
   SimDigit: @local::lariat_SimDigit
   SimTOFDigit: @local::lariat_tofsim

 }
 
 #################################################################
 ### Here you will define any analyzer modules you want to run ###
 #################################################################
 analyzers:
 {

 
 }
 
 ###############################################################
 ### Here you will define any filter modules you want to run ###
 ###############################################################
 filters:
 {

 
 }

 # Define the producer and filter modules for this path, order matters, 
 # filters reject all following items.  see lines starting physics.producers below
 
 reco: [ SimDigit]#, SimTOFDigit ]
 
 ana:[ ]
 
 filt:[ ]

 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [reco, filt] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [ana, stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   ### Assuming you want your events in ROOT output ###
   module_type: RootOutput
   ### Comment this out if you want all events to pass ###
   #SelectEvents: {SelectEvents:[filt]}
   ### Name of the file which will contain the art::events
   fileName:    "SimDigits.root"
   dataTier:    "reconstructed-2d"
   compressionLevel: 1
 }
}


#######################################################################
###   Here, we overwrite ALL module labels and default settings     ###
### for the modules defined above with whatever new values you have ###
#######################################################################
#physics.filters.hitfilter.fminNumberHits: 100
physics.producers.SimDigit.MCBField: .35
