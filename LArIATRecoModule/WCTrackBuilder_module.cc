////////////////////////////////////////////////////////////////////////
// Class:       WCTrackBuilder
// Module Type: producer
// File:        WCTrackBuilder_module.cc
//
// Generated at Fri Oct 16 14:58:18 2015 by Greg Pulliam using artmod
// from cetpkgsupport v1_08_06.
////////////////////////////////////////////////////////////////////////

#ifndef WCTRACKBUILDER_H
#define WCTRACKBUILDER_H

#include "art/Framework/Core/EDProducer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "art/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"
#include <iostream>

#include <vector>
#include "art/Framework/Services/Registry/ServiceHandle.h"
#include "Utilities/AssociationUtil.h"
#include "art/Framework/Services/Optional/TFileService.h"


//ROOT Things
#include <TH1F.h>
#include <TH2F.h>

//LArIAT Things
#include "RawDataUtilities/TriggerDigitUtility.h"
#include "LArIATRecoAlg/WCTrackBuilderAlg_new.h"
#include "LArIATRecoAlg/WCHitFinderAlg.h"
#include "LArIATDataProducts/WCTrack.h"
#include "Utilities/DatabaseUtilityT1034.h"

#include <memory>
#include <utility>
#include <string>

namespace wct{
class WCTrackBuilder;

class WCTrackBuilder : public art::EDProducer {
public:
  explicit WCTrackBuilder(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  WCTrackBuilder(WCTrackBuilder const &) = delete;
  WCTrackBuilder(WCTrackBuilder &&) = delete;
  WCTrackBuilder & operator = (WCTrackBuilder const &) = delete;
  WCTrackBuilder & operator = (WCTrackBuilder &&) = delete;

  // Required functions.
  void produce(art::Event & e) override;

  // Selected optional functions.
  void beginJob() override;
  void beginRun(art::Run & r) override;
  void beginSubRun(art::SubRun & sr) override;
  void endJob() override;
//  void endRun(art::Run & r) override;
//  void endSubRun(art::SubRun & sr) override;
  void reconfigure(fhicl::ParameterSet const & p) override;
//  void respondToCloseInputFile(art::FileBlock const & fb) override;
//  void respondToCloseOutputFiles(art::FileBlock const & fb) override;
//  void respondToOpenInputFile(art::FileBlock const & fb) override;
//  void respondToOpenOutputFiles(art::FileBlock const & fb) override;
  void convertDigitsToVectors( std::vector<raw::AuxDetDigit> the_digits_1,
			       std::vector<raw::AuxDetDigit> the_digits_2,
			       std::vector<raw::AuxDetDigit> the_digits_3,
			       std::vector<raw::AuxDetDigit> the_digits_4,
			       std::vector<int> & tdc_number_vect,
			       std::vector<float> & hit_channel_vect,
			       std::vector<float> & hit_time_bin_vect );

  void createAuxDetStyleVectorsFromHitLists(WCHitList final_track,
					    std::vector<int> & WC_vect,
					    std::vector<float> & hit_wire_vect,
					    std::vector<float> & hit_time_vect);
  void plotTheTrackInformation( std::vector<double> reco_pz_list,
				std::vector<double> y_kink_list,
				std::vector<double> x_dist_list,
				std::vector<double> y_dist_list,
				std::vector<double> z_dist_list,
				std::vector<double> x_face_list,
				std::vector<double> y_face_list,
				std::vector<double> theta_list,
				std::vector<double> phi_list );
				
				
  void MakeSomePlotsFromHits(std::vector<std::vector<WCHitList> > good_hits);
private:

  // Declare member data here.

    //Algorithm object for track building
    WCTrackBuilderAlg_new fWCTrackBuilderAlg;
    std::string       fSlicerSourceLabel;
    WCHitFinderAlg    fWCHitFinderAlg;

    //Hardware constants
    int fNumber_wire_chambers;
    int fNumber_wires_per_tdc;

    //Histograms for plotting
    TH1F* fReco_Pz;
    TH1F* fY_Kink;
    TH1F* fX_Dist;
    TH1F* fY_Dist;
    TH1F* fZ_Dist;
    TH1F* fX_Face_Dist;
    TH1F* fY_Face_Dist;
    TH1F* fTheta_Dist;
    TH1F* fPhi_Dist;
    TH1F* fTrack_Type;
    TH1F* fHitErrorWC1;
    TH1F* fHitErrorWC2;    
    TH1F* fHitErrorWC3;
    TH1F* fHitErrorWC4;
    TH1F* fXWireWC1;
    TH1F* fYWireWC1;    
    TH1F* fXWireWC2;
    TH1F* fYWireWC2; 
    TH1F* fXWireWC3;
    TH1F* fYWireWC3; 
    TH1F* fXWireWC4;
    TH1F* fYWireWC4; 
    TH2F* fHitHeatMapWC1;
    TH2F* fHitHeatMapWC2;
    TH2F* fHitHeatMapWC3;
    TH2F* fHitHeatMapWC4;
    TH2F* fHitsAvailable;
 std::vector<TH1F*> fWireHitsGoodTracks;
 std::vector<TH2F*> fWCMult;
 std::vector<TH1F*> fWireHitsTheTrack;
 std::vector<TH1F*> fBadTrackHits;
 TH2F* fTargetXY;
 TH2F* fPickyTracksTargetXY;
 TH1F* fResSquare;
 TH1F* fReco4pt;
 TH2F* fReco4ptdiff;
 std::vector<TH2F*> fTimingXY;
 std::vector<TH2F*> fRegressionPlots;

            
    //Misc
    bool fVerbose;
    bool fPickyTracks;
    bool fHighYield;
};


WCTrackBuilder::WCTrackBuilder(fhicl::ParameterSet const & p)
 : fWCTrackBuilderAlg(p.get< fhicl::ParameterSet > ("WCTrackBuilderAlg_new")) // these should be initialized
 , fWCHitFinderAlg(p.get< fhicl::ParameterSet >("WCHitFinderAlg"))            // here instead of reconfigure()
{
  // Call appropriate produces<>() functions here.
      this->reconfigure(p);

    // Call appropriate produces<>() functions here.  
    produces<std::vector<ldp::WCTrack> >();
}

void WCTrackBuilder::produce(art::Event & e)
{
  // Implementation of required member function here.
    //Creating the WCTrack Collection
    std::unique_ptr<std::vector<ldp::WCTrack> > WCTrackCol(new std::vector<ldp::WCTrack> );  

    //Retrieving the digits from the sliced event
    art::Handle< std::vector<raw::AuxDetDigit> > AuxDetDigitHandle;
    e.getByLabel(fSlicerSourceLabel,AuxDetDigitHandle);
    
    //Loop through the auxdetdigits and collect those that are from the WCs
    std::vector<raw::AuxDetDigit> WC1Digits;
    std::vector<raw::AuxDetDigit> WC2Digits;
    std::vector<raw::AuxDetDigit> WC3Digits;
    std::vector<raw::AuxDetDigit> WC4Digits;
    for( size_t iDig = 0; iDig < AuxDetDigitHandle->size(); ++iDig ){
      if( AuxDetDigitHandle->at(iDig).AuxDetName() == "MWPC1" )
	WC1Digits.push_back(AuxDetDigitHandle->at(iDig));
      if( AuxDetDigitHandle->at(iDig).AuxDetName() == "MWPC2" )
	WC2Digits.push_back(AuxDetDigitHandle->at(iDig));
      if( AuxDetDigitHandle->at(iDig).AuxDetName() == "MWPC3" )
	WC3Digits.push_back(AuxDetDigitHandle->at(iDig));
      if( AuxDetDigitHandle->at(iDig).AuxDetName() == "MWPC4" )
	WC4Digits.push_back(AuxDetDigitHandle->at(iDig));
    }  
    std::vector<int> tdc_number_vect;
    std::vector<float> hit_channel_vect;
    std::vector<float> hit_time_bin_vect;
    convertDigitsToVectors( WC1Digits,
			    WC2Digits,
			    WC3Digits,
			    WC4Digits,
			    tdc_number_vect,
			    hit_channel_vect,
			    hit_time_bin_vect );   
			    
    int track_count=0;			    
    std::vector<double> reco_pz_list;                  //Final reco pz result for full_track_info = true, not indexed by trigger
    std::vector<double> y_kink_list;
    std::vector<double> x_dist_list;
    std::vector<double> y_dist_list;
    std::vector<double> z_dist_list;
    std::vector<double> x_face_list;
    std::vector<double> y_face_list;
    std::vector<double> theta_list;
    std::vector<double> phi_list;
    std::vector<WCHitList> final_tracks;  
    std::vector<std::vector<WCHitList> > good_hits; //Two vectors: WC#, axis. - Will be cleared for each trigger 
    //Initializing the good hit arrays to a default state - these clear for every trigger
    //Have 2-dimensional array of hitlists:
    //1st Dim: WC
    //2nd Dim: Axis    
    WCHitList hitList;
    std::vector<WCHitList> hitListAxis;
    for( int iAx = 0; iAx < 2; ++iAx ){ hitListAxis.push_back(hitList); }
    for( int iWC = 0; iWC < fNumber_wire_chambers; ++iWC ){ good_hits.push_back(hitListAxis); }
    //int good_trigger_counter = 0;
    int track_count_pre = track_count;
    fWCHitFinderAlg.createHits(tdc_number_vect,
    			       hit_channel_vect,
			       hit_time_bin_vect,
			       good_hits,
			       fVerbose);
    MakeSomePlotsFromHits(good_hits);		
    
    	       
fTrack_Type->Fill(fWCHitFinderAlg.getTrackType(good_hits));
//std::cout<<"Hit Finding done, going to Track Building"<<std::endl;
  fWCTrackBuilderAlg.reconstructTracks(  reco_pz_list,
				         y_kink_list,
				         x_dist_list,
					 y_dist_list,
					 z_dist_list,
					 x_face_list,
					 y_face_list,
					 theta_list,
					 phi_list,
					 final_tracks,
					 good_hits,
					 fVerbose,
					 fPickyTracks,
					 fHighYield,
					 track_count,
					 fWireHitsGoodTracks,
					 fWCMult,
					 fWireHitsTheTrack,
					 fBadTrackHits,
					 fTargetXY,
					 fPickyTracksTargetXY,
					 fResSquare,
					 fReco4pt,
					 fReco4ptdiff,
					 fTimingXY,
					 fRegressionPlots);			       

//fTrack_Type->Fill(fWCHitFinderAlg.getTrackType());    // WCHitFinderAlg::getTrackType() does not exist
//fTrack_Type->Fill(fWCTrackBuilderAlg.getTrackType()); // neither does WCTrackBuilderAlg_new::getTrackType()
                                                        // but WCTrackBuilderAlg::getTrackType() exists!

     //Pick out the tracks created under this current trigger and fill WCTrack objects with info.
    //(This must be done because the track/etc. lists encompass all triggers
    for( int iNewTrack = 0; iNewTrack < track_count-track_count_pre; ++iNewTrack ){
      std::vector<int> WC_vect;
      std::vector<float> hit_wire_vect;
      std::vector<float> hit_time_vect;
      
      WCHitList final_track = final_tracks.at(final_tracks.size()-1-iNewTrack);
      
      
      //Filling as done above, but formats the WC and hit wire vectors in the WCAuxDetDigit style
      createAuxDetStyleVectorsFromHitLists(final_track,
					   WC_vect,
					   hit_wire_vect,
					   hit_time_vect);
      
      //WCTrack object creation and association with trigger created
      ldp::WCTrack the_track(reco_pz_list.at(reco_pz_list.size()-1-iNewTrack),
			     y_kink_list.at(y_kink_list.size()-1-iNewTrack),
			     x_dist_list.at(x_dist_list.size()-1-iNewTrack),
			     y_dist_list.at(y_dist_list.size()-1-iNewTrack),
			     z_dist_list.at(z_dist_list.size()-1-iNewTrack),
			     x_face_list.at(x_face_list.size()-1-iNewTrack),
			     y_face_list.at(y_face_list.size()-1-iNewTrack),
			     theta_list.at(theta_list.size()-1-iNewTrack),
			     phi_list.at(phi_list.size()-1-iNewTrack),
			     WC_vect,
			     hit_wire_vect,
			     hit_time_vect);
      (*WCTrackCol).push_back( the_track );
    }

    //Plot the reconstructed momentum, y_kink, and delta X, Y, Z in histos
    plotTheTrackInformation(reco_pz_list,
			    y_kink_list,
			    x_dist_list,
			    y_dist_list,
			    z_dist_list,
			    x_face_list,
			    y_face_list,
			    theta_list,
			    phi_list );
    
    
    //Put objects into event (root file)
    e.put(std::move(WCTrackCol));   				
}
  //==================================================================================================
  void WCTrackBuilder::createAuxDetStyleVectorsFromHitLists(WCHitList final_track,
								   std::vector<int> & WC_vect,
								   std::vector<float> & hit_wire_vect,
								   std::vector<float> & hit_time_vect)
  {
    for( size_t iHit = 0; iHit < final_track.hits.size() ; ++iHit ){
      WC_vect.push_back(int(iHit/2)+1);          //Look at how hits are pushed into the tracks in buildTracksFromHits (alg)

      float the_wire = (final_track.hits.at(iHit).wire*-1)+64+(128*(iHit%2));
      if (fVerbose) { std::cout << "Old WCAxis/Wire: " << iHit << "/" << final_track.hits.at(iHit).wire << ", New WC/Wire: " << int(iHit/2)+1 << "/" << the_wire << std::endl; }
      hit_wire_vect.push_back(the_wire);
      hit_time_vect.push_back(final_track.hits.at(iHit).time);    
    }
  }
  //=======================================================================================
  void WCTrackBuilder::MakeSomePlotsFromHits(std::vector<std::vector<WCHitList> > good_hits)
  {
  //bool timematch; //Bool needed for Orphan Hits
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int error;
//WC1 Stuff!
    int iWC=0;
    int xSize=good_hits.at(iWC).at(0).hits.size();
    int ySize=good_hits.at(iWC).at(1).hits.size();
    //std::cout<<"For the first WC the X,Y sizes are "<<xSize<<", "<<ySize<<std::endl;
    if(xSize !=0 && ySize !=0) {fHitHeatMapWC1->Fill(xSize, ySize); // 2D plot of #of hits
    error =good_hits.at(iWC).at(0).hits.size()-good_hits.at(iWC).at(1).hits.size(); //Does one axis have more hits?
    fHitErrorWC1->Fill(error);
    
    
    for(int xIter=0; xIter<xSize; ++xIter){fXWireWC1->Fill(good_hits.at(iWC).at(0).hits.at(xIter).wire);}
    for(int yIter=0; yIter<ySize; ++yIter){fYWireWC1->Fill(good_hits.at(iWC).at(1).hits.at(yIter).wire);}   
//If the Y axis has more hits, loop over all the hit times, find a time that isn't matched in the X hit times
   /*  if(error<0) 
    { 
      for(size_t yIter=0; yIter<good_hits.at(iWC).at(1).hits.size(); ++yIter){
        timematch=false;
        int yTime=good_hits.at(iWC).at(1).hits.at(yIter).time;
	for(size_t xIter=0; xIter<good_hits.at(iWC).at(0).hits.size(); ++xIter){
          if(fabs(good_hits.at(iWC).at(0).hits.at(xIter).time-yTime)<2){timematch=true;}
	  }
// When the Orphaned Time is found, fill a hist of the Y wire that was orphaned.  For real hits, this should be flat.  For noisy wires that get through DBscan clustering, those wires will peak here.	  
	if(timematch==false){fOrphanHitsYWC1->Fill(good_hits.at(iWC).at(1).hits.at(yIter).wire);}
      }
    }
// Do the same method, this time if X is the busier axis, filling the Oprhaned X hit      
    if(error>0)
    {
      for(size_t xIter=0; xIter<good_hits.at(iWC).at(0).hits.size(); ++xIter){
        timematch=false;
	int xTime=good_hits.at(iWC).at(0).hits.at(xIter).time;
	for(size_t yIter=0; yIter<good_hits.at(iWC).at(1).hits.size(); ++yIter){
	  if(fabs(good_hits.at(iWC).at(1).hits.at(yIter).time-xTime)<2){timematch=true;}
	}
	if(timematch==false){fOrphanHitsXWC1->Fill(good_hits.at(iWC).at(0).hits.at(xIter).wire);}
      } */
      
     }
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  



  
//WC2 Hists    
    iWC=1;
     xSize=good_hits.at(iWC).at(0).hits.size();
     ySize=good_hits.at(iWC).at(1).hits.size();
    if(xSize !=0 && ySize !=0) {fHitHeatMapWC2->Fill(xSize, ySize); // 2D plot of #of hits
    error =good_hits.at(iWC).at(0).hits.size()-good_hits.at(iWC).at(1).hits.size(); //Does one axis have more hits?
    fHitErrorWC2->Fill(error);
    
    for(int xIter=0; xIter<xSize; ++xIter){fXWireWC2->Fill(good_hits.at(iWC).at(0).hits.at(xIter).wire);}
    for(int yIter=0; yIter<ySize; ++yIter){fYWireWC2->Fill(good_hits.at(iWC).at(1).hits.at(yIter).wire);}   
//WC2: If the Y axis has more hits, loop over all the hit times, find a time that isn't matched in the X hit times
   /*  if(error<0) 
    { 
      for(size_t yIter=0; yIter<good_hits.at(iWC).at(1).hits.size(); ++yIter){
        timematch=false;
        int yTime=good_hits.at(iWC).at(1).hits.at(yIter).time;
	for(size_t xIter=0; xIter<good_hits.at(iWC).at(0).hits.size(); ++xIter){
          if(fabs(good_hits.at(iWC).at(0).hits.at(xIter).time-yTime)<2){timematch=true;}
	  }
//When the Orphaned Time is found, fill a hist of the Y wire that was orphaned.  For real hits, this should be flat.  For noisy wires that get through DBscan clustering, those wires will peak here.	  
	if(timematch==false){fOrphanHitsYWC2->Fill(good_hits.at(iWC).at(1).hits.at(yIter).wire);}
      }
    }
//Do the same method, this time if X is the busier axis, filling the Oprhaned X hit      
    if(error>0)
    {
      for(size_t xIter=0; xIter<good_hits.at(iWC).at(0).hits.size(); ++xIter){
        timematch=false;
        int xTime=good_hits.at(iWC).at(0).hits.at(xIter).time;
	for(size_t yIter=0; yIter<good_hits.at(iWC).at(1).hits.size(); ++yIter){
	  if(fabs(good_hits.at(iWC).at(1).hits.at(yIter).time-xTime)<2){timematch=true;}
	}
	if(timematch==false){fOrphanHitsXWC2->Fill(good_hits.at(iWC).at(0).hits.at(xIter).wire);}
      } */
    
    }
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


    
//WC3        
    iWC=2;
    xSize=good_hits.at(iWC).at(0).hits.size();
    ySize=good_hits.at(iWC).at(1).hits.size();
    if(xSize !=0 && ySize !=0) {fHitHeatMapWC3->Fill(xSize, ySize); // 2D plot of #of hits, only if it's not empty
    error =good_hits.at(iWC).at(0).hits.size()-good_hits.at(iWC).at(1).hits.size(); //Does one axis have more hits?
    fHitErrorWC3->Fill(error);
    
    for(int xIter=0; xIter<xSize; ++xIter){fXWireWC3->Fill(good_hits.at(iWC).at(0).hits.at(xIter).wire);}
    for(int yIter=0; yIter<ySize; ++yIter){fYWireWC3->Fill(good_hits.at(iWC).at(1).hits.at(yIter).wire);}     
//If the Y axis has more hits, loop over all the hit times, find a time that isn't matched in the X hit times
/*     if(error<0) 
    { 
      for(size_t yIter=0; yIter<good_hits.at(iWC).at(1).hits.size(); ++yIter){
        timematch=false;
        int yTime=good_hits.at(iWC).at(1).hits.at(yIter).time;
	for(size_t xIter=0; xIter<good_hits.at(iWC).at(0).hits.size(); ++xIter){
          if(fabs(good_hits.at(iWC).at(0).hits.at(xIter).time-yTime)<2){timematch=true;}
	  }
//When the Orphaned Time is found, fill a hist of the Y wire that was orphaned.  For real hits, this should be flat.  For noisy wires that get through DBscan clustering, those wires will peak here.	  
	if(timematch==false){fOrphanHitsYWC3->Fill(good_hits.at(iWC).at(1).hits.at(yIter).wire);}
      }
    }
//Do the same method, this time if X is the busier axis, filling the Oprhaned X hit      
    if(error>0)
    {
      for(size_t xIter=0; xIter<good_hits.at(iWC).at(0).hits.size(); ++xIter){
        timematch=false;
	int xTime=good_hits.at(iWC).at(0).hits.at(xIter).time;
	for(size_t yIter=0; yIter<good_hits.at(iWC).at(1).hits.size(); ++yIter){
	  if(fabs(good_hits.at(iWC).at(1).hits.at(yIter).time-xTime)<2){timematch=true;}
	}
	if(timematch==false){fOrphanHitsXWC3->Fill(good_hits.at(iWC).at(0).hits.at(xIter).wire);}
      }
    } */
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    
//WC4
    iWC=3;
    xSize=good_hits.at(iWC).at(0).hits.size();
    ySize=good_hits.at(iWC).at(1).hits.size();
   if(xSize !=0 && ySize !=0) {fHitHeatMapWC4->Fill(xSize, ySize); // 2D plot of #of hits
    error =good_hits.at(iWC).at(0).hits.size()-good_hits.at(iWC).at(1).hits.size(); //Does one axis have more hits?
    fHitErrorWC4->Fill(error);
    for(int xIter=0; xIter<xSize; ++xIter){fXWireWC4->Fill(good_hits.at(iWC).at(0).hits.at(xIter).wire);}
    for(int yIter=0; yIter<ySize; ++yIter){fYWireWC4->Fill(good_hits.at(iWC).at(1).hits.at(yIter).wire);}     
/* //If the Y axis has more hits, loop over all the hit times, find a time that isn't matched in the X hit times
    if(error<0) 
    { 
      for(size_t yIter=0; yIter<good_hits.at(iWC).at(1).hits.size(); ++yIter){
        timematch=false;
        int yTime=good_hits.at(iWC).at(1).hits.at(yIter).time;
	for(size_t xIter=0; xIter<good_hits.at(iWC).at(0).hits.size(); ++xIter){
          if(fabs(good_hits.at(iWC).at(0).hits.at(xIter).time-yTime)<2){timematch=true;}
	  }
//When the Orphaned Time is found, fill a hist of the Y wire that was orphaned.  For real hits, this should be flat.  For noisy wires that get through DBscan clustering, those wires will peak here.	  
	if(timematch==false){fOrphanHitsYWC4->Fill(good_hits.at(iWC).at(1).hits.at(yIter).wire);}
      }
    }
//Do the same method, this time if X is the busier axis, filling the Oprhaned X hit      
    if(error>0)
    {
      for(size_t xIter=0; xIter<good_hits.at(iWC).at(0).hits.size(); ++xIter){
        timematch=false;
	int xTime=good_hits.at(iWC).at(0).hits.at(xIter).time;
	for(size_t yIter=0; yIter<good_hits.at(iWC).at(1).hits.size(); ++yIter){
	  if(fabs(good_hits.at(iWC).at(1).hits.at(yIter).time-xTime)<2){timematch=true;}
	}
	if(timematch==false){fOrphanHitsXWC4->Fill(good_hits.at(iWC).at(0).hits.at(xIter).wire);}
      }
    } */
    					 
    }
//To see what things we can calculate in track building, Fill a histogram showing how many times there were 3 or 4 WC with X wires vs 3 or 4 WC Y wires.  This will
//let us know what we can do with 6 or 7 point tracks later on
    int xPoints=0;
    int yPoints=0;
    for(iWC=0;iWC<4;++iWC)
    {
      if(good_hits[iWC][0].hits.size() >= 1){++xPoints;}
      if(good_hits[iWC][1].hits.size() >= 1){++yPoints;}
    }
    fHitsAvailable->Fill(xPoints,yPoints);
    //std::cout<<"THINGS!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"<<std::endl;
    if(xPoints < 0 || yPoints < 0){std::cout<<"You have negative points available!!!!!!"<<std::endl;}
    if(xPoints > 4 || yPoints > 4){std::cout<<"There are more than 4 WCs available!!!!!!!!"<<std::endl;}
  }
  //===================================================================================
  void WCTrackBuilder::plotTheTrackInformation( std::vector<double> reco_pz_list,
							 std::vector<double> y_kink_list,
							 std::vector<double> x_dist_list,
							 std::vector<double> y_dist_list,
							 std::vector<double> z_dist_list,
							 std::vector<double> x_face_list,
							 std::vector<double> y_face_list,
							 std::vector<double> theta_list,
							 std::vector<double> phi_list )
  {
    //Loop through the tracks and fill
    for( size_t iTrack = 0; iTrack < reco_pz_list.size(); ++iTrack ){
      fReco_Pz->Fill(reco_pz_list.at(iTrack));
      fY_Kink->Fill(y_kink_list.at(iTrack));
      fX_Dist->Fill(x_dist_list.at(iTrack));
      fY_Dist->Fill(y_dist_list.at(iTrack));
      fZ_Dist->Fill(z_dist_list.at(iTrack));
      fX_Face_Dist->Fill(x_face_list.at(iTrack));
      fY_Face_Dist->Fill(y_face_list.at(iTrack));
      fTheta_Dist->Fill(theta_list.at(iTrack));
      fPhi_Dist->Fill(phi_list.at(iTrack));
    }
    
  }

void WCTrackBuilder::beginJob()
{
  // Implementation of optional member function here.
      // Implementation of optional member function here.
    art::ServiceHandle<art::TFileService> tfs;
//Hists that should be used for diagnostics and deleted before production.
    fResSquare = tfs->make<TH1F>("Sum of Square of Residuals from Y points to Linear Regression","Sum of Square of Residuals from Y points to Linear Regression", 150,0,150);
    fReco4pt = tfs->make<TH1F>("Doug's 4 point reco", "Doug's 4 point reco", 200,0,2000);
    fReco4ptdiff = tfs->make<TH2F>("Doug's 4 point reco difference", "Doug's 4 point reco difference", 800,-4000,4000, 400,-2000,2000);
    fHitsAvailable = tfs->make<TH2F>("WCs Available per axis for a track", "WCs available per axis for a track", 5,0,5,5,0,5);
    fHitsAvailable->GetXaxis()->SetTitle("Number of WCX axes available");
    fHitsAvailable->GetYaxis()->SetTitle("Number of WCY axes available");
    fHitHeatMapWC1 = tfs->make<TH2F>("WC1 Hit Map","Number of Hits on each Axis in WC1", 10,0,10,10,0,10);
    fHitHeatMapWC2 = tfs->make<TH2F>("WC2 Hit Map","Number of Hits on each Axis in WC2", 10,0,10,10,0,10);
    fHitHeatMapWC3 = tfs->make<TH2F>("WC3 Hit Map","Number of Hits on each Axis in WC3", 10,0,10,10,0,10);
    fHitHeatMapWC4 = tfs->make<TH2F>("WC4 Hit Map","Number of Hits on each Axis in WC4", 10,0,10,10,0,10);
    fHitHeatMapWC1->GetXaxis()->SetTitle("Number of Hits on X Axis");
    fHitHeatMapWC2->GetXaxis()->SetTitle("Number of Hits on X Axis");
    fHitHeatMapWC3->GetXaxis()->SetTitle("Number of Hits on X Axis");
    fHitHeatMapWC4->GetXaxis()->SetTitle("Number of Hits on X Axis");
    fHitHeatMapWC1->GetYaxis()->SetTitle("Number of Hits on Y Axis");
    fHitHeatMapWC2->GetYaxis()->SetTitle("Number of Hits on Y Axis");
    fHitHeatMapWC3->GetYaxis()->SetTitle("Number of Hits on Y Axis");
    fHitHeatMapWC4->GetYaxis()->SetTitle("Number of Hits on Y Axis");
    fHitErrorWC1 = tfs->make<TH1F>("WC1 Orphan Hits", "Hits in X axis - Hits in Y axis in WC1", 14,-7.5,6.5);
    fHitErrorWC2 = tfs->make<TH1F>("WC2 Orphan Hits", "Hits in X axis - Hits in Y axis in WC2", 14,-7.5,6.5);
    fHitErrorWC3 = tfs->make<TH1F>("WC3 Orphan Hits", "Hits in X axis - Hits in Y axis in WC3", 14,-7.5,6.5);
    fHitErrorWC4 = tfs->make<TH1F>("WC4 Orphan Hits", "Hits in X axis - Hits in Y axis in WC4", 14,-7.5,6.5);
    fHitErrorWC1->GetXaxis()->SetTitle("Hit difference");
    fHitErrorWC2->GetXaxis()->SetTitle("Hit difference");
    fHitErrorWC3->GetXaxis()->SetTitle("Hit difference");
    fHitErrorWC4->GetXaxis()->SetTitle("Hit difference");
    fXWireWC1 = tfs->make<TH1F>("WC1 XWire Hits", "WC1 X Wire for Good Hits", 128,-64,64);
    fXWireWC2 = tfs->make<TH1F>("WC2 XWire Hits", "WC2 X Wire for Good Hits", 128,-64,64); 
    fXWireWC3 = tfs->make<TH1F>("WC3 XWire Hits", "WC3 X Wire for Good Hits", 128,-64,64); 
    fXWireWC4 = tfs->make<TH1F>("WC4 XWire Hits", "WC4 X Wire for Good Hits", 128,-64,64); 
    fYWireWC1 = tfs->make<TH1F>("WC1 YWire Hits", "WC1 Y Wire for Good Hits", 128,-64,64); 
    fYWireWC2 = tfs->make<TH1F>("WC2 YWire Hits", "WC2 Y Wire for Good Hits", 128,-64,64); 
    fYWireWC3 = tfs->make<TH1F>("WC3 YWire Hits", "WC3 Y Wire for Good Hits", 128,-64,64); 
    fYWireWC4 = tfs->make<TH1F>("WC4 YWire Hits", "WC4 Y Wire for Good Hits", 128,-64,64);
    fXWireWC1->GetXaxis()->SetTitle("wire #");
    fXWireWC2->GetXaxis()->SetTitle("wire #");
    fXWireWC3->GetXaxis()->SetTitle("wire #");
    fXWireWC4->GetXaxis()->SetTitle("wire #");
    fYWireWC1->GetXaxis()->SetTitle("wire #");
    fYWireWC2->GetXaxis()->SetTitle("wire #");
    fYWireWC3->GetXaxis()->SetTitle("wire #");
    fYWireWC4->GetXaxis()->SetTitle("wire #");
    
    fTargetXY=tfs->make<TH2F>("XY Projection of Target from US WC","XY Projection of Target from US WC", 500,800,1300,200,-100,100);
    fPickyTracksTargetXY=tfs->make<TH2F>("XY Projection of Target from US WC for Picky Tracks","XY Projection of Target from US WC for Picky Tracks", 500,800,1300,200,-100,100);
    
    for(size_t iter=0; iter<8; ++iter){
    fWireHitsGoodTracks.push_back(tfs->make<TH1F>());
    fWCMult.push_back(tfs->make<TH2F>());
    fWireHitsTheTrack.push_back(tfs->make<TH1F>());
    fBadTrackHits.push_back(tfs->make<TH1F>());
    }
    
    for(size_t iter=0; iter<4; ++iter){
    fTimingXY.push_back(tfs->make<TH2F>());
    }
    fTimingXY[0] = tfs->make<TH2F>("WC 1 Picky tracks timing","WC1 Picky Tracks Timing", 1000,0,1000,1000,0,1000);
    fTimingXY[1] = tfs->make<TH2F>("WC 2 Picky tracks timing","WC2 Picky Tracks Timing", 1000,0,1000,1000,0,1000);
    fTimingXY[2] = tfs->make<TH2F>("WC 3 Picky tracks timing","WC3 Picky Tracks Timing", 1000,0,1000,1000,0,1000);
    fTimingXY[3] = tfs->make<TH2F>("WC 4 Picky tracks timing","WC4 Picky Tracks Timing", 1000,0,1000,1000,0,1000);
    
    for(size_t iter=0; iter<3; ++iter){
    fRegressionPlots.push_back(tfs->make<TH2F>());
    }
    
    fRegressionPlots[0]= tfs->make<TH2F>("Regression no 2", "4 point regression vs 3 point, skipping WC2", 150,0,150,150,0,150);
    fRegressionPlots[1]= tfs->make<TH2F>("Regression no 3", "4 point regression vs 3 point, skipping WC3", 150,0,150,150,0,150);
    fRegressionPlots[2]= tfs->make<TH2F>("Regression no 3 vs no 2", "Three Point No WC3 vs Three Point No WC2", 150,0,150,150,0,150);
    fWireHitsGoodTracks[0] = tfs->make<TH1F>("WC1 X Wire Hits for Good Tracks", "WC1 X Wire Hits for Good Tracks", 128,-64,64);
    fWireHitsGoodTracks[1] = tfs->make<TH1F>("WC1 Y Wire Hits for Good Tracks", "WC1 Y Wire Hits for Good Tracks", 128,-64,64);
    fWireHitsGoodTracks[2] = tfs->make<TH1F>("WC2 X Wire Hits for Good Tracks", "WC2 X Wire Hits for Good Tracks", 128,-64,64);
    fWireHitsGoodTracks[3] = tfs->make<TH1F>("WC2 Y Wire Hits for Good Tracks", "WC2 Y Wire Hits for Good Tracks", 128,-64,64);
    fWireHitsGoodTracks[4] = tfs->make<TH1F>("WC3 X Wire Hits for Good Tracks", "WC3 X Wire Hits for Good Tracks", 128,-64,64);
    fWireHitsGoodTracks[5] = tfs->make<TH1F>("WC3 Y Wire Hits for Good Tracks", "WC3 Y Wire Hits for Good Tracks", 128,-64,64);
    fWireHitsGoodTracks[6] = tfs->make<TH1F>("WC4 X Wire Hits for Good Tracks", "WC4 X Wire Hits for Good Tracks", 128,-64,64);
    fWireHitsGoodTracks[7] = tfs->make<TH1F>("WC4 Y Wire Hits for Good Tracks", "WC4 Y Wire Hits for Good Tracks", 128,-64,64);
    fWireHitsGoodTracks[0]->GetXaxis()->SetTitle("wire #");
    fWireHitsGoodTracks[1]->GetXaxis()->SetTitle("wire #");
    fWireHitsGoodTracks[2]->GetXaxis()->SetTitle("wire #");
    fWireHitsGoodTracks[3]->GetXaxis()->SetTitle("wire #");
    fWireHitsGoodTracks[4]->GetXaxis()->SetTitle("wire #");
    fWireHitsGoodTracks[5]->GetXaxis()->SetTitle("wire #");
    fWireHitsGoodTracks[6]->GetXaxis()->SetTitle("wire #");
    fWireHitsGoodTracks[7]->GetXaxis()->SetTitle("wire #");
    fBadTrackHits[0]=tfs->make<TH1F>("WC1X Bad Track Hits","WC1X Wire Hits for Tracks Not Used", 128,-64,64);
    fBadTrackHits[1]=tfs->make<TH1F>("WC1Y Bad Track Hits","WC1Y Wire Hits for Tracks Not Used", 128,-64,64);
    fBadTrackHits[2]=tfs->make<TH1F>("WC2X Bad Track Hits","WC2X Wire Hits for Tracks Not Used", 128,-64,64);
    fBadTrackHits[3]=tfs->make<TH1F>("WC2Y Bad Track Hits","WC2Y Wire Hits for Tracks Not Used", 128,-64,64);
    fBadTrackHits[4]=tfs->make<TH1F>("WC3X Bad Track Hits","WC3X Wire Hits for Tracks Not Used", 128,-64,64);
    fBadTrackHits[5]=tfs->make<TH1F>("WC3Y Bad Track Hits","WC3Y Wire Hits for Tracks Not Used", 128,-64,64);
    fBadTrackHits[6]=tfs->make<TH1F>("WC4X Bad Track Hits","WC4X Wire Hits for Tracks Not Used", 128,-64,64);
    fBadTrackHits[7]=tfs->make<TH1F>("WC4Y Bad Track Hits","WC4Y Wire Hits for Tracks Not Used", 128,-64,64);
    fBadTrackHits[0]->GetXaxis()->SetTitle("wire #");
    fBadTrackHits[1]->GetXaxis()->SetTitle("wire #");
    fBadTrackHits[2]->GetXaxis()->SetTitle("wire #");
    fBadTrackHits[3]->GetXaxis()->SetTitle("wire #");
    fBadTrackHits[4]->GetXaxis()->SetTitle("wire #");
    fBadTrackHits[5]->GetXaxis()->SetTitle("wire #");
    fBadTrackHits[6]->GetXaxis()->SetTitle("wire #");
    fBadTrackHits[7]->GetXaxis()->SetTitle("wire #");
    fWCMult[0]= tfs->make<TH2F>("Wire Multiplicity for WC1X used in tracks", "Wire Multiplicity for WC1X used in tracks", 128,-64,64,50,0,50);
    fWCMult[1]= tfs->make<TH2F>("Wire Multiplicity for WC1Y used in tracks", "Wire Multiplicity for WC1Y used in tracks", 128,-64,64,50,0,50);
    fWCMult[2]= tfs->make<TH2F>("Wire Multiplicity for WC2X used in tracks", "Wire Multiplicity for WC2X used in tracks", 128,-64,64,50,0,50);
    fWCMult[3]= tfs->make<TH2F>("Wire Multiplicity for WC2Y used in tracks", "Wire Multiplicity for WC2Y used in tracks", 128,-64,64,50,0,50);
    fWCMult[4]= tfs->make<TH2F>("Wire Multiplicity for WC3X used in tracks", "Wire Multiplicity for WC3X used in tracks", 128,-64,64,50,0,50);
    fWCMult[5]= tfs->make<TH2F>("Wire Multiplicity for WC3Y used in tracks", "Wire Multiplicity for WC3Y used in tracks", 128,-64,64,50,0,50);
    fWCMult[6]= tfs->make<TH2F>("Wire Multiplicity for WC4X used in tracks", "Wire Multiplicity for WC4X used in tracks", 128,-64,64,50,0,50);
    fWCMult[7]= tfs->make<TH2F>("Wire Multiplicity for WC4Y used in tracks", "Wire Multiplicity for WC4Y used in tracks", 128,-64,64,50,0,50);
    fWCMult[0]->GetXaxis()->SetTitle("wire #");
    fWCMult[1]->GetXaxis()->SetTitle("wire #");
    fWCMult[2]->GetXaxis()->SetTitle("wire #");
    fWCMult[3]->GetXaxis()->SetTitle("wire #");
    fWCMult[4]->GetXaxis()->SetTitle("wire #");
    fWCMult[5]->GetXaxis()->SetTitle("wire #");
    fWCMult[6]->GetXaxis()->SetTitle("wire #");
    fWCMult[7]->GetXaxis()->SetTitle("wire #");
    fWCMult[0]->GetYaxis()->SetTitle("Times Wire was used to make a Track");
    fWCMult[1]->GetYaxis()->SetTitle("Times Wire was used to make a Track");
    fWCMult[2]->GetYaxis()->SetTitle("Times Wire was used to make a Track");
    fWCMult[3]->GetYaxis()->SetTitle("Times Wire was used to make a Track");
    fWCMult[4]->GetYaxis()->SetTitle("Times Wire was used to make a Track");
    fWCMult[5]->GetYaxis()->SetTitle("Times Wire was used to make a Track");
    fWCMult[6]->GetYaxis()->SetTitle("Times Wire was used to make a Track");
    fWCMult[7]->GetYaxis()->SetTitle("Times Wire was used to make a Track");
    fWireHitsTheTrack[0] = tfs->make<TH1F>("WC1 X Wire Hits for Final Tracks", "WC1 X Wire Hits for Final Tracks", 128,-64,64);
    fWireHitsTheTrack[1] = tfs->make<TH1F>("WC1 Y Wire Hits for Final Tracks", "WC1 Y Wire Hits for Final Tracks", 128,-64,64);
    fWireHitsTheTrack[2] = tfs->make<TH1F>("WC2 X Wire Hits for Final Tracks", "WC2 X Wire Hits for Final Tracks", 128,-64,64);
    fWireHitsTheTrack[3] = tfs->make<TH1F>("WC2 Y Wire Hits for Final Tracks", "WC2 Y Wire Hits for Final Tracks", 128,-64,64);
    fWireHitsTheTrack[4] = tfs->make<TH1F>("WC3 X Wire Hits for Final Tracks", "WC3 X Wire Hits for Final Tracks", 128,-64,64);
    fWireHitsTheTrack[5] = tfs->make<TH1F>("WC3 Y Wire Hits for Final Tracks", "WC3 Y Wire Hits for Final Tracks", 128,-64,64);
    fWireHitsTheTrack[6] = tfs->make<TH1F>("WC4 X Wire Hits for Final Tracks", "WC4 X Wire Hits for Final Tracks", 128,-64,64);
    fWireHitsTheTrack[7] = tfs->make<TH1F>("WC4 Y Wire Hits for Final Tracks", "WC4 Y Wire Hits for Final Tracks", 128,-64,64);
    fWireHitsTheTrack[0]->GetXaxis()->SetTitle("wire #"); 
    fWireHitsTheTrack[1]->GetXaxis()->SetTitle("wire #");
    fWireHitsTheTrack[2]->GetXaxis()->SetTitle("wire #");
    fWireHitsTheTrack[3]->GetXaxis()->SetTitle("wire #");
    fWireHitsTheTrack[4]->GetXaxis()->SetTitle("wire #");
    fWireHitsTheTrack[5]->GetXaxis()->SetTitle("wire #");
    fWireHitsTheTrack[6]->GetXaxis()->SetTitle("wire #");
    fWireHitsTheTrack[7]->GetXaxis()->SetTitle("wire #");  
//Hists that should probably stay for the production run.    
    fReco_Pz = tfs->make<TH1F>("Reco_Pz","Reconstructed momentum in XZ plane", 180, 0, 1800);
    fY_Kink = tfs->make<TH1F>("Y_Kink","Angle between US/DS tracks in Y direction (degrees)",100,-5*3.1415926/180,5*3.141592654/180);
    fX_Dist = tfs->make<TH1F>("X_Dist","X distance between US/DS tracks at midplane (mm)",120,-60,60);
    fY_Dist = tfs->make<TH1F>("Y_Dist","Y distance between US/DS tracks at midplane (mm)",120,-60,60);
    fZ_Dist = tfs->make<TH1F>("Z_Dist","Z distance between US/DS tracks at midplane (mm)",120,-60,60);
    fX_Face_Dist = tfs->make<TH1F>("X_Face","X Location of Track's TPC Entry (mm)",800,-200,600);
    fY_Face_Dist = tfs->make<TH1F>("Y_Face","Y Location of Track's TPC Entry (mm)",800,-400,400);
    fTheta_Dist = tfs->make<TH1F>("Theta","Track Theta (w.r.t. TPC Z axis), (radians),",100,0,0.2);
    fPhi_Dist = tfs->make<TH1F>("Phi","Track Phi (w.r.t. TPC X axis), (radians)",100,0,6.28318);                   
    fReco_Pz->GetXaxis()->SetTitle("Reconstructed momentum (MeV/c)");
    fReco_Pz->GetYaxis()->SetTitle("Tracks per 10 MeV/c");
    fY_Kink->GetXaxis()->SetTitle("Reconstructed y_kink (radians)");
    fY_Kink->GetYaxis()->SetTitle("Tracks per 0.000872 radians");
    fX_Dist->GetXaxis()->SetTitle("X distance between US and DS track ends");
    fX_Dist->GetYaxis()->SetTitle("Tracks per 1 mm");
    fY_Dist->GetXaxis()->SetTitle("Y distance between US and DS track ends");
    fY_Dist->GetYaxis()->SetTitle("Tracks per 1 mm");
    fZ_Dist->GetXaxis()->SetTitle("Z distance between US and DS track ends");
    fZ_Dist->GetYaxis()->SetTitle("Tracks per 1 mm");
    fX_Face_Dist->GetXaxis()->SetTitle("X (mm)");
    fX_Face_Dist->GetYaxis()->SetTitle("Tracks per 1 mm");
    fY_Face_Dist->GetXaxis()->SetTitle("Y (mm)");
    fY_Face_Dist->GetYaxis()->SetTitle("Tracks per 1 mm");
    fTheta_Dist->GetXaxis()->SetTitle("Theta (radians)");
    fTheta_Dist->GetYaxis()->SetTitle("Tracks per .002 radians");
    fPhi_Dist->GetXaxis()->SetTitle("Phi (radians)");
    fPhi_Dist->GetYaxis()->SetTitle("Tracks per 0.0628 radians");
    
    fTrack_Type = tfs->make<TH1F>("TrackType","WCTrack conditions: 1=missHit,2=uniqueHits,3=lonelyHit,4=socialHits",4,0,4);
    fTrack_Type->GetYaxis()->SetTitle("# Events");
    fTrack_Type->GetXaxis()->SetTitle("Track Conditions");
}
//===============================================================================================
  void WCTrackBuilder::convertDigitsToVectors( std::vector<raw::AuxDetDigit> the_digits_1,
						     std::vector<raw::AuxDetDigit> the_digits_2,
						     std::vector<raw::AuxDetDigit> the_digits_3,
						     std::vector<raw::AuxDetDigit> the_digits_4,
						     std::vector<int> & tdc_number_vect,
						     std::vector<float> & hit_channel_vect,
						     std::vector<float> & hit_time_bin_vect )
  {  
    if (fVerbose) {  std::cout << "Digits' sizes, 1:2:3:4: " << the_digits_1.size() << ":" << the_digits_2.size() << ":"  << the_digits_3.size() << ":" << the_digits_4.size() << std::endl;}
    
    //Loop through digits for WC1
    for( size_t iDigit = 0; iDigit < the_digits_1.size() ; ++iDigit ){
      raw::AuxDetDigit a_digit = (the_digits_1.at(iDigit));
      for( size_t iHit = 0; iHit < a_digit.NADC() ; ++iHit ){
        if (fVerbose) { std::cout << "(TDC,channel,time): (" << int(a_digit.Channel()/fNumber_wires_per_tdc)+1 << "," << a_digit.Channel() % 64 << "," << a_digit.ADC(iHit)<< ")" << std::endl; }
	hit_time_bin_vect.push_back(a_digit.ADC(iHit));
	tdc_number_vect.push_back(int(a_digit.Channel()/fNumber_wires_per_tdc)+1);
	hit_channel_vect.push_back(a_digit.Channel() % 64);
      }
    }

    //Loop through digits for WC2
    for( size_t iDigit = 0; iDigit < the_digits_2.size() ; ++iDigit ){
      raw::AuxDetDigit a_digit = (the_digits_2.at(iDigit));
      for( size_t iHit = 0; iHit < a_digit.NADC() ; ++iHit ){
	if( a_digit.ADC(iHit) != 0 ){
	  if (fVerbose){ std::cout << "(TDC,channel,time): (" << a_digit.Channel()/fNumber_wires_per_tdc + 5 << "," << a_digit.Channel() % 64 << "," << a_digit.ADC(iHit)<< "), --> a_digit.Channel(): " << a_digit.Channel() << ", fNumber_wires...: " << fNumber_wires_per_tdc << std::endl;}
	  hit_time_bin_vect.push_back(a_digit.ADC(iHit));
	  tdc_number_vect.push_back(int(a_digit.Channel()/fNumber_wires_per_tdc)+5);
	  hit_channel_vect.push_back(a_digit.Channel() % 64);
	}
      }
    }

    //Loop through digits for WC3
    for( size_t iDigit = 0; iDigit < the_digits_3.size() ; ++iDigit ){
      raw::AuxDetDigit a_digit = (the_digits_3.at(iDigit));
      for( size_t iHit = 0; iHit < a_digit.NADC() ; ++iHit ){
	if( a_digit.ADC(iHit) != 0 ){
	  if (fVerbose){std::cout << "(TDC,channel,time): (" << int(a_digit.Channel()/fNumber_wires_per_tdc)+9 << "," << a_digit.Channel() % 64 << "," << a_digit.ADC(iHit)<< ")" << std::endl;}
	  hit_time_bin_vect.push_back(a_digit.ADC(iHit));
	  tdc_number_vect.push_back(int(a_digit.Channel()/fNumber_wires_per_tdc)+9);
	  hit_channel_vect.push_back(a_digit.Channel() % 64);
	}
      }
    }

    //Loop through digits for WC4
    for( size_t iDigit = 0; iDigit < the_digits_4.size() ; ++iDigit ){
      raw::AuxDetDigit a_digit = (the_digits_4.at(iDigit));
      for( size_t iHit = 0; iHit < a_digit.NADC() ; ++iHit ){
	if( a_digit.ADC(iHit) != 0 ){
	  if (fVerbose){std::cout << "(TDC,channel,time): (" << int(a_digit.Channel()/fNumber_wires_per_tdc)+13 << "," << a_digit.Channel() % 64 << "," << a_digit.ADC(iHit)<< ")" << std::endl;}
	  hit_time_bin_vect.push_back(a_digit.ADC(iHit));
	  tdc_number_vect.push_back(int(a_digit.Channel()/fNumber_wires_per_tdc)+13);
	  hit_channel_vect.push_back(a_digit.Channel() % 64);
	}
      }
    }
  }

void WCTrackBuilder::beginRun(art::Run & r)
{
  // Implementation of optional member function here.
}

void WCTrackBuilder::beginSubRun(art::SubRun & sr)
{
  // Implementation of optional member function here.
      // Implementation of optional member function here.
    fWCTrackBuilderAlg.loadXMLDatabaseTableForBField( sr.run(), sr.subRun() );
}

void WCTrackBuilder::endJob()
{
  // Implementation of optional member function here.
}

// void WCTrackBuilder::endRun(art::Run & r)
// {
//   // Implementation of optional member function here.
// }
// 
// void WCTrackBuilder::endSubRun(art::SubRun & sr)
// {
//   // Implementation of optional member function here.
// }

void WCTrackBuilder::reconfigure(fhicl::ParameterSet const & p)
{
  // Implementation of optional member function here.
      fNumber_wire_chambers = p.get<int>("NWC"); //4;  
    fNumber_wires_per_tdc = p.get<int>("NWperTDC"); //64;
    fVerbose = p.get<bool>("Verbose", false);
    fSlicerSourceLabel = p.get<std::string>("SourceLabel");
    fPickyTracks=p.get<bool>("PickyTracks");
    fHighYield=p.get<bool>("HighYield");
}
// 
// void WCTrackBuilder::respondToCloseInputFile(art::FileBlock const & fb)
// {
//   // Implementation of optional member function here.
// }
// 
// void WCTrackBuilder::respondToCloseOutputFiles(art::FileBlock const & fb)
// {
//   // Implementation of optional member function here.
// }
// 
// void WCTrackBuilder::respondToOpenInputFile(art::FileBlock const & fb)
// {
//   // Implementation of optional member function here.
// }
// 
// void WCTrackBuilder::respondToOpenOutputFiles(art::FileBlock const & fb)
// {
//   // Implementation of optional member function here.
// }

DEFINE_ART_MODULE(WCTrackBuilder)
}//end namespace
#endif //WCTRACKBUILDER_H
