////////////////////////////////////////////////////////////////////////
// Class:       MyNewMod
// Module Type: producer
// File:        MyNewMod_module.cc
//
// Generated at Fri May 29 10:13:48 2015 by Jonathan Asaadi using artmod
// from cetpkgsupport v1_08_05.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDProducer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "art/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"
#include <iostream>
#include <TH1F.h>
#include "art/Framework/Services/Optional/TFileService.h"
#include "art/Framework/Services/Registry/ServiceHandle.h"
#include "art/Framework/Services/Optional/TFileDirectory.h"
// ### LArIAT Things ###
#include "RawDataUtilities/TriggerDigitUtility.h"

#include <memory>

namespace lrm {
  class MyNewMod;
}

class lrm::MyNewMod : public art::EDProducer {
public:
  explicit MyNewMod(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  MyNewMod(MyNewMod const &) = delete;
  MyNewMod(MyNewMod &&) = delete;
  MyNewMod & operator = (MyNewMod const &) = delete;
  MyNewMod & operator = (MyNewMod &&) = delete;

  // Required functions.
  void produce(art::Event & e) override;

  // Selected optional functions.
  void beginJob() override;
  void beginRun(art::Run & r) override;
  void beginSubRun(art::SubRun & sr) override;
  void endJob() override;
  void endRun(art::Run & r) override;
  void endSubRun(art::SubRun & sr) override;
  void reconfigure(fhicl::ParameterSet const & p) override;
  void respondToCloseInputFile(art::FileBlock const & fb) override;
  void respondToCloseOutputFiles(art::FileBlock const & fb) override;
  void respondToOpenInputFile(art::FileBlock const & fb) override;
  void respondToOpenOutputFiles(art::FileBlock const & fb) override;

private:
  
  std::string fTriggerUtility; //<---Label for the module producing the triggers
  TH1F* fWC1Size;
  
  // Declare member data here.

};


lrm::MyNewMod::MyNewMod(fhicl::ParameterSet const & p)
// :
// Initialize member data here.
{
  // Call appropriate produces<>() functions here.
}

void lrm::MyNewMod::produce(art::Event & e)
{
  // Implementation of required member function here.
  
  
  // ###########################################
  // ### Grab the trigger data utility (tdu) ###
  // ###########################################
  rdu::TriggerDigitUtility tdu(e, fTriggerUtility);
    
    
  // ##############################
  // ### Loop over the triggers ###
  // ##############################
  for(size_t trig = 0; trig < tdu.NTriggers(); ++trig)
     {
     std::vector<const raw::AuxDetDigit*> WireChamber1Digi = tdu.TriggerMWPC1Digits(trig);
     
     std::cout<<"Size of WC1Digi = "<<WireChamber1Digi.size()<<std::endl;
     fWC1Size->Fill(WireChamber1Digi.size());
     
     for(size_t wc1 = 0; wc1 < WireChamber1Digi.size(); ++wc1)
        {
	std::cout<<"WireChamber1Digi[wc1] = "<<WireChamber1Digi[wc1]<<std::endl;
	
	
	}//<--End wc1
     
     
     
     }//<---End trig loop
  
  
}

void lrm::MyNewMod::beginJob()
{
  // Implementation of optional member function here.
  
  art::ServiceHandle<art::TFileService> tfs;
  fWC1Size = tfs->make<TH1F>("WC1Size","WC1Size", 100, 0, 100);
  
}

void lrm::MyNewMod::beginRun(art::Run & r)
{
  // Implementation of optional member function here.
}

void lrm::MyNewMod::beginSubRun(art::SubRun & sr)
{
   

}

void lrm::MyNewMod::endJob()
{
  // Implementation of optional member function here.
}

void lrm::MyNewMod::endRun(art::Run & r)
{
  // Implementation of optional member function here.
}

void lrm::MyNewMod::endSubRun(art::SubRun & sr)
{
  // Implementation of optional member function here.
}

void lrm::MyNewMod::reconfigure(fhicl::ParameterSet const & p)
{
   // implementing the ability to pass the name of the TriggerUtililty 
   fTriggerUtility   = p.get< std::string >("TriggerUtility", "FragmentToDigit");

  // Implementation of optional member function here.
}

void lrm::MyNewMod::respondToCloseInputFile(art::FileBlock const & fb)
{
  // Implementation of optional member function here.
}

void lrm::MyNewMod::respondToCloseOutputFiles(art::FileBlock const & fb)
{
  // Implementation of optional member function here.
}

void lrm::MyNewMod::respondToOpenInputFile(art::FileBlock const & fb)
{
  // Implementation of optional member function here.
}

void lrm::MyNewMod::respondToOpenOutputFiles(art::FileBlock const & fb)
{
  // Implementation of optional member function here.
}

DEFINE_ART_MODULE(lrm::MyNewMod)
