////////////////////////////////////////////////////////////////////////
// Class:       MuonRangeStackHits
// Module Type: producer
// File:        MuonRangeStackHits_module.cc
//
// Generated at Thu Jun  4 10:04:24 2015 by Greg Pulliam using artmod
// from cetpkgsupport v1_08_05.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDProducer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "art/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"
#include <iostream>
#include <TH1F.h>
#include <TH2F.h>
#include "art/Framework/Services/Optional/TFileService.h"
#include "art/Framework/Services/Registry/ServiceHandle.h"
#include "art/Framework/Services/Optional/TFileDirectory.h"
#include "RawDataUtilities/TriggerDigitUtility.h"
#include <vector>
#include <memory>
#include <sstream>
namespace lrm{
	class MuonRangeStackHits;
}

class MuonRangeStackHits : public art::EDProducer {
public:
  explicit MuonRangeStackHits(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  MuonRangeStackHits(MuonRangeStackHits const &) = delete;
  MuonRangeStackHits(MuonRangeStackHits &&) = delete;
  MuonRangeStackHits & operator = (MuonRangeStackHits const &) = delete;
  MuonRangeStackHits & operator = (MuonRangeStackHits &&) = delete;

  // Required functions.
  void produce(art::Event & e) override;

  // Selected optional functions.
  void beginJob() override;
  void beginRun(art::Run & r) override;
  void beginSubRun(art::SubRun & sr) override;
  void endJob() override;
  void endRun(art::Run & r) override;
  void endSubRun(art::SubRun & sr) override;
  void reconfigure(fhicl::ParameterSet const & p) override;
  void respondToCloseInputFile(art::FileBlock const & fb) override;
  void respondToCloseOutputFiles(art::FileBlock const & fb) override;
  void respondToOpenInputFile(art::FileBlock const & fb) override;
  void respondToOpenOutputFiles(art::FileBlock const & fb) override;

private:
std::string fTriggerUtility;
TH1F* fMuRSHitTiming;
TH1F* fPaddleHits;
TH1F* fTotalPaddleHits;
TH2F* fAmpVsPaddle;

std::vector<int> MuRSPaddleHits[16];
  // Declare member data here.

};


MuonRangeStackHits::MuonRangeStackHits(fhicl::ParameterSet const & p)
// :
// Initialize member data here.
{
  // Call appropriate produces<>() functions here.
}

void MuonRangeStackHits::produce(art::Event & e)
{
  // Implementation of required member function here.
  fTriggerUtility = "FragmentToDigit";
  rdu::TriggerDigitUtility tdu(e, fTriggerUtility);

    // Loop over Triggers
  for(size_t trig=0; trig < tdu.NTriggers(); ++trig)
     {	
      std::vector<const raw::AuxDetDigit*> MRSDigit=tdu.TriggerMuonRangeStackDigits(trig);
       
	int size=MRSDigit.size();
	int TrigMult=size/16;
	int Threshold=2020;
	  //A horribly inefficient loop to find simultaneous hits in multiple planes of paddles.
/* 	  for(int TrigIter=0; TrigIter<TrigMult; ++TrigIter){
	  	for(int nPaddle=TrigIter*16; nPaddle<TrigIter*16+4; ++nPaddle){
	  	auto PaddleDigit=MRSDigit[nPaddle];
            	 for (size_t i=0; i < PaddleDigit->NADC();++i){
            	int FirstThresholdCheck;
	    	int threshold=2000;
	    	int Planeshit=0;
	    	FirstThresholdCheck=PaddleDigit->ADC(i);
	       //std::cout<<"ADC Count for "<<i<<" is "<<FirstThresholdCheck<<std::endl;
	       	if(FirstThresholdCheck<threshold){ //set threshold
	          
	         int HitTick=i;//which tick was there a hit?
		 MuRSPaddleHits[nPaddle-16*TrigIter].push_back(i);
		 fMuRSHitTiming->Fill(i);
		 std::cout<<"Found a hit at time tick "<<HitTick<<std::endl;
		 //PaddleFirst=nPaddle;
		 Planeshit=1; //Counter for number of planes we pass
		 for (int SecondPaddleIter=16*TrigIter+4; SecondPaddleIter<16*TrigIter+8; ++SecondPaddleIter){ //Look at second plane of paddles
		  
		   auto SecondThresholdCheck=MRSDigit[SecondPaddleIter]->ADC(i);
		   if(SecondThresholdCheck<threshold){ //If we're over threshold
		   MuRSPaddleHits[SecondPaddleIter-16*TrigIter].push_back(i);
		     Planeshit=2;//Second plane was hit
		     for (int ThirdPaddleIter=16*TrigIter+8; ThirdPaddleIter<16*TrigIter+12; ++ThirdPaddleIter){ //Third plane paddles
		      
		       auto ThirdThresholdCheck=MRSDigit[ThirdPaddleIter]->ADC(i);
		       if(ThirdThresholdCheck<threshold){ //Over threshold?
		    	 MuRSPaddleHits[ThirdPaddleIter-16*TrigIter].push_back(i);
			 Planeshit=3;//Three planes hit
			 for (int FourthPaddleIter=16*TrigIter+12; FourthPaddleIter<16*TrigIter+16; ++FourthPaddleIter){ //Fourth plane paddles
		              
			      auto FourthThresholdCheck=MRSDigit[FourthPaddleIter]->ADC(i);
		       	     if(FourthThresholdCheck<threshold){ //Over threshold?
		         	MuRSPaddleHits[FourthPaddleIter-16*TrigIter].push_back(i);
				 Planeshit=4;//Made it through 4 planes.
		              }// if fourth threshold
			   }//fourth iter
			  }//if third threshold
			}//third iter
	             }//if second threshold
	          }//second iter
std::cout<<"MuRS found a hit! Something passed through "<<Planeshit<<" planes."<<std::endl;
		  
	        }//if first threshold
	       
            }// close loop over time ticks
	   }//close loop over npaddle
	   }//Close TrigIter */
	   for (int TrigIter=0; TrigIter<TrigMult; ++TrigIter){
	   	for (int nPaddle=TrigIter*16; nPaddle<(TrigIter+1)*16; ++nPaddle){
			auto PaddleDigit=MRSDigit[nPaddle];
			for (size_t i=0; i<PaddleDigit->NADC(); ++i){
				if(PaddleDigit->ADC(i)<Threshold){
				MuRSPaddleHits[nPaddle-TrigIter*16].push_back(i);
				fMuRSHitTiming->Fill(i);
				fAmpVsPaddle->Fill(nPaddle-TrigIter*16,Threshold-PaddleDigit->ADC(i));
				fTotalPaddleHits->Fill(nPaddle-TrigIter*16);
				fPaddleHits->Fill(nPaddle-TrigIter*16);
				}
			}
		}
	   }
	
}//tdu.NTriggers loop
/* 	   for(int i=0; i<16; ++i){
	   TEST->Fill(i,i);
	   TEST1->Fill(i,i);
	   auto size=MuRSPaddleHits[i];
	    for(size_t j=0; j<size.size(); ++j){
	    std::cout<<"For paddle "<<i<<" the hit ticks were "<<MuRSPaddleHits[i].at(j)<<std::endl;
	    }
	    } */
	    for(int i=0; i<16; ++i){
	   MuRSPaddleHits[i].clear();
	    }
	   
}//event

void MuonRangeStackHits::beginJob()
{
  art::ServiceHandle<art::TFileService> tfs;
  fMuRSHitTiming = tfs->make<TH1F>("MuRSHitTicks","MuRSHitTicks", 3073, 0, 3073);
  fPaddleHits=tfs->make<TH1F>("PaddleHits", "PaddleHits",16, 0, 16);
  fTotalPaddleHits=tfs->make<TH1F>("TotalPaddleHits","TotalPaddleHits",16, 0, 16);
  fAmpVsPaddle=tfs->make<TH2F>("AmplitudeVsPaddle", "AmplitudeVsPaddle",16,0,16,2021,0,2021);
  // Implementation of optional member function here.
}

void MuonRangeStackHits::beginRun(art::Run & r)
{
  // Implementation of optional member function here.
}

void MuonRangeStackHits::beginSubRun(art::SubRun & sr)
{

  // Implementation of optional member function here.
}

void MuonRangeStackHits::endJob()
{
  // Implementation of optional member function here.
}

void MuonRangeStackHits::endRun(art::Run & r)
{
  // Implementation of optional member function here.
}

void MuonRangeStackHits::endSubRun(art::SubRun & sr)
{
  // Implementation of optional member function here.
}

void MuonRangeStackHits::reconfigure(fhicl::ParameterSet const & p)
{
  // Implementation of optional member function here.
}

void MuonRangeStackHits::respondToCloseInputFile(art::FileBlock const & fb)
{
  // Implementation of optional member function here.
}

void MuonRangeStackHits::respondToCloseOutputFiles(art::FileBlock const & fb)
{
  // Implementation of optional member function here.
}

void MuonRangeStackHits::respondToOpenInputFile(art::FileBlock const & fb)
{
  // Implementation of optional member function here.
}

void MuonRangeStackHits::respondToOpenOutputFiles(art::FileBlock const & fb)
{
  // Implementation of optional member function here.
}

DEFINE_ART_MODULE(MuonRangeStackHits)
