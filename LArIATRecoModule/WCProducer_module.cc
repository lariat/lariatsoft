////////////////////////////////////////////////////////////////////////
// Class:       WCProducer
// Module Type: producer
// File:        WCProducer_module.cc
//
// Generated at Wed Oct 21 15:46:13 2015 by Greg Pulliam using artmod
// from cetpkgsupport v1_08_06.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDProducer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "art/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"
#include <iostream>
#include <fstream>
#include <vector>
#include "art/Framework/Services/Registry/ServiceHandle.h"
#include "Utilities/AssociationUtil.h"
#include "art/Framework/Services/Optional/TFileService.h"

//ROOT Things
#include <TH1F.h>

//LArIAT Things
#include "RawDataUtilities/TriggerDigitUtility.h"
//#include "LArIATRecoAlg/WCTrackBuilderAlgBase.h"
#include "LArIATRecoAlg/WCHitFinderAlg.h"
#include "LArIATDataProducts/WCTrack.h"
#include "Utilities/DatabaseUtilityT1034.h"
#include "LArIATRecoAlg/WCTrackBuilderFactoryTest.h"



#include <utility>
#include <string>
#include <memory>

class WCProducer;

class WCProducer : public art::EDProducer {
public:
  explicit WCProducer(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  WCProducer(WCProducer const &) = delete;
  WCProducer(WCProducer &&) = delete;
  WCProducer & operator = (WCProducer const &) = delete;
  WCProducer & operator = (WCProducer &&) = delete;

  // Required functions.
  void produce(art::Event & e) override;

  // Selected optional functions.
  void beginJob() override;
  void beginRun(art::Run & r) override;
  void beginSubRun(art::SubRun & sr) override;
  void endJob() override;
  void endRun(art::Run & r) override;
  void endSubRun(art::SubRun & sr) override;
  void reconfigure(fhicl::ParameterSet const & p) override;
  void respondToCloseInputFile(art::FileBlock const & fb) override;
  void respondToCloseOutputFiles(art::FileBlock const & fb) override;
  void respondToOpenInputFile(art::FileBlock const & fb) override;
  void respondToOpenOutputFiles(art::FileBlock const & fb) override;

private:
WCTrackAlgBase *pAlg;
  // Declare member data here.
  std::string WCTrackBuilderAlgName;
  fhicl::ParameterSet pset;
 // WCTrackAlgBase *pAlg;
};


WCProducer::WCProducer(fhicl::ParameterSet const & p)  
// :
// Initialize member data here.
{
   WCTrackBuilderAlgName = p.get<std::string>("FactoryAlgLabel"); //The name of the algorithm to use from the WCTrackBuilder.fcl
pset=p;
  // Call appropriate produces<>() functions here.
}

void WCProducer::produce(art::Event & e)
{
pAlg->InitializeGeometry();
  // Implementation of required member function here.
}

void WCProducer::beginJob()
{
      //WCTrackAlgBase *pAlg = NULL;
      pAlg = WCTrackBuilderFactory::Get()->CreateAlg(WCTrackBuilderAlgName);
      pAlg->reconfigure( pset );
      std::cout << "////////////////////////////////////////////////" << std::endl;
      if (pAlg){
      std::cout << "It works?" << std::endl;
      pAlg->Hello();
      }
      else{
      std::cout<<"We dun goofd"<<std::endl;
      }
      std::cout << "////////////////////////////////////////////////" << std::endl;
		
      
  // Implementation of optional member function here.
}

void WCProducer::beginRun(art::Run & r)
{
  // Implementation of optional member function here.
}

void WCProducer::beginSubRun(art::SubRun & sr)
{
  // Implementation of optional member function here.
}

void WCProducer::endJob()
{
  // Implementation of optional member function here.
}

void WCProducer::endRun(art::Run & r)
{
  // Implementation of optional member function here.
}

void WCProducer::endSubRun(art::SubRun & sr)
{
  // Implementation of optional member function here.
}

void WCProducer::reconfigure(fhicl::ParameterSet const & p)
{
  // Implementation of optional member function here.
}

void WCProducer::respondToCloseInputFile(art::FileBlock const & fb)
{
  // Implementation of optional member function here.
}

void WCProducer::respondToCloseOutputFiles(art::FileBlock const & fb)
{
  // Implementation of optional member function here.
}

void WCProducer::respondToOpenInputFile(art::FileBlock const & fb)
{
  // Implementation of optional member function here.
}

void WCProducer::respondToOpenOutputFiles(art::FileBlock const & fb)
{
  // Implementation of optional member function here.
}

DEFINE_ART_MODULE(WCProducer)
