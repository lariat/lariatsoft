////////////////////////////////////////////////////////////////////////
// Class:       WireChamberTrackBuilder
// Module Type: producer
// File:        WireChamberTrackBuilder_module.cc
//
// Generated at Sat May 30 03:42:56 2015 by Ryan Linehan using artmod
// from cetpkgsupport v1_08_05.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDProducer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "art/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"
#include <iostream>
#include <TH1F.h>
#include "art/Framework/Services/Optional/TFileService.h"
#include "art/Framework/Services/Registry/ServiceHandle.h"
#include "art/Framework/Services/Optional/TFileDirectory.h"

//LArIAT Things
#include "RawDataUtilities/TriggerDigitUtility.h"
#include "LArIATRecoAlg/WCTrackBuilderAlg.h"


#include <memory>

class WireChamberTrackBuilder;

class WireChamberTrackBuilder : public art::EDProducer {
public:
  explicit WireChamberTrackBuilder(fhicl::ParameterSet const & pset);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  WireChamberTrackBuilder(WireChamberTrackBuilder const &) = delete;
  WireChamberTrackBuilder(WireChamberTrackBuilder &&) = delete;
  WireChamberTrackBuilder & operator = (WireChamberTrackBuilder const &) = delete;
  WireChamberTrackBuilder & operator = (WireChamberTrackBuilder &&) = delete;

  // Required functions.
  void produce(art::Event & e) override;

  // Selected optional functions.
  void beginJob() override;
  void beginRun(art::Run & r) override;
  void beginSubRun(art::SubRun & sr) override;
  void endJob() override;
  void endRun(art::Run & r) override;
  void endSubRun(art::SubRun & sr) override;
  void reconfigure(fhicl::ParameterSet const & p) override;
  void respondToCloseInputFile(art::FileBlock const & fb) override;
  void respondToCloseOutputFiles(art::FileBlock const & fb) override;
  void respondToOpenInputFile(art::FileBlock const & fb) override;
  void respondToOpenOutputFiles(art::FileBlock const & fb) override;

private:
  // Declare member data here.

  std::string fTriggerUtility;

  //Algorithm object for track building
  WCTrackBuilderAlg fWCTrackBuilderAlg;



};


WireChamberTrackBuilder::WireChamberTrackBuilder(fhicl::ParameterSet const & pset)
 :fWCTrackBuilderAlg(pset.get< fhicl::ParameterSet > ("WCTrackBuilderAlg"))
// :
// Initialize member data here.
{
  // Call appropriate produces<>() functions here.
  

}

void WireChamberTrackBuilder::produce(art::Event & e)
{
  // Implementation of required member function here.

  //Creating the WireChamberTrack collection
  // std::unique_ptr<std::vector<recob::WireChamberTrack> > WCTrackCol(new std::vector<recob::WireChamberTrack> );

  //Creating an association between the WireChamberTrack collection and the trigger
  //  std::unique_ptr<art::Assns<raw::Trigger, recob::WireChamberTrack> > TriggerWCTrackAssn(new art::Assns<raw::Trigger, recob::WireChamberTrack>);
  

  // ###########################################
  // ### Grab the trigger data utility (tdu) ###
  // ###########################################

  //Bad way to do this...
  fTriggerUtility = "FragmentToDigit";
  rdu::TriggerDigitUtility tdu(e, fTriggerUtility);
  
  // ##############################
  // ### Loop over the triggers ###
  // ##############################
  for( size_t iTrig = 0; iTrig < tdu.NTriggers(); ++iTrig ){
    std::vector<const raw::AuxDetDigit*> WireChamber1Digits = tdu.TriggerMWPC1Digits(iTrig);
    
    // ##################################################################################
    // ###                                                                            ###
    // ###   First, we must perform hitfinding on the WC wires. This is done in the   ###
    // ###   initial loop over the digits for this trigger. This spits out a set of   ###
    // ###   hit times and hit channels that is then passed into the track momentum   ###
    // ###   reconstruction algorithm after the loop.                                 ###
    // ###                                                                            ###
    // ##################################################################################

    //PUT HITFINDING/CONVERSION ALG HERE    

    //PUT TRACK MOMENTUM RECO ALG HERE
    std::cout << "Test run." << std::endl;

    fWCTrackBuilderAlg.firstFunction();

  }





}

void WireChamberTrackBuilder::beginJob()
{
  // Implementation of optional member function here.
  art::ServiceHandle<art::TFileService> tfs;
}

void WireChamberTrackBuilder::beginRun(art::Run & r)
{
  // Implementation of optional member function here.
}

void WireChamberTrackBuilder::beginSubRun(art::SubRun & sr)
{
  // Implementation of optional member function here.
}

void WireChamberTrackBuilder::endJob()
{
  // Implementation of optional member function here.
}

void WireChamberTrackBuilder::endRun(art::Run & r)
{
  // Implementation of optional member function here.
}

void WireChamberTrackBuilder::endSubRun(art::SubRun & sr)
{
  // Implementation of optional member function here.
}

void WireChamberTrackBuilder::reconfigure(fhicl::ParameterSet const & p)
{
  // Implementation of optional member function here.
  fTriggerUtility = p.get< std::string >("TriggerUtility","FragmentToDigit");
}

void WireChamberTrackBuilder::respondToCloseInputFile(art::FileBlock const & fb)
{
  // Implementation of optional member function here.
}

void WireChamberTrackBuilder::respondToCloseOutputFiles(art::FileBlock const & fb)
{
  // Implementation of optional member function here.
}

void WireChamberTrackBuilder::respondToOpenInputFile(art::FileBlock const & fb)
{
  // Implementation of optional member function here.
}

void WireChamberTrackBuilder::respondToOpenOutputFiles(art::FileBlock const & fb)
{
  // Implementation of optional member function here.
}

DEFINE_ART_MODULE(WireChamberTrackBuilder)
